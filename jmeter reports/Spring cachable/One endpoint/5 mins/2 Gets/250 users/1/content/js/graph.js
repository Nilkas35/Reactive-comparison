/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 35123.0, "series": [{"data": [[0.0, 0.0], [0.1, 6.0], [0.2, 10.0], [0.3, 13.0], [0.4, 15.0], [0.5, 16.0], [0.6, 17.0], [0.7, 18.0], [0.8, 18.0], [0.9, 18.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 19.0], [1.6, 20.0], [1.7, 20.0], [1.8, 20.0], [1.9, 20.0], [2.0, 20.0], [2.1, 20.0], [2.2, 20.0], [2.3, 20.0], [2.4, 20.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 21.0], [3.3, 21.0], [3.4, 21.0], [3.5, 21.0], [3.6, 21.0], [3.7, 21.0], [3.8, 21.0], [3.9, 21.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 21.0], [4.4, 21.0], [4.5, 21.0], [4.6, 21.0], [4.7, 21.0], [4.8, 21.0], [4.9, 21.0], [5.0, 21.0], [5.1, 21.0], [5.2, 21.0], [5.3, 21.0], [5.4, 21.0], [5.5, 21.0], [5.6, 21.0], [5.7, 21.0], [5.8, 21.0], [5.9, 21.0], [6.0, 21.0], [6.1, 21.0], [6.2, 21.0], [6.3, 21.0], [6.4, 21.0], [6.5, 21.0], [6.6, 21.0], [6.7, 21.0], [6.8, 21.0], [6.9, 21.0], [7.0, 21.0], [7.1, 21.0], [7.2, 21.0], [7.3, 21.0], [7.4, 21.0], [7.5, 22.0], [7.6, 22.0], [7.7, 22.0], [7.8, 22.0], [7.9, 22.0], [8.0, 22.0], [8.1, 22.0], [8.2, 22.0], [8.3, 22.0], [8.4, 22.0], [8.5, 22.0], [8.6, 22.0], [8.7, 22.0], [8.8, 22.0], [8.9, 22.0], [9.0, 22.0], [9.1, 22.0], [9.2, 22.0], [9.3, 22.0], [9.4, 22.0], [9.5, 22.0], [9.6, 22.0], [9.7, 22.0], [9.8, 22.0], [9.9, 22.0], [10.0, 22.0], [10.1, 22.0], [10.2, 22.0], [10.3, 22.0], [10.4, 22.0], [10.5, 22.0], [10.6, 22.0], [10.7, 22.0], [10.8, 22.0], [10.9, 22.0], [11.0, 22.0], [11.1, 22.0], [11.2, 22.0], [11.3, 22.0], [11.4, 22.0], [11.5, 22.0], [11.6, 22.0], [11.7, 22.0], [11.8, 22.0], [11.9, 22.0], [12.0, 22.0], [12.1, 22.0], [12.2, 22.0], [12.3, 22.0], [12.4, 22.0], [12.5, 22.0], [12.6, 22.0], [12.7, 22.0], [12.8, 22.0], [12.9, 22.0], [13.0, 22.0], [13.1, 22.0], [13.2, 22.0], [13.3, 22.0], [13.4, 22.0], [13.5, 22.0], [13.6, 22.0], [13.7, 22.0], [13.8, 22.0], [13.9, 22.0], [14.0, 22.0], [14.1, 22.0], [14.2, 22.0], [14.3, 22.0], [14.4, 22.0], [14.5, 22.0], [14.6, 22.0], [14.7, 22.0], [14.8, 22.0], [14.9, 22.0], [15.0, 22.0], [15.1, 22.0], [15.2, 22.0], [15.3, 22.0], [15.4, 22.0], [15.5, 22.0], [15.6, 22.0], [15.7, 22.0], [15.8, 22.0], [15.9, 22.0], [16.0, 22.0], [16.1, 22.0], [16.2, 22.0], [16.3, 22.0], [16.4, 22.0], [16.5, 22.0], [16.6, 22.0], [16.7, 22.0], [16.8, 22.0], [16.9, 22.0], [17.0, 22.0], [17.1, 22.0], [17.2, 22.0], [17.3, 22.0], [17.4, 22.0], [17.5, 22.0], [17.6, 22.0], [17.7, 22.0], [17.8, 22.0], [17.9, 22.0], [18.0, 22.0], [18.1, 22.0], [18.2, 22.0], [18.3, 23.0], [18.4, 23.0], [18.5, 23.0], [18.6, 23.0], [18.7, 23.0], [18.8, 23.0], [18.9, 23.0], [19.0, 23.0], [19.1, 23.0], [19.2, 23.0], [19.3, 23.0], [19.4, 23.0], [19.5, 23.0], [19.6, 23.0], [19.7, 23.0], [19.8, 23.0], [19.9, 23.0], [20.0, 23.0], [20.1, 23.0], [20.2, 23.0], [20.3, 23.0], [20.4, 23.0], [20.5, 23.0], [20.6, 23.0], [20.7, 23.0], [20.8, 23.0], [20.9, 23.0], [21.0, 23.0], [21.1, 23.0], [21.2, 23.0], [21.3, 23.0], [21.4, 23.0], [21.5, 23.0], [21.6, 23.0], [21.7, 23.0], [21.8, 23.0], [21.9, 23.0], [22.0, 23.0], [22.1, 23.0], [22.2, 23.0], [22.3, 23.0], [22.4, 23.0], [22.5, 23.0], [22.6, 23.0], [22.7, 23.0], [22.8, 23.0], [22.9, 23.0], [23.0, 23.0], [23.1, 23.0], [23.2, 23.0], [23.3, 23.0], [23.4, 23.0], [23.5, 23.0], [23.6, 23.0], [23.7, 23.0], [23.8, 23.0], [23.9, 23.0], [24.0, 23.0], [24.1, 23.0], [24.2, 23.0], [24.3, 23.0], [24.4, 23.0], [24.5, 23.0], [24.6, 23.0], [24.7, 23.0], [24.8, 23.0], [24.9, 23.0], [25.0, 23.0], [25.1, 23.0], [25.2, 23.0], [25.3, 23.0], [25.4, 23.0], [25.5, 23.0], [25.6, 23.0], [25.7, 23.0], [25.8, 23.0], [25.9, 23.0], [26.0, 23.0], [26.1, 23.0], [26.2, 23.0], [26.3, 23.0], [26.4, 23.0], [26.5, 23.0], [26.6, 23.0], [26.7, 23.0], [26.8, 23.0], [26.9, 23.0], [27.0, 23.0], [27.1, 23.0], [27.2, 23.0], [27.3, 23.0], [27.4, 23.0], [27.5, 23.0], [27.6, 23.0], [27.7, 23.0], [27.8, 23.0], [27.9, 23.0], [28.0, 23.0], [28.1, 23.0], [28.2, 23.0], [28.3, 23.0], [28.4, 23.0], [28.5, 23.0], [28.6, 23.0], [28.7, 23.0], [28.8, 23.0], [28.9, 23.0], [29.0, 23.0], [29.1, 23.0], [29.2, 23.0], [29.3, 23.0], [29.4, 23.0], [29.5, 23.0], [29.6, 23.0], [29.7, 23.0], [29.8, 23.0], [29.9, 23.0], [30.0, 23.0], [30.1, 23.0], [30.2, 23.0], [30.3, 23.0], [30.4, 23.0], [30.5, 23.0], [30.6, 23.0], [30.7, 23.0], [30.8, 23.0], [30.9, 23.0], [31.0, 23.0], [31.1, 23.0], [31.2, 23.0], [31.3, 23.0], [31.4, 23.0], [31.5, 23.0], [31.6, 23.0], [31.7, 23.0], [31.8, 23.0], [31.9, 23.0], [32.0, 23.0], [32.1, 23.0], [32.2, 23.0], [32.3, 23.0], [32.4, 23.0], [32.5, 23.0], [32.6, 23.0], [32.7, 23.0], [32.8, 23.0], [32.9, 23.0], [33.0, 23.0], [33.1, 23.0], [33.2, 23.0], [33.3, 23.0], [33.4, 23.0], [33.5, 24.0], [33.6, 24.0], [33.7, 24.0], [33.8, 24.0], [33.9, 24.0], [34.0, 24.0], [34.1, 24.0], [34.2, 24.0], [34.3, 24.0], [34.4, 24.0], [34.5, 24.0], [34.6, 24.0], [34.7, 24.0], [34.8, 24.0], [34.9, 24.0], [35.0, 24.0], [35.1, 24.0], [35.2, 24.0], [35.3, 24.0], [35.4, 24.0], [35.5, 24.0], [35.6, 24.0], [35.7, 24.0], [35.8, 24.0], [35.9, 24.0], [36.0, 24.0], [36.1, 24.0], [36.2, 24.0], [36.3, 24.0], [36.4, 24.0], [36.5, 24.0], [36.6, 24.0], [36.7, 24.0], [36.8, 24.0], [36.9, 24.0], [37.0, 24.0], [37.1, 24.0], [37.2, 24.0], [37.3, 24.0], [37.4, 24.0], [37.5, 24.0], [37.6, 24.0], [37.7, 24.0], [37.8, 24.0], [37.9, 24.0], [38.0, 24.0], [38.1, 24.0], [38.2, 24.0], [38.3, 24.0], [38.4, 24.0], [38.5, 24.0], [38.6, 24.0], [38.7, 24.0], [38.8, 24.0], [38.9, 24.0], [39.0, 24.0], [39.1, 24.0], [39.2, 24.0], [39.3, 24.0], [39.4, 24.0], [39.5, 24.0], [39.6, 24.0], [39.7, 24.0], [39.8, 24.0], [39.9, 24.0], [40.0, 24.0], [40.1, 24.0], [40.2, 24.0], [40.3, 24.0], [40.4, 24.0], [40.5, 24.0], [40.6, 24.0], [40.7, 24.0], [40.8, 24.0], [40.9, 24.0], [41.0, 24.0], [41.1, 24.0], [41.2, 24.0], [41.3, 24.0], [41.4, 24.0], [41.5, 24.0], [41.6, 24.0], [41.7, 24.0], [41.8, 24.0], [41.9, 24.0], [42.0, 24.0], [42.1, 24.0], [42.2, 24.0], [42.3, 24.0], [42.4, 24.0], [42.5, 24.0], [42.6, 24.0], [42.7, 24.0], [42.8, 24.0], [42.9, 24.0], [43.0, 24.0], [43.1, 24.0], [43.2, 24.0], [43.3, 24.0], [43.4, 24.0], [43.5, 24.0], [43.6, 24.0], [43.7, 24.0], [43.8, 24.0], [43.9, 24.0], [44.0, 24.0], [44.1, 24.0], [44.2, 24.0], [44.3, 24.0], [44.4, 24.0], [44.5, 24.0], [44.6, 24.0], [44.7, 24.0], [44.8, 24.0], [44.9, 24.0], [45.0, 24.0], [45.1, 24.0], [45.2, 24.0], [45.3, 24.0], [45.4, 24.0], [45.5, 24.0], [45.6, 24.0], [45.7, 24.0], [45.8, 24.0], [45.9, 24.0], [46.0, 24.0], [46.1, 24.0], [46.2, 24.0], [46.3, 24.0], [46.4, 24.0], [46.5, 24.0], [46.6, 24.0], [46.7, 24.0], [46.8, 24.0], [46.9, 24.0], [47.0, 24.0], [47.1, 24.0], [47.2, 24.0], [47.3, 24.0], [47.4, 24.0], [47.5, 24.0], [47.6, 24.0], [47.7, 24.0], [47.8, 24.0], [47.9, 24.0], [48.0, 24.0], [48.1, 24.0], [48.2, 24.0], [48.3, 24.0], [48.4, 24.0], [48.5, 24.0], [48.6, 25.0], [48.7, 25.0], [48.8, 25.0], [48.9, 25.0], [49.0, 25.0], [49.1, 25.0], [49.2, 25.0], [49.3, 25.0], [49.4, 25.0], [49.5, 25.0], [49.6, 25.0], [49.7, 25.0], [49.8, 25.0], [49.9, 25.0], [50.0, 25.0], [50.1, 25.0], [50.2, 25.0], [50.3, 25.0], [50.4, 25.0], [50.5, 25.0], [50.6, 25.0], [50.7, 25.0], [50.8, 25.0], [50.9, 25.0], [51.0, 25.0], [51.1, 25.0], [51.2, 25.0], [51.3, 25.0], [51.4, 25.0], [51.5, 25.0], [51.6, 25.0], [51.7, 25.0], [51.8, 25.0], [51.9, 25.0], [52.0, 25.0], [52.1, 25.0], [52.2, 25.0], [52.3, 25.0], [52.4, 25.0], [52.5, 25.0], [52.6, 25.0], [52.7, 25.0], [52.8, 25.0], [52.9, 25.0], [53.0, 25.0], [53.1, 25.0], [53.2, 25.0], [53.3, 25.0], [53.4, 25.0], [53.5, 25.0], [53.6, 25.0], [53.7, 25.0], [53.8, 25.0], [53.9, 25.0], [54.0, 25.0], [54.1, 25.0], [54.2, 25.0], [54.3, 25.0], [54.4, 25.0], [54.5, 25.0], [54.6, 25.0], [54.7, 25.0], [54.8, 25.0], [54.9, 25.0], [55.0, 25.0], [55.1, 25.0], [55.2, 25.0], [55.3, 25.0], [55.4, 25.0], [55.5, 25.0], [55.6, 25.0], [55.7, 25.0], [55.8, 25.0], [55.9, 25.0], [56.0, 25.0], [56.1, 25.0], [56.2, 25.0], [56.3, 25.0], [56.4, 25.0], [56.5, 25.0], [56.6, 25.0], [56.7, 25.0], [56.8, 25.0], [56.9, 25.0], [57.0, 25.0], [57.1, 25.0], [57.2, 25.0], [57.3, 25.0], [57.4, 25.0], [57.5, 25.0], [57.6, 25.0], [57.7, 25.0], [57.8, 25.0], [57.9, 25.0], [58.0, 25.0], [58.1, 25.0], [58.2, 25.0], [58.3, 25.0], [58.4, 25.0], [58.5, 25.0], [58.6, 25.0], [58.7, 25.0], [58.8, 25.0], [58.9, 25.0], [59.0, 25.0], [59.1, 25.0], [59.2, 25.0], [59.3, 25.0], [59.4, 25.0], [59.5, 25.0], [59.6, 25.0], [59.7, 25.0], [59.8, 25.0], [59.9, 25.0], [60.0, 25.0], [60.1, 25.0], [60.2, 25.0], [60.3, 25.0], [60.4, 25.0], [60.5, 25.0], [60.6, 25.0], [60.7, 25.0], [60.8, 25.0], [60.9, 25.0], [61.0, 25.0], [61.1, 25.0], [61.2, 25.0], [61.3, 25.0], [61.4, 25.0], [61.5, 25.0], [61.6, 25.0], [61.7, 25.0], [61.8, 25.0], [61.9, 25.0], [62.0, 25.0], [62.1, 26.0], [62.2, 26.0], [62.3, 26.0], [62.4, 26.0], [62.5, 26.0], [62.6, 26.0], [62.7, 26.0], [62.8, 26.0], [62.9, 26.0], [63.0, 26.0], [63.1, 26.0], [63.2, 26.0], [63.3, 26.0], [63.4, 26.0], [63.5, 26.0], [63.6, 26.0], [63.7, 26.0], [63.8, 26.0], [63.9, 26.0], [64.0, 26.0], [64.1, 26.0], [64.2, 26.0], [64.3, 26.0], [64.4, 26.0], [64.5, 26.0], [64.6, 26.0], [64.7, 26.0], [64.8, 26.0], [64.9, 26.0], [65.0, 26.0], [65.1, 26.0], [65.2, 26.0], [65.3, 26.0], [65.4, 26.0], [65.5, 26.0], [65.6, 26.0], [65.7, 26.0], [65.8, 26.0], [65.9, 26.0], [66.0, 26.0], [66.1, 26.0], [66.2, 26.0], [66.3, 26.0], [66.4, 26.0], [66.5, 26.0], [66.6, 26.0], [66.7, 26.0], [66.8, 26.0], [66.9, 26.0], [67.0, 26.0], [67.1, 26.0], [67.2, 26.0], [67.3, 26.0], [67.4, 26.0], [67.5, 26.0], [67.6, 26.0], [67.7, 26.0], [67.8, 26.0], [67.9, 26.0], [68.0, 26.0], [68.1, 26.0], [68.2, 26.0], [68.3, 26.0], [68.4, 26.0], [68.5, 26.0], [68.6, 26.0], [68.7, 26.0], [68.8, 26.0], [68.9, 26.0], [69.0, 26.0], [69.1, 26.0], [69.2, 26.0], [69.3, 26.0], [69.4, 26.0], [69.5, 26.0], [69.6, 26.0], [69.7, 26.0], [69.8, 26.0], [69.9, 26.0], [70.0, 26.0], [70.1, 26.0], [70.2, 26.0], [70.3, 26.0], [70.4, 26.0], [70.5, 26.0], [70.6, 26.0], [70.7, 26.0], [70.8, 26.0], [70.9, 26.0], [71.0, 26.0], [71.1, 26.0], [71.2, 26.0], [71.3, 26.0], [71.4, 26.0], [71.5, 26.0], [71.6, 26.0], [71.7, 26.0], [71.8, 26.0], [71.9, 26.0], [72.0, 26.0], [72.1, 26.0], [72.2, 26.0], [72.3, 26.0], [72.4, 26.0], [72.5, 26.0], [72.6, 26.0], [72.7, 26.0], [72.8, 26.0], [72.9, 26.0], [73.0, 26.0], [73.1, 26.0], [73.2, 27.0], [73.3, 27.0], [73.4, 27.0], [73.5, 27.0], [73.6, 27.0], [73.7, 27.0], [73.8, 27.0], [73.9, 27.0], [74.0, 27.0], [74.1, 27.0], [74.2, 27.0], [74.3, 27.0], [74.4, 27.0], [74.5, 27.0], [74.6, 27.0], [74.7, 27.0], [74.8, 27.0], [74.9, 27.0], [75.0, 27.0], [75.1, 27.0], [75.2, 27.0], [75.3, 27.0], [75.4, 27.0], [75.5, 27.0], [75.6, 27.0], [75.7, 27.0], [75.8, 27.0], [75.9, 27.0], [76.0, 27.0], [76.1, 27.0], [76.2, 27.0], [76.3, 27.0], [76.4, 27.0], [76.5, 27.0], [76.6, 27.0], [76.7, 27.0], [76.8, 27.0], [76.9, 27.0], [77.0, 27.0], [77.1, 27.0], [77.2, 27.0], [77.3, 27.0], [77.4, 27.0], [77.5, 27.0], [77.6, 27.0], [77.7, 27.0], [77.8, 27.0], [77.9, 27.0], [78.0, 27.0], [78.1, 27.0], [78.2, 27.0], [78.3, 27.0], [78.4, 27.0], [78.5, 27.0], [78.6, 27.0], [78.7, 27.0], [78.8, 27.0], [78.9, 27.0], [79.0, 27.0], [79.1, 27.0], [79.2, 27.0], [79.3, 27.0], [79.4, 27.0], [79.5, 27.0], [79.6, 27.0], [79.7, 27.0], [79.8, 27.0], [79.9, 27.0], [80.0, 27.0], [80.1, 27.0], [80.2, 27.0], [80.3, 27.0], [80.4, 27.0], [80.5, 27.0], [80.6, 27.0], [80.7, 27.0], [80.8, 27.0], [80.9, 27.0], [81.0, 27.0], [81.1, 27.0], [81.2, 27.0], [81.3, 27.0], [81.4, 27.0], [81.5, 27.0], [81.6, 27.0], [81.7, 28.0], [81.8, 28.0], [81.9, 28.0], [82.0, 28.0], [82.1, 28.0], [82.2, 28.0], [82.3, 28.0], [82.4, 28.0], [82.5, 28.0], [82.6, 28.0], [82.7, 28.0], [82.8, 28.0], [82.9, 28.0], [83.0, 28.0], [83.1, 28.0], [83.2, 28.0], [83.3, 28.0], [83.4, 28.0], [83.5, 28.0], [83.6, 28.0], [83.7, 28.0], [83.8, 28.0], [83.9, 28.0], [84.0, 28.0], [84.1, 28.0], [84.2, 28.0], [84.3, 28.0], [84.4, 28.0], [84.5, 28.0], [84.6, 28.0], [84.7, 28.0], [84.8, 28.0], [84.9, 28.0], [85.0, 28.0], [85.1, 28.0], [85.2, 28.0], [85.3, 28.0], [85.4, 28.0], [85.5, 28.0], [85.6, 28.0], [85.7, 28.0], [85.8, 28.0], [85.9, 28.0], [86.0, 28.0], [86.1, 28.0], [86.2, 28.0], [86.3, 28.0], [86.4, 28.0], [86.5, 28.0], [86.6, 28.0], [86.7, 28.0], [86.8, 28.0], [86.9, 28.0], [87.0, 28.0], [87.1, 28.0], [87.2, 28.0], [87.3, 28.0], [87.4, 28.0], [87.5, 28.0], [87.6, 28.0], [87.7, 28.0], [87.8, 29.0], [87.9, 29.0], [88.0, 29.0], [88.1, 29.0], [88.2, 29.0], [88.3, 29.0], [88.4, 29.0], [88.5, 29.0], [88.6, 29.0], [88.7, 29.0], [88.8, 29.0], [88.9, 29.0], [89.0, 29.0], [89.1, 29.0], [89.2, 29.0], [89.3, 29.0], [89.4, 29.0], [89.5, 29.0], [89.6, 29.0], [89.7, 29.0], [89.8, 29.0], [89.9, 29.0], [90.0, 29.0], [90.1, 29.0], [90.2, 29.0], [90.3, 29.0], [90.4, 29.0], [90.5, 29.0], [90.6, 29.0], [90.7, 29.0], [90.8, 29.0], [90.9, 29.0], [91.0, 29.0], [91.1, 29.0], [91.2, 29.0], [91.3, 29.0], [91.4, 29.0], [91.5, 29.0], [91.6, 29.0], [91.7, 29.0], [91.8, 29.0], [91.9, 30.0], [92.0, 30.0], [92.1, 30.0], [92.2, 30.0], [92.3, 30.0], [92.4, 30.0], [92.5, 30.0], [92.6, 30.0], [92.7, 30.0], [92.8, 30.0], [92.9, 30.0], [93.0, 30.0], [93.1, 30.0], [93.2, 30.0], [93.3, 30.0], [93.4, 30.0], [93.5, 30.0], [93.6, 30.0], [93.7, 30.0], [93.8, 30.0], [93.9, 30.0], [94.0, 30.0], [94.1, 30.0], [94.2, 30.0], [94.3, 30.0], [94.4, 30.0], [94.5, 31.0], [94.6, 31.0], [94.7, 31.0], [94.8, 31.0], [94.9, 31.0], [95.0, 31.0], [95.1, 31.0], [95.2, 31.0], [95.3, 31.0], [95.4, 31.0], [95.5, 31.0], [95.6, 31.0], [95.7, 31.0], [95.8, 31.0], [95.9, 31.0], [96.0, 31.0], [96.1, 32.0], [96.2, 32.0], [96.3, 32.0], [96.4, 32.0], [96.5, 32.0], [96.6, 32.0], [96.7, 32.0], [96.8, 32.0], [96.9, 32.0], [97.0, 33.0], [97.1, 33.0], [97.2, 33.0], [97.3, 33.0], [97.4, 33.0], [97.5, 33.0], [97.6, 34.0], [97.7, 34.0], [97.8, 34.0], [97.9, 34.0], [98.0, 35.0], [98.1, 35.0], [98.2, 36.0], [98.3, 36.0], [98.4, 37.0], [98.5, 38.0], [98.6, 39.0], [98.7, 41.0], [98.8, 42.0], [98.9, 44.0], [99.0, 46.0], [99.1, 48.0], [99.2, 50.0], [99.3, 53.0], [99.4, 56.0], [99.5, 60.0], [99.6, 66.0], [99.7, 75.0], [99.8, 83.0], [99.9, 102.0], [100.0, 35094.0]], "isOverall": false, "label": "Get Member 1", "isController": false}, {"data": [[0.0, 0.0], [0.1, 6.0], [0.2, 10.0], [0.3, 13.0], [0.4, 15.0], [0.5, 16.0], [0.6, 17.0], [0.7, 18.0], [0.8, 18.0], [0.9, 18.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 19.0], [1.6, 20.0], [1.7, 20.0], [1.8, 20.0], [1.9, 20.0], [2.0, 20.0], [2.1, 20.0], [2.2, 20.0], [2.3, 20.0], [2.4, 20.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 20.0], [3.3, 21.0], [3.4, 21.0], [3.5, 21.0], [3.6, 21.0], [3.7, 21.0], [3.8, 21.0], [3.9, 21.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 21.0], [4.4, 21.0], [4.5, 21.0], [4.6, 21.0], [4.7, 21.0], [4.8, 21.0], [4.9, 21.0], [5.0, 21.0], [5.1, 21.0], [5.2, 21.0], [5.3, 21.0], [5.4, 21.0], [5.5, 21.0], [5.6, 21.0], [5.7, 21.0], [5.8, 21.0], [5.9, 21.0], [6.0, 21.0], [6.1, 21.0], [6.2, 21.0], [6.3, 21.0], [6.4, 21.0], [6.5, 21.0], [6.6, 21.0], [6.7, 21.0], [6.8, 21.0], [6.9, 21.0], [7.0, 21.0], [7.1, 21.0], [7.2, 21.0], [7.3, 21.0], [7.4, 21.0], [7.5, 21.0], [7.6, 22.0], [7.7, 22.0], [7.8, 22.0], [7.9, 22.0], [8.0, 22.0], [8.1, 22.0], [8.2, 22.0], [8.3, 22.0], [8.4, 22.0], [8.5, 22.0], [8.6, 22.0], [8.7, 22.0], [8.8, 22.0], [8.9, 22.0], [9.0, 22.0], [9.1, 22.0], [9.2, 22.0], [9.3, 22.0], [9.4, 22.0], [9.5, 22.0], [9.6, 22.0], [9.7, 22.0], [9.8, 22.0], [9.9, 22.0], [10.0, 22.0], [10.1, 22.0], [10.2, 22.0], [10.3, 22.0], [10.4, 22.0], [10.5, 22.0], [10.6, 22.0], [10.7, 22.0], [10.8, 22.0], [10.9, 22.0], [11.0, 22.0], [11.1, 22.0], [11.2, 22.0], [11.3, 22.0], [11.4, 22.0], [11.5, 22.0], [11.6, 22.0], [11.7, 22.0], [11.8, 22.0], [11.9, 22.0], [12.0, 22.0], [12.1, 22.0], [12.2, 22.0], [12.3, 22.0], [12.4, 22.0], [12.5, 22.0], [12.6, 22.0], [12.7, 22.0], [12.8, 22.0], [12.9, 22.0], [13.0, 22.0], [13.1, 22.0], [13.2, 22.0], [13.3, 22.0], [13.4, 22.0], [13.5, 22.0], [13.6, 22.0], [13.7, 22.0], [13.8, 22.0], [13.9, 22.0], [14.0, 22.0], [14.1, 22.0], [14.2, 22.0], [14.3, 22.0], [14.4, 22.0], [14.5, 22.0], [14.6, 22.0], [14.7, 22.0], [14.8, 22.0], [14.9, 22.0], [15.0, 22.0], [15.1, 22.0], [15.2, 22.0], [15.3, 22.0], [15.4, 22.0], [15.5, 22.0], [15.6, 22.0], [15.7, 22.0], [15.8, 22.0], [15.9, 22.0], [16.0, 22.0], [16.1, 22.0], [16.2, 22.0], [16.3, 22.0], [16.4, 22.0], [16.5, 22.0], [16.6, 22.0], [16.7, 22.0], [16.8, 22.0], [16.9, 22.0], [17.0, 22.0], [17.1, 22.0], [17.2, 22.0], [17.3, 22.0], [17.4, 22.0], [17.5, 22.0], [17.6, 22.0], [17.7, 22.0], [17.8, 22.0], [17.9, 22.0], [18.0, 22.0], [18.1, 22.0], [18.2, 22.0], [18.3, 22.0], [18.4, 23.0], [18.5, 23.0], [18.6, 23.0], [18.7, 23.0], [18.8, 23.0], [18.9, 23.0], [19.0, 23.0], [19.1, 23.0], [19.2, 23.0], [19.3, 23.0], [19.4, 23.0], [19.5, 23.0], [19.6, 23.0], [19.7, 23.0], [19.8, 23.0], [19.9, 23.0], [20.0, 23.0], [20.1, 23.0], [20.2, 23.0], [20.3, 23.0], [20.4, 23.0], [20.5, 23.0], [20.6, 23.0], [20.7, 23.0], [20.8, 23.0], [20.9, 23.0], [21.0, 23.0], [21.1, 23.0], [21.2, 23.0], [21.3, 23.0], [21.4, 23.0], [21.5, 23.0], [21.6, 23.0], [21.7, 23.0], [21.8, 23.0], [21.9, 23.0], [22.0, 23.0], [22.1, 23.0], [22.2, 23.0], [22.3, 23.0], [22.4, 23.0], [22.5, 23.0], [22.6, 23.0], [22.7, 23.0], [22.8, 23.0], [22.9, 23.0], [23.0, 23.0], [23.1, 23.0], [23.2, 23.0], [23.3, 23.0], [23.4, 23.0], [23.5, 23.0], [23.6, 23.0], [23.7, 23.0], [23.8, 23.0], [23.9, 23.0], [24.0, 23.0], [24.1, 23.0], [24.2, 23.0], [24.3, 23.0], [24.4, 23.0], [24.5, 23.0], [24.6, 23.0], [24.7, 23.0], [24.8, 23.0], [24.9, 23.0], [25.0, 23.0], [25.1, 23.0], [25.2, 23.0], [25.3, 23.0], [25.4, 23.0], [25.5, 23.0], [25.6, 23.0], [25.7, 23.0], [25.8, 23.0], [25.9, 23.0], [26.0, 23.0], [26.1, 23.0], [26.2, 23.0], [26.3, 23.0], [26.4, 23.0], [26.5, 23.0], [26.6, 23.0], [26.7, 23.0], [26.8, 23.0], [26.9, 23.0], [27.0, 23.0], [27.1, 23.0], [27.2, 23.0], [27.3, 23.0], [27.4, 23.0], [27.5, 23.0], [27.6, 23.0], [27.7, 23.0], [27.8, 23.0], [27.9, 23.0], [28.0, 23.0], [28.1, 23.0], [28.2, 23.0], [28.3, 23.0], [28.4, 23.0], [28.5, 23.0], [28.6, 23.0], [28.7, 23.0], [28.8, 23.0], [28.9, 23.0], [29.0, 23.0], [29.1, 23.0], [29.2, 23.0], [29.3, 23.0], [29.4, 23.0], [29.5, 23.0], [29.6, 23.0], [29.7, 23.0], [29.8, 23.0], [29.9, 23.0], [30.0, 23.0], [30.1, 23.0], [30.2, 23.0], [30.3, 23.0], [30.4, 23.0], [30.5, 23.0], [30.6, 23.0], [30.7, 23.0], [30.8, 23.0], [30.9, 23.0], [31.0, 23.0], [31.1, 23.0], [31.2, 23.0], [31.3, 23.0], [31.4, 23.0], [31.5, 23.0], [31.6, 23.0], [31.7, 23.0], [31.8, 23.0], [31.9, 23.0], [32.0, 23.0], [32.1, 23.0], [32.2, 23.0], [32.3, 23.0], [32.4, 23.0], [32.5, 23.0], [32.6, 23.0], [32.7, 23.0], [32.8, 23.0], [32.9, 23.0], [33.0, 23.0], [33.1, 23.0], [33.2, 23.0], [33.3, 23.0], [33.4, 23.0], [33.5, 23.0], [33.6, 23.0], [33.7, 24.0], [33.8, 24.0], [33.9, 24.0], [34.0, 24.0], [34.1, 24.0], [34.2, 24.0], [34.3, 24.0], [34.4, 24.0], [34.5, 24.0], [34.6, 24.0], [34.7, 24.0], [34.8, 24.0], [34.9, 24.0], [35.0, 24.0], [35.1, 24.0], [35.2, 24.0], [35.3, 24.0], [35.4, 24.0], [35.5, 24.0], [35.6, 24.0], [35.7, 24.0], [35.8, 24.0], [35.9, 24.0], [36.0, 24.0], [36.1, 24.0], [36.2, 24.0], [36.3, 24.0], [36.4, 24.0], [36.5, 24.0], [36.6, 24.0], [36.7, 24.0], [36.8, 24.0], [36.9, 24.0], [37.0, 24.0], [37.1, 24.0], [37.2, 24.0], [37.3, 24.0], [37.4, 24.0], [37.5, 24.0], [37.6, 24.0], [37.7, 24.0], [37.8, 24.0], [37.9, 24.0], [38.0, 24.0], [38.1, 24.0], [38.2, 24.0], [38.3, 24.0], [38.4, 24.0], [38.5, 24.0], [38.6, 24.0], [38.7, 24.0], [38.8, 24.0], [38.9, 24.0], [39.0, 24.0], [39.1, 24.0], [39.2, 24.0], [39.3, 24.0], [39.4, 24.0], [39.5, 24.0], [39.6, 24.0], [39.7, 24.0], [39.8, 24.0], [39.9, 24.0], [40.0, 24.0], [40.1, 24.0], [40.2, 24.0], [40.3, 24.0], [40.4, 24.0], [40.5, 24.0], [40.6, 24.0], [40.7, 24.0], [40.8, 24.0], [40.9, 24.0], [41.0, 24.0], [41.1, 24.0], [41.2, 24.0], [41.3, 24.0], [41.4, 24.0], [41.5, 24.0], [41.6, 24.0], [41.7, 24.0], [41.8, 24.0], [41.9, 24.0], [42.0, 24.0], [42.1, 24.0], [42.2, 24.0], [42.3, 24.0], [42.4, 24.0], [42.5, 24.0], [42.6, 24.0], [42.7, 24.0], [42.8, 24.0], [42.9, 24.0], [43.0, 24.0], [43.1, 24.0], [43.2, 24.0], [43.3, 24.0], [43.4, 24.0], [43.5, 24.0], [43.6, 24.0], [43.7, 24.0], [43.8, 24.0], [43.9, 24.0], [44.0, 24.0], [44.1, 24.0], [44.2, 24.0], [44.3, 24.0], [44.4, 24.0], [44.5, 24.0], [44.6, 24.0], [44.7, 24.0], [44.8, 24.0], [44.9, 24.0], [45.0, 24.0], [45.1, 24.0], [45.2, 24.0], [45.3, 24.0], [45.4, 24.0], [45.5, 24.0], [45.6, 24.0], [45.7, 24.0], [45.8, 24.0], [45.9, 24.0], [46.0, 24.0], [46.1, 24.0], [46.2, 24.0], [46.3, 24.0], [46.4, 24.0], [46.5, 24.0], [46.6, 24.0], [46.7, 24.0], [46.8, 24.0], [46.9, 24.0], [47.0, 24.0], [47.1, 24.0], [47.2, 24.0], [47.3, 24.0], [47.4, 24.0], [47.5, 24.0], [47.6, 24.0], [47.7, 24.0], [47.8, 24.0], [47.9, 24.0], [48.0, 24.0], [48.1, 24.0], [48.2, 24.0], [48.3, 24.0], [48.4, 24.0], [48.5, 24.0], [48.6, 24.0], [48.7, 24.0], [48.8, 25.0], [48.9, 25.0], [49.0, 25.0], [49.1, 25.0], [49.2, 25.0], [49.3, 25.0], [49.4, 25.0], [49.5, 25.0], [49.6, 25.0], [49.7, 25.0], [49.8, 25.0], [49.9, 25.0], [50.0, 25.0], [50.1, 25.0], [50.2, 25.0], [50.3, 25.0], [50.4, 25.0], [50.5, 25.0], [50.6, 25.0], [50.7, 25.0], [50.8, 25.0], [50.9, 25.0], [51.0, 25.0], [51.1, 25.0], [51.2, 25.0], [51.3, 25.0], [51.4, 25.0], [51.5, 25.0], [51.6, 25.0], [51.7, 25.0], [51.8, 25.0], [51.9, 25.0], [52.0, 25.0], [52.1, 25.0], [52.2, 25.0], [52.3, 25.0], [52.4, 25.0], [52.5, 25.0], [52.6, 25.0], [52.7, 25.0], [52.8, 25.0], [52.9, 25.0], [53.0, 25.0], [53.1, 25.0], [53.2, 25.0], [53.3, 25.0], [53.4, 25.0], [53.5, 25.0], [53.6, 25.0], [53.7, 25.0], [53.8, 25.0], [53.9, 25.0], [54.0, 25.0], [54.1, 25.0], [54.2, 25.0], [54.3, 25.0], [54.4, 25.0], [54.5, 25.0], [54.6, 25.0], [54.7, 25.0], [54.8, 25.0], [54.9, 25.0], [55.0, 25.0], [55.1, 25.0], [55.2, 25.0], [55.3, 25.0], [55.4, 25.0], [55.5, 25.0], [55.6, 25.0], [55.7, 25.0], [55.8, 25.0], [55.9, 25.0], [56.0, 25.0], [56.1, 25.0], [56.2, 25.0], [56.3, 25.0], [56.4, 25.0], [56.5, 25.0], [56.6, 25.0], [56.7, 25.0], [56.8, 25.0], [56.9, 25.0], [57.0, 25.0], [57.1, 25.0], [57.2, 25.0], [57.3, 25.0], [57.4, 25.0], [57.5, 25.0], [57.6, 25.0], [57.7, 25.0], [57.8, 25.0], [57.9, 25.0], [58.0, 25.0], [58.1, 25.0], [58.2, 25.0], [58.3, 25.0], [58.4, 25.0], [58.5, 25.0], [58.6, 25.0], [58.7, 25.0], [58.8, 25.0], [58.9, 25.0], [59.0, 25.0], [59.1, 25.0], [59.2, 25.0], [59.3, 25.0], [59.4, 25.0], [59.5, 25.0], [59.6, 25.0], [59.7, 25.0], [59.8, 25.0], [59.9, 25.0], [60.0, 25.0], [60.1, 25.0], [60.2, 25.0], [60.3, 25.0], [60.4, 25.0], [60.5, 25.0], [60.6, 25.0], [60.7, 25.0], [60.8, 25.0], [60.9, 25.0], [61.0, 25.0], [61.1, 25.0], [61.2, 25.0], [61.3, 25.0], [61.4, 25.0], [61.5, 25.0], [61.6, 25.0], [61.7, 25.0], [61.8, 25.0], [61.9, 25.0], [62.0, 25.0], [62.1, 25.0], [62.2, 26.0], [62.3, 26.0], [62.4, 26.0], [62.5, 26.0], [62.6, 26.0], [62.7, 26.0], [62.8, 26.0], [62.9, 26.0], [63.0, 26.0], [63.1, 26.0], [63.2, 26.0], [63.3, 26.0], [63.4, 26.0], [63.5, 26.0], [63.6, 26.0], [63.7, 26.0], [63.8, 26.0], [63.9, 26.0], [64.0, 26.0], [64.1, 26.0], [64.2, 26.0], [64.3, 26.0], [64.4, 26.0], [64.5, 26.0], [64.6, 26.0], [64.7, 26.0], [64.8, 26.0], [64.9, 26.0], [65.0, 26.0], [65.1, 26.0], [65.2, 26.0], [65.3, 26.0], [65.4, 26.0], [65.5, 26.0], [65.6, 26.0], [65.7, 26.0], [65.8, 26.0], [65.9, 26.0], [66.0, 26.0], [66.1, 26.0], [66.2, 26.0], [66.3, 26.0], [66.4, 26.0], [66.5, 26.0], [66.6, 26.0], [66.7, 26.0], [66.8, 26.0], [66.9, 26.0], [67.0, 26.0], [67.1, 26.0], [67.2, 26.0], [67.3, 26.0], [67.4, 26.0], [67.5, 26.0], [67.6, 26.0], [67.7, 26.0], [67.8, 26.0], [67.9, 26.0], [68.0, 26.0], [68.1, 26.0], [68.2, 26.0], [68.3, 26.0], [68.4, 26.0], [68.5, 26.0], [68.6, 26.0], [68.7, 26.0], [68.8, 26.0], [68.9, 26.0], [69.0, 26.0], [69.1, 26.0], [69.2, 26.0], [69.3, 26.0], [69.4, 26.0], [69.5, 26.0], [69.6, 26.0], [69.7, 26.0], [69.8, 26.0], [69.9, 26.0], [70.0, 26.0], [70.1, 26.0], [70.2, 26.0], [70.3, 26.0], [70.4, 26.0], [70.5, 26.0], [70.6, 26.0], [70.7, 26.0], [70.8, 26.0], [70.9, 26.0], [71.0, 26.0], [71.1, 26.0], [71.2, 26.0], [71.3, 26.0], [71.4, 26.0], [71.5, 26.0], [71.6, 26.0], [71.7, 26.0], [71.8, 26.0], [71.9, 26.0], [72.0, 26.0], [72.1, 26.0], [72.2, 26.0], [72.3, 26.0], [72.4, 26.0], [72.5, 26.0], [72.6, 26.0], [72.7, 26.0], [72.8, 26.0], [72.9, 26.0], [73.0, 26.0], [73.1, 26.0], [73.2, 26.0], [73.3, 27.0], [73.4, 27.0], [73.5, 27.0], [73.6, 27.0], [73.7, 27.0], [73.8, 27.0], [73.9, 27.0], [74.0, 27.0], [74.1, 27.0], [74.2, 27.0], [74.3, 27.0], [74.4, 27.0], [74.5, 27.0], [74.6, 27.0], [74.7, 27.0], [74.8, 27.0], [74.9, 27.0], [75.0, 27.0], [75.1, 27.0], [75.2, 27.0], [75.3, 27.0], [75.4, 27.0], [75.5, 27.0], [75.6, 27.0], [75.7, 27.0], [75.8, 27.0], [75.9, 27.0], [76.0, 27.0], [76.1, 27.0], [76.2, 27.0], [76.3, 27.0], [76.4, 27.0], [76.5, 27.0], [76.6, 27.0], [76.7, 27.0], [76.8, 27.0], [76.9, 27.0], [77.0, 27.0], [77.1, 27.0], [77.2, 27.0], [77.3, 27.0], [77.4, 27.0], [77.5, 27.0], [77.6, 27.0], [77.7, 27.0], [77.8, 27.0], [77.9, 27.0], [78.0, 27.0], [78.1, 27.0], [78.2, 27.0], [78.3, 27.0], [78.4, 27.0], [78.5, 27.0], [78.6, 27.0], [78.7, 27.0], [78.8, 27.0], [78.9, 27.0], [79.0, 27.0], [79.1, 27.0], [79.2, 27.0], [79.3, 27.0], [79.4, 27.0], [79.5, 27.0], [79.6, 27.0], [79.7, 27.0], [79.8, 27.0], [79.9, 27.0], [80.0, 27.0], [80.1, 27.0], [80.2, 27.0], [80.3, 27.0], [80.4, 27.0], [80.5, 27.0], [80.6, 27.0], [80.7, 27.0], [80.8, 27.0], [80.9, 27.0], [81.0, 27.0], [81.1, 27.0], [81.2, 27.0], [81.3, 27.0], [81.4, 27.0], [81.5, 27.0], [81.6, 27.0], [81.7, 27.0], [81.8, 28.0], [81.9, 28.0], [82.0, 28.0], [82.1, 28.0], [82.2, 28.0], [82.3, 28.0], [82.4, 28.0], [82.5, 28.0], [82.6, 28.0], [82.7, 28.0], [82.8, 28.0], [82.9, 28.0], [83.0, 28.0], [83.1, 28.0], [83.2, 28.0], [83.3, 28.0], [83.4, 28.0], [83.5, 28.0], [83.6, 28.0], [83.7, 28.0], [83.8, 28.0], [83.9, 28.0], [84.0, 28.0], [84.1, 28.0], [84.2, 28.0], [84.3, 28.0], [84.4, 28.0], [84.5, 28.0], [84.6, 28.0], [84.7, 28.0], [84.8, 28.0], [84.9, 28.0], [85.0, 28.0], [85.1, 28.0], [85.2, 28.0], [85.3, 28.0], [85.4, 28.0], [85.5, 28.0], [85.6, 28.0], [85.7, 28.0], [85.8, 28.0], [85.9, 28.0], [86.0, 28.0], [86.1, 28.0], [86.2, 28.0], [86.3, 28.0], [86.4, 28.0], [86.5, 28.0], [86.6, 28.0], [86.7, 28.0], [86.8, 28.0], [86.9, 28.0], [87.0, 28.0], [87.1, 28.0], [87.2, 28.0], [87.3, 28.0], [87.4, 28.0], [87.5, 28.0], [87.6, 28.0], [87.7, 28.0], [87.8, 28.0], [87.9, 29.0], [88.0, 29.0], [88.1, 29.0], [88.2, 29.0], [88.3, 29.0], [88.4, 29.0], [88.5, 29.0], [88.6, 29.0], [88.7, 29.0], [88.8, 29.0], [88.9, 29.0], [89.0, 29.0], [89.1, 29.0], [89.2, 29.0], [89.3, 29.0], [89.4, 29.0], [89.5, 29.0], [89.6, 29.0], [89.7, 29.0], [89.8, 29.0], [89.9, 29.0], [90.0, 29.0], [90.1, 29.0], [90.2, 29.0], [90.3, 29.0], [90.4, 29.0], [90.5, 29.0], [90.6, 29.0], [90.7, 29.0], [90.8, 29.0], [90.9, 29.0], [91.0, 29.0], [91.1, 29.0], [91.2, 29.0], [91.3, 29.0], [91.4, 29.0], [91.5, 29.0], [91.6, 29.0], [91.7, 29.0], [91.8, 29.0], [91.9, 29.0], [92.0, 30.0], [92.1, 30.0], [92.2, 30.0], [92.3, 30.0], [92.4, 30.0], [92.5, 30.0], [92.6, 30.0], [92.7, 30.0], [92.8, 30.0], [92.9, 30.0], [93.0, 30.0], [93.1, 30.0], [93.2, 30.0], [93.3, 30.0], [93.4, 30.0], [93.5, 30.0], [93.6, 30.0], [93.7, 30.0], [93.8, 30.0], [93.9, 30.0], [94.0, 30.0], [94.1, 30.0], [94.2, 30.0], [94.3, 30.0], [94.4, 30.0], [94.5, 30.0], [94.6, 31.0], [94.7, 31.0], [94.8, 31.0], [94.9, 31.0], [95.0, 31.0], [95.1, 31.0], [95.2, 31.0], [95.3, 31.0], [95.4, 31.0], [95.5, 31.0], [95.6, 31.0], [95.7, 31.0], [95.8, 31.0], [95.9, 31.0], [96.0, 31.0], [96.1, 32.0], [96.2, 32.0], [96.3, 32.0], [96.4, 32.0], [96.5, 32.0], [96.6, 32.0], [96.7, 32.0], [96.8, 32.0], [96.9, 32.0], [97.0, 33.0], [97.1, 33.0], [97.2, 33.0], [97.3, 33.0], [97.4, 33.0], [97.5, 33.0], [97.6, 34.0], [97.7, 34.0], [97.8, 34.0], [97.9, 34.0], [98.0, 35.0], [98.1, 35.0], [98.2, 36.0], [98.3, 36.0], [98.4, 37.0], [98.5, 38.0], [98.6, 39.0], [98.7, 41.0], [98.8, 42.0], [98.9, 44.0], [99.0, 45.0], [99.1, 48.0], [99.2, 50.0], [99.3, 53.0], [99.4, 55.0], [99.5, 59.0], [99.6, 65.0], [99.7, 74.0], [99.8, 82.0], [99.9, 101.0], [100.0, 35123.0]], "isOverall": false, "label": "Get Member 2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2755599.0, "series": [{"data": [[0.0, 2736432.0], [600.0, 7.0], [700.0, 25.0], [1600.0, 73.0], [1700.0, 31.0], [1800.0, 32.0], [3000.0, 19.0], [3500.0, 1.0], [3600.0, 2.0], [3700.0, 18.0], [3800.0, 1.0], [3900.0, 2.0], [4000.0, 26.0], [4100.0, 3.0], [4300.0, 2.0], [4400.0, 3.0], [4500.0, 1.0], [5300.0, 30.0], [5400.0, 19.0], [7400.0, 3.0], [7800.0, 20.0], [8600.0, 5.0], [8500.0, 19.0], [8900.0, 37.0], [9700.0, 1.0], [9800.0, 1.0], [10200.0, 3.0], [10100.0, 4.0], [10700.0, 5.0], [10600.0, 13.0], [11200.0, 2.0], [11100.0, 2.0], [11700.0, 2.0], [11500.0, 1.0], [11400.0, 1.0], [11300.0, 2.0], [11600.0, 1.0], [12200.0, 2.0], [12000.0, 2.0], [11900.0, 3.0], [11800.0, 2.0], [14000.0, 1.0], [13900.0, 5.0], [14200.0, 20.0], [15100.0, 1.0], [15700.0, 33.0], [20000.0, 1.0], [21200.0, 2.0], [21100.0, 30.0], [100.0, 1830.0], [31800.0, 7.0], [31900.0, 13.0], [35000.0, 22.0], [200.0, 168.0], [300.0, 331.0], [400.0, 56.0], [500.0, 36.0]], "isOverall": false, "label": "Get Member 1", "isController": false}, {"data": [[0.0, 2755599.0], [600.0, 7.0], [700.0, 21.0], [1600.0, 52.0], [1700.0, 25.0], [1800.0, 40.0], [3000.0, 23.0], [3500.0, 6.0], [3700.0, 27.0], [3600.0, 1.0], [3800.0, 3.0], [3900.0, 2.0], [4000.0, 19.0], [4100.0, 2.0], [4200.0, 3.0], [4300.0, 5.0], [4400.0, 1.0], [4500.0, 3.0], [5300.0, 20.0], [5400.0, 18.0], [6600.0, 2.0], [7400.0, 3.0], [7800.0, 22.0], [8600.0, 9.0], [8500.0, 9.0], [8900.0, 5.0], [9700.0, 1.0], [10200.0, 10.0], [10100.0, 22.0], [10600.0, 14.0], [10700.0, 9.0], [11200.0, 2.0], [11000.0, 1.0], [11700.0, 1.0], [11600.0, 3.0], [11500.0, 2.0], [11400.0, 2.0], [11300.0, 2.0], [12200.0, 1.0], [12000.0, 2.0], [11800.0, 2.0], [14000.0, 6.0], [13900.0, 30.0], [14200.0, 22.0], [15700.0, 7.0], [20000.0, 2.0], [21200.0, 1.0], [21100.0, 12.0], [100.0, 1800.0], [31800.0, 7.0], [31900.0, 14.0], [35000.0, 19.0], [35100.0, 1.0], [200.0, 183.0], [300.0, 349.0], [400.0, 52.0], [500.0, 31.0]], "isOverall": false, "label": "Get Member 2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 35100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 126.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5496801.0, "series": [{"data": [[0.0, 5496801.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 126.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1024.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 249.90221800239703, "minX": 1.6497711E12, "maxY": 250.0, "series": [{"data": [[1.64977128E12, 250.0], [1.64977116E12, 250.0], [1.64977134E12, 250.0], [1.64977122E12, 250.0], [1.6497714E12, 249.90221800239703], [1.6497711E12, 249.9425278843056]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497714E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18.333333333333332, "minX": 16.0, "maxY": 5434.0, "series": [{"data": [[17.0, 5396.0], [18.0, 5396.333333333333], [22.0, 5411.0], [24.0, 5400.0], [26.0, 5408.5], [27.0, 5418.0], [28.0, 5415.0], [31.0, 5419.0], [33.0, 5419.0], [32.0, 5419.0], [35.0, 5425.0], [34.0, 5421.0], [39.0, 5430.0], [41.0, 5433.0], [51.0, 57.833333333333336], [52.0, 5428.0], [83.0, 53.0], [81.0, 51.0], [84.0, 52.0], [90.0, 51.0], [89.0, 51.666666666666664], [96.0, 49.0], [103.0, 49.0], [100.0, 50.0], [108.0, 48.0], [115.0, 47.0], [122.0, 47.0], [137.0, 45.0], [150.0, 44.0], [147.0, 27.0], [154.0, 44.0], [175.0, 40.0], [178.0, 38.0], [190.0, 39.0], [197.0, 28.0], [193.0, 26.0], [205.0, 27.0], [202.0, 33.0], [201.0, 39.0], [213.0, 39.0], [212.0, 35.0], [209.0, 44.0], [220.0, 29.0], [228.0, 35.0], [227.0, 28.0], [238.0, 34.5], [235.0, 35.0], [234.0, 37.5], [245.0, 32.666666666666664], [244.0, 34.0], [242.0, 31.5], [255.0, 38.0], [254.0, 29.0], [252.0, 28.0], [249.0, 37.0], [270.0, 28.0], [266.0, 33.0], [265.0, 33.0], [263.0, 29.0], [285.0, 36.0], [280.0, 28.0], [275.0, 39.0], [294.0, 391.33333333333337], [297.0, 587.0], [298.0, 431.75], [300.0, 531.0], [301.0, 603.0], [302.0, 506.6666666666667], [288.0, 33.0], [306.0, 508.4166666666667], [304.0, 352.0], [307.0, 201.33333333333331], [316.0, 498.0], [317.0, 176.66666666666669], [318.0, 484.0], [308.0, 207.33333333333331], [309.0, 588.0], [310.0, 557.5], [311.0, 494.3333333333333], [312.0, 494.0], [313.0, 297.0], [314.0, 484.0], [315.0, 529.0], [332.0, 244.25], [320.0, 474.5], [321.0, 292.4], [324.0, 242.0], [325.0, 448.0], [327.0, 490.0], [326.0, 30.666666666666668], [331.0, 441.0], [335.0, 241.5], [328.0, 38.0], [329.0, 28.0], [333.0, 488.3333333333333], [334.0, 435.0], [348.0, 414.0], [336.0, 438.5], [339.0, 432.0], [340.0, 468.0], [342.0, 430.0], [343.0, 233.0], [346.0, 231.5], [344.0, 27.0], [350.0, 427.0], [351.0, 28.0], [355.0, 403.0], [353.0, 408.8], [354.0, 404.0], [356.0, 165.33333333333331], [357.0, 417.0], [359.0, 399.5], [362.0, 395.0], [363.0, 428.5], [366.0, 31.0], [361.0, 30.0], [380.0, 202.0], [368.0, 436.5], [369.0, 30.5], [371.0, 30.666666666666668], [370.0, 32.0], [373.0, 257.0], [372.0, 31.5], [375.0, 269.3333333333333], [376.0, 377.0], [377.0, 207.0], [378.0, 406.0], [379.0, 30.0], [382.0, 391.6666666666667], [383.0, 199.0], [396.0, 30.0], [398.0, 391.0], [384.0, 206.75], [387.0, 31.0], [386.0, 30.0], [399.0, 30.0], [397.0, 30.0], [394.0, 30.333333333333332], [392.0, 30.0], [389.0, 31.0], [388.0, 30.5], [412.0, 378.0], [401.0, 214.25], [400.0, 392.0], [403.0, 417.5], [402.0, 30.0], [406.0, 270.0], [407.0, 30.0], [408.0, 209.5], [409.0, 384.0], [410.0, 147.66666666666666], [411.0, 118.5], [413.0, 145.33333333333334], [415.0, 370.0], [414.0, 29.0], [428.0, 346.3333333333333], [416.0, 144.66666666666666], [419.0, 256.6666666666667], [418.0, 31.0], [417.0, 31.0], [421.0, 277.75], [420.0, 30.0], [422.0, 263.0], [423.0, 247.33333333333331], [424.0, 351.0], [426.0, 110.0], [427.0, 31.0], [431.0, 183.5], [430.0, 29.0], [446.0, 287.0], [433.0, 104.0], [432.0, 334.0], [435.0, 278.5], [434.0, 29.0], [445.0, 28.333333333333332], [439.0, 216.66666666666669], [436.0, 30.0], [441.0, 214.0], [442.0, 167.5], [443.0, 296.6], [447.0, 168.83333333333334], [440.0, 29.25], [460.0, 134.25], [449.0, 171.0], [448.0, 122.0], [450.0, 291.0], [451.0, 28.5], [453.0, 165.25], [454.0, 236.0], [457.0, 316.0], [458.0, 119.66666666666666], [459.0, 167.0], [463.0, 123.0], [456.0, 27.666666666666668], [462.0, 28.0], [461.0, 27.0], [465.0, 220.66666666666669], [464.0, 123.33333333333334], [467.0, 175.16666666666666], [476.0, 26.0], [468.0, 183.0], [469.0, 205.8], [471.0, 174.25], [474.0, 177.0], [475.0, 159.0], [479.0, 26.5], [473.0, 29.5], [472.0, 28.0], [477.0, 26.333333333333332], [492.0, 188.75], [483.0, 132.33333333333334], [482.0, 26.75], [481.0, 27.0], [480.0, 27.0], [485.0, 150.75], [484.0, 28.0], [487.0, 190.0], [488.0, 120.28571428571426], [489.0, 61.777777777777764], [491.0, 26.333333333333332], [490.0, 26.0], [493.0, 136.0], [494.0, 107.25], [495.0, 146.18181818181816], [496.0, 62.166666666666686], [497.0, 191.50000000000003], [498.0, 356.5], [499.0, 92.26666666666667], [500.0, 27.214281698018713]], "isOverall": false, "label": "Get Member 1", "isController": false}, {"data": [[499.97486798272325, 27.28915746214322]], "isOverall": false, "label": "Get Member 1-Aggregated", "isController": false}, {"data": [[16.0, 5398.0], [24.0, 5404.25], [33.0, 5419.0], [32.0, 5419.0], [35.0, 5429.0], [34.0, 5420.25], [36.0, 5428.0], [39.0, 5429.5], [41.0, 5434.0], [40.0, 5432.0], [51.0, 57.5], [62.0, 27.0], [67.0, 54.0], [66.0, 25.0], [65.0, 26.0], [64.0, 18.333333333333332], [71.0, 19.0], [69.0, 28.0], [74.0, 22.333333333333336], [72.0, 21.0], [77.0, 53.0], [83.0, 52.0], [80.0, 52.0], [87.0, 25.0], [84.0, 50.0], [89.0, 51.0], [88.0, 51.0], [92.0, 36.5], [99.0, 50.0], [97.0, 42.5], [102.0, 49.0], [100.0, 22.0], [107.0, 49.0], [104.0, 25.5], [108.0, 25.5], [112.0, 35.5], [117.0, 46.0], [116.0, 26.5], [122.0, 25.0], [121.0, 26.0], [126.0, 25.0], [125.0, 36.5], [135.0, 27.8], [133.0, 27.0], [132.0, 25.0], [131.0, 27.0], [128.0, 27.0], [141.0, 37.0], [137.0, 44.5], [136.0, 24.0], [151.0, 25.333333333333332], [147.0, 34.0], [144.0, 38.4], [157.0, 43.0], [155.0, 25.0], [154.0, 26.0], [152.0, 42.0], [165.0, 52.0], [164.0, 26.0], [163.0, 26.0], [162.0, 43.0], [160.0, 34.0], [175.0, 26.0], [174.0, 32.5], [173.0, 26.0], [170.0, 41.0], [169.0, 35.5], [168.0, 27.0], [181.0, 31.5], [177.0, 33.0], [191.0, 25.0], [190.0, 27.333333333333332], [188.0, 27.0], [187.0, 25.0], [186.0, 26.0], [185.0, 33.0], [197.0, 27.0], [193.0, 31.333333333333332], [192.0, 27.0], [205.0, 32.0], [203.0, 27.0], [214.0, 38.333333333333336], [213.0, 27.0], [210.0, 27.0], [208.0, 43.0], [223.0, 37.0], [220.0, 28.0], [219.0, 39.0], [216.0, 29.5], [231.0, 37.0], [229.0, 27.2], [238.0, 28.0], [234.0, 39.0], [246.0, 27.0], [245.0, 31.0], [255.0, 27.0], [253.0, 27.333333333333332], [249.0, 28.0], [270.0, 30.5], [265.0, 34.0], [263.0, 28.0], [260.0, 27.5], [258.0, 38.0], [257.0, 41.0], [256.0, 42.0], [284.0, 30.0], [282.0, 28.0], [280.0, 34.0], [277.0, 28.0], [274.0, 27.5], [272.0, 32.5], [294.0, 349.33333333333337], [296.0, 432.25], [299.0, 575.0], [302.0, 207.33333333333331], [303.0, 540.6666666666666], [298.0, 30.0], [297.0, 26.0], [304.0, 498.0], [306.0, 435.8], [308.0, 547.5], [309.0, 531.0], [310.0, 550.0], [312.0, 485.0], [315.0, 526.0], [316.0, 387.4], [318.0, 255.0], [311.0, 27.0], [332.0, 345.66666666666663], [321.0, 136.25], [320.0, 460.0], [322.0, 438.0], [325.0, 446.0], [324.0, 29.0], [326.0, 34.25], [327.0, 178.33333333333331], [328.0, 320.33333333333337], [329.0, 325.0], [331.0, 171.33333333333331], [330.0, 37.0], [333.0, 371.66666666666663], [335.0, 304.33333333333337], [338.0, 283.0], [339.0, 439.0], [340.0, 246.33333333333331], [342.0, 460.5], [343.0, 300.66666666666663], [344.0, 421.0], [345.0, 432.0], [346.0, 130.0], [351.0, 35.0], [348.0, 35.5], [354.0, 389.0], [353.0, 413.3333333333333], [355.0, 412.3333333333333], [357.0, 233.0], [356.0, 31.857142857142858], [359.0, 418.0], [362.0, 393.6666666666667], [363.0, 531.3333333333334], [364.0, 30.0], [358.0, 30.0], [380.0, 101.0], [368.0, 496.6666666666667], [371.0, 30.666666666666668], [369.0, 30.0], [373.0, 334.25], [372.0, 30.6], [374.0, 30.333333333333332], [375.0, 411.25], [376.0, 274.0], [378.0, 397.0], [381.0, 373.0], [383.0, 217.0], [377.0, 30.0], [384.0, 214.0], [385.0, 371.0], [399.0, 30.0], [394.0, 31.0], [392.0, 30.5], [390.0, 30.0], [388.0, 30.0], [387.0, 30.0], [412.0, 386.0], [400.0, 390.0], [402.0, 396.5], [401.0, 29.0], [403.0, 31.0], [404.0, 405.5], [405.0, 30.5], [406.0, 406.0], [407.0, 31.0], [408.0, 149.33333333333334], [411.0, 386.6666666666667], [410.0, 30.0], [414.0, 203.0], [413.0, 29.0], [428.0, 135.33333333333334], [416.0, 380.0], [417.0, 29.0], [418.0, 381.0], [419.0, 283.75], [422.0, 293.6], [421.0, 30.0], [420.0, 29.0], [423.0, 29.666666666666668], [426.0, 192.0], [427.0, 190.0], [429.0, 342.0], [431.0, 265.5], [425.0, 29.0], [445.0, 296.0], [434.0, 327.0], [433.0, 212.6], [435.0, 317.3333333333333], [437.0, 322.0], [436.0, 29.0], [438.0, 308.5], [440.0, 61.22222222222222], [443.0, 230.25], [442.0, 31.5], [441.0, 29.0], [446.0, 232.5], [447.0, 29.0], [462.0, 28.0], [448.0, 88.4], [450.0, 292.5], [449.0, 28.4], [460.0, 27.333333333333332], [452.0, 296.0], [455.0, 305.5], [454.0, 28.0], [457.0, 324.0], [458.0, 303.0], [459.0, 227.0], [463.0, 28.0], [456.0, 27.0], [478.0, 31.0], [465.0, 319.0], [466.0, 331.0], [467.0, 28.0], [477.0, 26.0], [476.0, 27.0], [468.0, 179.5], [469.0, 223.66666666666669], [470.0, 319.0], [464.0, 27.0], [473.0, 89.4], [475.0, 339.0], [474.0, 29.5], [479.0, 26.666666666666668], [472.0, 29.0], [487.0, 356.0], [483.0, 133.0], [482.0, 26.9], [481.0, 27.0], [480.0, 27.0], [492.0, 26.666666666666668], [484.0, 186.0], [485.0, 119.42857142857143], [486.0, 185.0], [488.0, 153.8], [491.0, 194.0], [489.0, 26.22222222222222], [493.0, 244.66666666666669], [494.0, 91.9], [495.0, 81.16666666666667], [497.0, 125.4], [498.0, 358.0], [499.0, 128.69230769230768], [500.0, 27.031476023041993], [496.0, 25.560000000000006]], "isOverall": false, "label": "Get Member 2", "isController": false}, {"data": [[499.96118667249533, 27.095651789335907]], "isOverall": false, "label": "Get Member 2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 558964.4, "minX": 1.6497711E12, "maxY": 2407879.783333333, "series": [{"data": [[1.64977128E12, 1703807.8], [1.64977116E12, 1725801.9333333333], [1.64977134E12, 1712205.8666666667], [1.64977122E12, 1744290.8666666667], [1.6497714E12, 985120.6666666666], [1.6497711E12, 558964.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64977128E12, 2351995.55], [1.64977116E12, 2382357.0166666666], [1.64977134E12, 2363588.533333333], [1.64977122E12, 2407879.783333333], [1.6497714E12, 1359894.8333333333], [1.6497711E12, 771613.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497714E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26.25990333903636, "minX": 1.6497711E12, "maxY": 34.51185540259263, "series": [{"data": [[1.64977128E12, 26.640952874233374], [1.64977116E12, 26.81345301120612], [1.64977134E12, 27.02012093297446], [1.64977122E12, 26.354342888711447], [1.6497714E12, 27.931743099767516], [1.6497711E12, 33.23100663102084]], "isOverall": false, "label": "Get Member 1", "isController": false}, {"data": [[1.64977128E12, 26.67448098210358], [1.64977116E12, 26.328378202122902], [1.64977134E12, 26.25990333903636], [1.64977122E12, 26.460390979140417], [1.6497714E12, 27.63636645510129], [1.6497711E12, 34.51185540259263]], "isOverall": false, "label": "Get Member 2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497714E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 26.257114634963013, "minX": 1.6497711E12, "maxY": 34.50943912143409, "series": [{"data": [[1.64977128E12, 26.638454870478068], [1.64977116E12, 26.81100391461281], [1.64977134E12, 27.017492350734912], [1.64977122E12, 26.35183843840107], [1.6497714E12, 27.92898644488431], [1.6497711E12, 33.228519323840395]], "isOverall": false, "label": "Get Member 1", "isController": false}, {"data": [[1.64977128E12, 26.67195727165474], [1.64977116E12, 26.325843647220704], [1.64977134E12, 26.257114634963013], [1.64977122E12, 26.457898892483993], [1.6497714E12, 27.633811551019427], [1.6497711E12, 34.50943912143409]], "isOverall": false, "label": "Get Member 2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497714E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6497711E12, "maxY": 1.8973108408992963E-4, "series": [{"data": [[1.64977128E12, 3.7766795433454954E-5], [1.64977116E12, 6.628864224736392E-5], [1.64977134E12, 4.911537747896234E-5], [1.64977122E12, 5.2614502310652316E-5], [1.6497714E12, 0.0], [1.6497711E12, 1.6725926805185467E-4]], "isOverall": false, "label": "Get Member 1", "isController": false}, {"data": [[1.64977128E12, 7.02531816585137E-5], [1.64977116E12, 4.758900024323242E-5], [1.64977134E12, 5.6444358210009544E-5], [1.64977122E12, 3.701118795338706E-5], [1.6497714E12, 3.1006117506983508E-6], [1.6497711E12, 1.8973108408992963E-4]], "isOverall": false, "label": "Get Member 2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497714E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6497711E12, "maxY": 35123.0, "series": [{"data": [[1.64977128E12, 21265.0], [1.64977116E12, 15744.0], [1.64977134E12, 31920.0], [1.64977122E12, 20050.0], [1.6497714E12, 35123.0], [1.6497711E12, 10217.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64977128E12, 28.0], [1.64977116E12, 27.0], [1.64977134E12, 27.0], [1.64977122E12, 29.0], [1.6497714E12, 27.0], [1.6497711E12, 31.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64977128E12, 31.0], [1.64977116E12, 32.0], [1.64977134E12, 32.0], [1.64977122E12, 34.0], [1.6497714E12, 33.0], [1.6497711E12, 34.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64977128E12, 29.0], [1.64977116E12, 28.0], [1.64977134E12, 28.0], [1.64977122E12, 30.0], [1.6497714E12, 28.0], [1.6497711E12, 32.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64977128E12, 0.0], [1.64977116E12, 0.0], [1.64977134E12, 0.0], [1.64977122E12, 0.0], [1.6497714E12, 0.0], [1.6497711E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64977128E12, 24.0], [1.64977116E12, 23.0], [1.64977134E12, 24.0], [1.64977122E12, 25.0], [1.6497714E12, 25.0], [1.6497711E12, 28.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497714E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 21.0, "minX": 1065.0, "maxY": 342.0, "series": [{"data": [[18363.0, 24.0], [18179.0, 24.0], [18419.0, 25.0], [18379.0, 25.0], [17899.0, 25.0], [18083.0, 27.0], [18595.0, 25.0], [18659.0, 26.0], [18579.0, 25.0], [19291.0, 25.0], [18675.0, 25.0], [18611.0, 25.0], [18619.0, 24.0], [18635.0, 24.0], [19371.0, 23.0], [19331.0, 24.0], [18995.0, 25.0], [18971.0, 25.0], [18603.0, 24.0], [18715.0, 24.0], [18691.0, 24.0], [19147.0, 26.0], [19099.0, 25.0], [19163.0, 25.0], [19179.0, 25.0], [18883.0, 26.0], [18571.0, 26.0], [18515.0, 27.0], [18547.0, 23.0], [18539.0, 24.0], [18435.0, 26.0], [18475.0, 26.0], [18939.0, 24.0], [18867.0, 23.0], [18795.0, 24.0], [19475.0, 25.0], [8933.0, 55.0], [11189.0, 45.0], [15709.0, 28.0], [16922.0, 27.0], [17138.0, 26.0], [16834.0, 29.0], [18378.0, 27.0], [18402.0, 24.0], [18258.0, 26.0], [18410.0, 26.0], [18226.0, 27.0], [18370.0, 24.0], [18330.0, 24.0], [17882.0, 24.0], [18362.0, 25.0], [19346.0, 23.0], [18930.0, 24.0], [18906.0, 23.0], [18890.0, 24.0], [18810.0, 22.0], [18746.0, 24.0], [18786.0, 25.0], [18458.0, 23.0], [18466.0, 24.0], [19354.0, 23.0], [19250.0, 24.0], [18570.0, 23.0], [18594.0, 24.0], [18602.0, 27.0], [18562.0, 24.0], [18530.0, 24.0], [18546.0, 26.0], [18498.0, 25.0], [19434.0, 23.0], [19426.0, 25.0], [19066.0, 25.0], [19034.0, 26.0], [19010.0, 26.0], [18946.0, 24.0], [19074.0, 23.0], [19170.0, 23.0], [19194.0, 23.0], [19146.0, 25.0], [19114.0, 26.0], [1065.0, 342.0], [17073.0, 29.0], [18265.0, 25.0], [17497.0, 29.0], [17649.0, 25.0], [17849.0, 25.0], [18353.0, 25.0], [18681.0, 24.0], [18641.0, 24.0], [18577.0, 24.0], [18505.0, 24.0], [19217.0, 25.0], [19273.0, 24.0], [18945.0, 22.0], [18977.0, 25.0], [18985.0, 24.0], [18697.0, 24.0], [18721.0, 24.0], [18857.0, 25.0], [18841.0, 24.0], [18849.0, 24.0], [18793.0, 24.0], [18817.0, 24.0], [18737.0, 24.0], [19137.0, 26.0], [19161.0, 23.0], [19153.0, 23.0], [19121.0, 24.0], [19089.0, 26.0], [18993.0, 25.0], [18913.0, 23.0], [18449.0, 24.0], [3921.0, 152.0], [6158.0, 82.0], [7532.0, 68.0], [10316.0, 46.0], [15652.0, 29.0], [17280.0, 26.0], [17480.0, 26.0], [18184.0, 24.0], [17592.0, 25.0], [18320.0, 25.0], [18144.0, 24.0], [18048.0, 25.0], [19312.0, 25.0], [19320.0, 23.0], [19240.0, 23.0], [19208.0, 23.0], [18664.0, 24.0], [18648.0, 26.0], [18944.0, 24.0], [19448.0, 23.0], [19432.0, 23.0], [18744.0, 23.0], [18752.0, 24.0], [18816.0, 24.0], [18704.0, 24.0], [18688.0, 27.0], [18712.0, 24.0], [18472.0, 24.0], [18840.0, 24.0], [18456.0, 24.0], [18864.0, 24.0], [18856.0, 23.5], [18632.0, 24.0], [18600.0, 23.0], [19088.0, 24.0], [19112.0, 25.0], [19184.0, 25.0], [19136.0, 23.0], [19480.0, 25.0], [19472.0, 25.0], [17031.0, 27.0], [17247.0, 26.0], [17807.0, 25.0], [18431.0, 23.0], [18103.0, 27.0], [18343.0, 25.0], [17847.0, 27.0], [18143.0, 24.0], [17999.0, 24.0], [18655.0, 24.0], [19295.0, 23.0], [19271.0, 25.0], [18687.0, 24.0], [19063.0, 24.0], [19007.0, 26.0], [18583.0, 26.0], [18607.0, 24.0], [18839.0, 24.0], [18719.0, 23.0], [18735.0, 24.0], [18759.0, 24.0], [18807.0, 22.0], [18783.0, 24.0], [18703.0, 24.0], [19191.0, 21.0], [18943.0, 25.0], [18863.0, 24.0], [18463.0, 24.0], [18479.0, 23.0], [18551.0, 25.0], [18519.0, 26.0], [18495.0, 27.0], [18503.0, 24.0], [19647.0, 25.0], [12223.0, 26.0], [16247.0, 28.0], [16918.0, 26.0], [18150.0, 24.0], [18366.0, 25.0], [17942.0, 27.0], [18334.0, 23.0], [17486.0, 26.0], [17782.0, 26.0], [18494.0, 24.0], [18758.0, 24.0], [18838.0, 22.0], [18790.0, 24.0], [18726.0, 24.0], [18854.0, 26.0], [18454.0, 27.0], [18878.0, 24.0], [18438.0, 26.0], [19390.0, 23.0], [19214.0, 24.0], [18606.0, 22.0], [18678.0, 24.0], [18550.0, 24.0], [18990.0, 24.0], [18958.0, 26.0], [19150.0, 22.0], [19126.0, 25.0], [19470.0, 24.0], [16901.0, 27.0], [16845.0, 25.0], [16661.0, 28.0], [16565.0, 27.0], [18277.0, 27.0], [17661.0, 26.0], [18421.0, 24.0], [18413.0, 27.0], [18317.0, 27.0], [18365.0, 25.0], [18429.0, 24.0], [17909.0, 24.0], [18349.0, 25.0], [18621.0, 26.0], [19221.0, 23.0], [18653.0, 24.0], [18605.0, 26.0], [19293.0, 23.0], [19389.0, 23.0], [18589.0, 26.0], [19125.0, 23.0], [19173.0, 23.0], [18469.0, 27.0], [18917.0, 22.0], [18813.0, 24.0], [18821.0, 24.0], [18517.0, 24.0], [18557.0, 26.0], [18573.0, 24.0], [18533.0, 26.0], [19501.0, 23.0], [17948.0, 24.0], [18084.0, 25.0], [18372.0, 25.0], [18396.0, 25.0], [18428.0, 24.0], [18388.0, 24.0], [18828.0, 26.0], [19396.0, 23.0], [19220.0, 23.0], [18684.0, 24.0], [18660.0, 24.0], [19412.0, 23.0], [18756.0, 25.0], [18772.0, 24.0], [18732.0, 24.0], [18748.0, 24.0], [18780.0, 24.0], [18804.0, 24.0], [18812.0, 24.0], [18716.0, 24.0], [18700.0, 24.0], [18692.0, 24.0], [18724.0, 25.0], [18652.0, 26.0], [18508.0, 24.0], [18884.0, 24.0], [18596.0, 24.0], [18580.0, 24.0], [19188.0, 25.0], [19196.0, 25.0], [19004.0, 25.0], [19012.0, 22.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19647.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 21.0, "minX": 1065.0, "maxY": 342.0, "series": [{"data": [[18363.0, 24.0], [18179.0, 24.0], [18419.0, 25.0], [18379.0, 25.0], [17899.0, 25.0], [18083.0, 27.0], [18595.0, 25.0], [18659.0, 26.0], [18579.0, 25.0], [19291.0, 25.0], [18675.0, 25.0], [18611.0, 25.0], [18619.0, 24.0], [18635.0, 24.0], [19371.0, 23.0], [19331.0, 24.0], [18995.0, 25.0], [18971.0, 25.0], [18603.0, 24.0], [18715.0, 24.0], [18691.0, 24.0], [19147.0, 26.0], [19099.0, 25.0], [19163.0, 25.0], [19179.0, 25.0], [18883.0, 26.0], [18571.0, 26.0], [18515.0, 27.0], [18547.0, 23.0], [18539.0, 24.0], [18435.0, 26.0], [18475.0, 26.0], [18939.0, 24.0], [18867.0, 23.0], [18795.0, 24.0], [19475.0, 25.0], [8933.0, 55.0], [11189.0, 45.0], [15709.0, 28.0], [16922.0, 27.0], [17138.0, 26.0], [16834.0, 29.0], [18378.0, 27.0], [18402.0, 24.0], [18258.0, 26.0], [18410.0, 26.0], [18226.0, 27.0], [18370.0, 24.0], [18330.0, 24.0], [17882.0, 24.0], [18362.0, 25.0], [19346.0, 23.0], [18930.0, 24.0], [18906.0, 23.0], [18890.0, 24.0], [18810.0, 22.0], [18746.0, 24.0], [18786.0, 25.0], [18458.0, 23.0], [18466.0, 24.0], [19354.0, 23.0], [19250.0, 24.0], [18570.0, 23.0], [18594.0, 24.0], [18602.0, 27.0], [18562.0, 24.0], [18530.0, 24.0], [18546.0, 26.0], [18498.0, 25.0], [19434.0, 23.0], [19426.0, 25.0], [19066.0, 25.0], [19034.0, 26.0], [19010.0, 26.0], [18946.0, 24.0], [19074.0, 23.0], [19170.0, 23.0], [19194.0, 23.0], [19146.0, 25.0], [19114.0, 26.0], [1065.0, 342.0], [17073.0, 29.0], [18265.0, 25.0], [17497.0, 29.0], [17649.0, 25.0], [17849.0, 25.0], [18353.0, 25.0], [18681.0, 24.0], [18641.0, 24.0], [18577.0, 24.0], [18505.0, 24.0], [19217.0, 25.0], [19273.0, 24.0], [18945.0, 22.0], [18977.0, 25.0], [18985.0, 23.0], [18697.0, 24.0], [18721.0, 24.0], [18857.0, 25.0], [18841.0, 24.0], [18849.0, 24.0], [18793.0, 24.0], [18817.0, 24.0], [18737.0, 24.0], [19137.0, 26.0], [19161.0, 23.0], [19153.0, 23.0], [19121.0, 24.0], [19089.0, 26.0], [18993.0, 25.0], [18913.0, 23.0], [18449.0, 24.0], [3921.0, 152.0], [6158.0, 82.0], [7532.0, 68.0], [10316.0, 46.0], [15652.0, 29.0], [17280.0, 26.0], [17480.0, 26.0], [18184.0, 24.0], [17592.0, 25.0], [18320.0, 25.0], [18144.0, 24.0], [18048.0, 25.0], [19312.0, 25.0], [19320.0, 23.0], [19240.0, 23.0], [19208.0, 23.0], [18664.0, 24.0], [18648.0, 26.0], [18944.0, 24.0], [19448.0, 23.0], [19432.0, 23.0], [18744.0, 23.0], [18752.0, 24.0], [18816.0, 24.0], [18704.0, 24.0], [18688.0, 27.0], [18712.0, 24.0], [18472.0, 24.0], [18840.0, 24.0], [18456.0, 24.0], [18864.0, 24.0], [18856.0, 23.0], [18632.0, 24.0], [18600.0, 23.0], [19088.0, 24.0], [19112.0, 25.0], [19184.0, 25.0], [19136.0, 23.0], [19480.0, 25.0], [19472.0, 25.0], [17031.0, 27.0], [17247.0, 26.0], [17807.0, 25.0], [18431.0, 23.0], [18103.0, 27.0], [18343.0, 25.0], [17847.0, 27.0], [18143.0, 24.0], [17999.0, 24.0], [18655.0, 24.0], [19295.0, 23.0], [19271.0, 25.0], [18687.0, 24.0], [19063.0, 24.0], [19007.0, 26.0], [18583.0, 26.0], [18607.0, 24.0], [18839.0, 24.0], [18719.0, 23.0], [18735.0, 24.0], [18759.0, 24.0], [18807.0, 22.0], [18783.0, 24.0], [18703.0, 24.0], [19191.0, 21.0], [18943.0, 25.0], [18863.0, 24.0], [18463.0, 24.0], [18479.0, 23.0], [18551.0, 25.0], [18519.0, 26.0], [18495.0, 27.0], [18503.0, 24.0], [19647.0, 25.0], [12223.0, 26.0], [16247.0, 28.0], [16918.0, 26.0], [18150.0, 24.0], [18366.0, 25.0], [17942.0, 27.0], [18334.0, 23.0], [17486.0, 26.0], [17782.0, 26.0], [18494.0, 24.0], [18758.0, 24.0], [18838.0, 22.0], [18790.0, 24.0], [18726.0, 24.0], [18854.0, 26.0], [18454.0, 27.0], [18878.0, 24.0], [18438.0, 26.0], [19390.0, 23.0], [19214.0, 24.0], [18606.0, 22.0], [18678.0, 24.0], [18550.0, 24.0], [18990.0, 24.0], [18958.0, 26.0], [19150.0, 22.0], [19126.0, 25.0], [19470.0, 24.0], [16901.0, 27.0], [16845.0, 25.0], [16661.0, 28.0], [16565.0, 27.0], [18277.0, 27.0], [17661.0, 26.0], [18421.0, 24.0], [18413.0, 27.0], [18317.0, 27.0], [18365.0, 25.0], [18429.0, 24.0], [17909.0, 24.0], [18349.0, 25.0], [18621.0, 26.0], [19221.0, 23.0], [18653.0, 24.0], [18605.0, 26.0], [19293.0, 23.0], [19389.0, 23.0], [18589.0, 26.0], [19125.0, 23.0], [19173.0, 23.0], [18469.0, 27.0], [18917.0, 22.0], [18813.0, 24.0], [18821.0, 24.0], [18517.0, 24.0], [18557.0, 26.0], [18573.0, 24.0], [18533.0, 26.0], [19501.0, 23.0], [17948.0, 24.0], [18084.0, 25.0], [18372.0, 25.0], [18396.0, 25.0], [18428.0, 24.0], [18388.0, 24.0], [18828.0, 26.0], [19396.0, 23.0], [19220.0, 23.0], [18684.0, 24.0], [18660.0, 24.0], [19412.0, 23.0], [18756.0, 25.0], [18772.0, 24.0], [18732.0, 24.0], [18748.0, 24.0], [18780.0, 24.0], [18804.0, 24.0], [18812.0, 24.0], [18716.0, 24.0], [18700.0, 24.0], [18692.0, 24.0], [18724.0, 25.0], [18652.0, 26.0], [18508.0, 24.0], [18884.0, 24.0], [18596.0, 24.0], [18580.0, 24.0], [19188.0, 25.0], [19196.0, 25.0], [19004.0, 25.0], [19012.0, 22.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19647.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6084.033333333334, "minX": 1.6497711E12, "maxY": 18959.716666666667, "series": [{"data": [[1.64977128E12, 18519.65], [1.64977116E12, 18758.666666666668], [1.64977134E12, 18610.933333333334], [1.64977122E12, 18959.716666666667], [1.6497714E12, 10699.516666666666], [1.6497711E12, 6084.033333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497714E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6075.7, "minX": 1.6497711E12, "maxY": 18959.683333333334, "series": [{"data": [[1.64977128E12, 18519.65], [1.64977116E12, 18758.716666666667], [1.64977134E12, 18610.933333333334], [1.64977122E12, 18959.683333333334], [1.6497714E12, 10707.833333333334], [1.6497711E12, 6075.7]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497714E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2986.6833333333334, "minX": 1.6497711E12, "maxY": 9503.083333333334, "series": [{"data": [[1.64977128E12, 9252.25], [1.64977116E12, 9455.966666666667], [1.64977134E12, 9448.833333333334], [1.64977122E12, 9456.6], [1.6497714E12, 5375.283333333334], [1.6497711E12, 2986.6833333333334]], "isOverall": false, "label": "Get Member 2-success", "isController": false}, {"data": [[1.64977128E12, 9267.4], [1.64977116E12, 9302.75], [1.64977134E12, 9162.1], [1.64977122E12, 9503.083333333334], [1.6497714E12, 5332.55], [1.6497711E12, 3089.016666666667]], "isOverall": false, "label": "Get Member 1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497714E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6075.7, "minX": 1.6497711E12, "maxY": 18959.683333333334, "series": [{"data": [[1.64977128E12, 18519.65], [1.64977116E12, 18758.716666666667], [1.64977134E12, 18610.933333333334], [1.64977122E12, 18959.683333333334], [1.6497714E12, 10707.833333333334], [1.6497711E12, 6075.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497714E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

