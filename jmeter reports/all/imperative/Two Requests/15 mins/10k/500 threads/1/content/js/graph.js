/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 5421.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 2.0], [41.9, 2.0], [42.0, 2.0], [42.1, 2.0], [42.2, 2.0], [42.3, 2.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 2.0], [46.1, 2.0], [46.2, 2.0], [46.3, 2.0], [46.4, 2.0], [46.5, 2.0], [46.6, 2.0], [46.7, 2.0], [46.8, 2.0], [46.9, 2.0], [47.0, 2.0], [47.1, 2.0], [47.2, 2.0], [47.3, 2.0], [47.4, 2.0], [47.5, 2.0], [47.6, 2.0], [47.7, 2.0], [47.8, 2.0], [47.9, 2.0], [48.0, 2.0], [48.1, 2.0], [48.2, 2.0], [48.3, 2.0], [48.4, 2.0], [48.5, 2.0], [48.6, 2.0], [48.7, 2.0], [48.8, 2.0], [48.9, 2.0], [49.0, 2.0], [49.1, 2.0], [49.2, 2.0], [49.3, 2.0], [49.4, 2.0], [49.5, 2.0], [49.6, 2.0], [49.7, 2.0], [49.8, 2.0], [49.9, 2.0], [50.0, 2.0], [50.1, 2.0], [50.2, 2.0], [50.3, 2.0], [50.4, 2.0], [50.5, 2.0], [50.6, 2.0], [50.7, 2.0], [50.8, 2.0], [50.9, 2.0], [51.0, 2.0], [51.1, 2.0], [51.2, 2.0], [51.3, 2.0], [51.4, 2.0], [51.5, 2.0], [51.6, 2.0], [51.7, 2.0], [51.8, 2.0], [51.9, 2.0], [52.0, 2.0], [52.1, 2.0], [52.2, 2.0], [52.3, 2.0], [52.4, 2.0], [52.5, 2.0], [52.6, 2.0], [52.7, 2.0], [52.8, 2.0], [52.9, 2.0], [53.0, 3.0], [53.1, 3.0], [53.2, 3.0], [53.3, 3.0], [53.4, 3.0], [53.5, 3.0], [53.6, 3.0], [53.7, 3.0], [53.8, 3.0], [53.9, 3.0], [54.0, 3.0], [54.1, 3.0], [54.2, 3.0], [54.3, 3.0], [54.4, 3.0], [54.5, 3.0], [54.6, 3.0], [54.7, 3.0], [54.8, 3.0], [54.9, 3.0], [55.0, 3.0], [55.1, 3.0], [55.2, 3.0], [55.3, 3.0], [55.4, 3.0], [55.5, 3.0], [55.6, 3.0], [55.7, 3.0], [55.8, 3.0], [55.9, 3.0], [56.0, 3.0], [56.1, 3.0], [56.2, 3.0], [56.3, 3.0], [56.4, 3.0], [56.5, 3.0], [56.6, 3.0], [56.7, 3.0], [56.8, 3.0], [56.9, 3.0], [57.0, 3.0], [57.1, 3.0], [57.2, 3.0], [57.3, 3.0], [57.4, 3.0], [57.5, 3.0], [57.6, 3.0], [57.7, 3.0], [57.8, 3.0], [57.9, 3.0], [58.0, 3.0], [58.1, 3.0], [58.2, 3.0], [58.3, 3.0], [58.4, 3.0], [58.5, 3.0], [58.6, 3.0], [58.7, 3.0], [58.8, 3.0], [58.9, 3.0], [59.0, 3.0], [59.1, 3.0], [59.2, 3.0], [59.3, 3.0], [59.4, 3.0], [59.5, 3.0], [59.6, 3.0], [59.7, 3.0], [59.8, 3.0], [59.9, 3.0], [60.0, 3.0], [60.1, 3.0], [60.2, 3.0], [60.3, 4.0], [60.4, 4.0], [60.5, 4.0], [60.6, 4.0], [60.7, 4.0], [60.8, 4.0], [60.9, 4.0], [61.0, 4.0], [61.1, 4.0], [61.2, 4.0], [61.3, 4.0], [61.4, 4.0], [61.5, 4.0], [61.6, 4.0], [61.7, 4.0], [61.8, 4.0], [61.9, 4.0], [62.0, 4.0], [62.1, 4.0], [62.2, 4.0], [62.3, 4.0], [62.4, 4.0], [62.5, 4.0], [62.6, 4.0], [62.7, 4.0], [62.8, 4.0], [62.9, 4.0], [63.0, 4.0], [63.1, 4.0], [63.2, 4.0], [63.3, 4.0], [63.4, 4.0], [63.5, 4.0], [63.6, 4.0], [63.7, 4.0], [63.8, 4.0], [63.9, 4.0], [64.0, 4.0], [64.1, 4.0], [64.2, 4.0], [64.3, 5.0], [64.4, 5.0], [64.5, 5.0], [64.6, 5.0], [64.7, 5.0], [64.8, 5.0], [64.9, 5.0], [65.0, 5.0], [65.1, 5.0], [65.2, 5.0], [65.3, 5.0], [65.4, 5.0], [65.5, 5.0], [65.6, 5.0], [65.7, 5.0], [65.8, 6.0], [65.9, 6.0], [66.0, 6.0], [66.1, 6.0], [66.2, 6.0], [66.3, 6.0], [66.4, 6.0], [66.5, 6.0], [66.6, 6.0], [66.7, 6.0], [66.8, 6.0], [66.9, 6.0], [67.0, 6.0], [67.1, 7.0], [67.2, 7.0], [67.3, 7.0], [67.4, 7.0], [67.5, 7.0], [67.6, 8.0], [67.7, 8.0], [67.8, 8.0], [67.9, 8.0], [68.0, 8.0], [68.1, 8.0], [68.2, 8.0], [68.3, 8.0], [68.4, 8.0], [68.5, 9.0], [68.6, 9.0], [68.7, 9.0], [68.8, 10.0], [68.9, 10.0], [69.0, 10.0], [69.1, 11.0], [69.2, 11.0], [69.3, 11.0], [69.4, 11.0], [69.5, 12.0], [69.6, 12.0], [69.7, 12.0], [69.8, 12.0], [69.9, 12.0], [70.0, 12.0], [70.1, 12.0], [70.2, 12.0], [70.3, 12.0], [70.4, 12.0], [70.5, 13.0], [70.6, 13.0], [70.7, 13.0], [70.8, 13.0], [70.9, 13.0], [71.0, 14.0], [71.1, 14.0], [71.2, 14.0], [71.3, 15.0], [71.4, 15.0], [71.5, 15.0], [71.6, 16.0], [71.7, 16.0], [71.8, 16.0], [71.9, 16.0], [72.0, 16.0], [72.1, 16.0], [72.2, 16.0], [72.3, 16.0], [72.4, 16.0], [72.5, 16.0], [72.6, 16.0], [72.7, 16.0], [72.8, 17.0], [72.9, 17.0], [73.0, 17.0], [73.1, 17.0], [73.2, 17.0], [73.3, 17.0], [73.4, 18.0], [73.5, 18.0], [73.6, 18.0], [73.7, 18.0], [73.8, 18.0], [73.9, 18.0], [74.0, 18.0], [74.1, 18.0], [74.2, 18.0], [74.3, 18.0], [74.4, 18.0], [74.5, 19.0], [74.6, 19.0], [74.7, 19.0], [74.8, 19.0], [74.9, 19.0], [75.0, 19.0], [75.1, 19.0], [75.2, 19.0], [75.3, 19.0], [75.4, 19.0], [75.5, 20.0], [75.6, 20.0], [75.7, 20.0], [75.8, 20.0], [75.9, 20.0], [76.0, 20.0], [76.1, 20.0], [76.2, 20.0], [76.3, 20.0], [76.4, 20.0], [76.5, 20.0], [76.6, 20.0], [76.7, 20.0], [76.8, 20.0], [76.9, 20.0], [77.0, 20.0], [77.1, 20.0], [77.2, 20.0], [77.3, 20.0], [77.4, 20.0], [77.5, 20.0], [77.6, 20.0], [77.7, 20.0], [77.8, 20.0], [77.9, 20.0], [78.0, 20.0], [78.1, 20.0], [78.2, 20.0], [78.3, 20.0], [78.4, 20.0], [78.5, 20.0], [78.6, 20.0], [78.7, 20.0], [78.8, 20.0], [78.9, 20.0], [79.0, 20.0], [79.1, 20.0], [79.2, 20.0], [79.3, 20.0], [79.4, 20.0], [79.5, 20.0], [79.6, 20.0], [79.7, 20.0], [79.8, 20.0], [79.9, 20.0], [80.0, 20.0], [80.1, 20.0], [80.2, 20.0], [80.3, 20.0], [80.4, 20.0], [80.5, 20.0], [80.6, 20.0], [80.7, 20.0], [80.8, 20.0], [80.9, 20.0], [81.0, 20.0], [81.1, 20.0], [81.2, 20.0], [81.3, 20.0], [81.4, 20.0], [81.5, 20.0], [81.6, 20.0], [81.7, 20.0], [81.8, 20.0], [81.9, 20.0], [82.0, 20.0], [82.1, 20.0], [82.2, 20.0], [82.3, 20.0], [82.4, 20.0], [82.5, 20.0], [82.6, 20.0], [82.7, 20.0], [82.8, 20.0], [82.9, 20.0], [83.0, 20.0], [83.1, 20.0], [83.2, 20.0], [83.3, 20.0], [83.4, 20.0], [83.5, 20.0], [83.6, 20.0], [83.7, 20.0], [83.8, 20.0], [83.9, 20.0], [84.0, 20.0], [84.1, 20.0], [84.2, 20.0], [84.3, 20.0], [84.4, 20.0], [84.5, 20.0], [84.6, 20.0], [84.7, 20.0], [84.8, 20.0], [84.9, 20.0], [85.0, 21.0], [85.1, 21.0], [85.2, 21.0], [85.3, 21.0], [85.4, 21.0], [85.5, 21.0], [85.6, 21.0], [85.7, 21.0], [85.8, 21.0], [85.9, 21.0], [86.0, 21.0], [86.1, 21.0], [86.2, 21.0], [86.3, 21.0], [86.4, 21.0], [86.5, 21.0], [86.6, 21.0], [86.7, 21.0], [86.8, 21.0], [86.9, 21.0], [87.0, 21.0], [87.1, 22.0], [87.2, 22.0], [87.3, 22.0], [87.4, 22.0], [87.5, 22.0], [87.6, 22.0], [87.7, 22.0], [87.8, 22.0], [87.9, 22.0], [88.0, 22.0], [88.1, 22.0], [88.2, 22.0], [88.3, 22.0], [88.4, 22.0], [88.5, 22.0], [88.6, 23.0], [88.7, 23.0], [88.8, 23.0], [88.9, 23.0], [89.0, 23.0], [89.1, 23.0], [89.2, 23.0], [89.3, 23.0], [89.4, 23.0], [89.5, 23.0], [89.6, 23.0], [89.7, 23.0], [89.8, 23.0], [89.9, 23.0], [90.0, 23.0], [90.1, 23.0], [90.2, 23.0], [90.3, 23.0], [90.4, 23.0], [90.5, 23.0], [90.6, 23.0], [90.7, 23.0], [90.8, 23.0], [90.9, 23.0], [91.0, 23.0], [91.1, 23.0], [91.2, 23.0], [91.3, 23.0], [91.4, 23.0], [91.5, 23.0], [91.6, 23.0], [91.7, 23.0], [91.8, 23.0], [91.9, 23.0], [92.0, 23.0], [92.1, 23.0], [92.2, 23.0], [92.3, 23.0], [92.4, 23.0], [92.5, 23.0], [92.6, 23.0], [92.7, 23.0], [92.8, 23.0], [92.9, 23.0], [93.0, 23.0], [93.1, 23.0], [93.2, 23.0], [93.3, 23.0], [93.4, 23.0], [93.5, 23.0], [93.6, 23.0], [93.7, 23.0], [93.8, 23.0], [93.9, 23.0], [94.0, 23.0], [94.1, 23.0], [94.2, 23.0], [94.3, 23.0], [94.4, 23.0], [94.5, 23.0], [94.6, 23.0], [94.7, 23.0], [94.8, 23.0], [94.9, 24.0], [95.0, 24.0], [95.1, 24.0], [95.2, 24.0], [95.3, 24.0], [95.4, 24.0], [95.5, 24.0], [95.6, 24.0], [95.7, 24.0], [95.8, 24.0], [95.9, 24.0], [96.0, 24.0], [96.1, 24.0], [96.2, 24.0], [96.3, 24.0], [96.4, 24.0], [96.5, 24.0], [96.6, 24.0], [96.7, 24.0], [96.8, 24.0], [96.9, 24.0], [97.0, 24.0], [97.1, 24.0], [97.2, 24.0], [97.3, 24.0], [97.4, 24.0], [97.5, 24.0], [97.6, 24.0], [97.7, 24.0], [97.8, 24.0], [97.9, 24.0], [98.0, 24.0], [98.1, 24.0], [98.2, 24.0], [98.3, 24.0], [98.4, 25.0], [98.5, 25.0], [98.6, 25.0], [98.7, 26.0], [98.8, 28.0], [98.9, 29.0], [99.0, 30.0], [99.1, 32.0], [99.2, 33.0], [99.3, 35.0], [99.4, 36.0], [99.5, 37.0], [99.6, 38.0], [99.7, 40.0], [99.8, 41.0], [99.9, 43.0], [100.0, 77.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 348.0], [0.1, 1232.0], [0.2, 1766.0], [0.3, 1852.0], [0.4, 1887.0], [0.5, 1918.0], [0.6, 1944.0], [0.7, 1988.0], [0.8, 2241.0], [0.9, 2306.0], [1.0, 2322.0], [1.1, 2332.0], [1.2, 2340.0], [1.3, 2348.0], [1.4, 2354.0], [1.5, 2359.0], [1.6, 2364.0], [1.7, 2368.0], [1.8, 2372.0], [1.9, 2376.0], [2.0, 2380.0], [2.1, 2383.0], [2.2, 2386.0], [2.3, 2389.0], [2.4, 2392.0], [2.5, 2394.0], [2.6, 2396.0], [2.7, 2399.0], [2.8, 2401.0], [2.9, 2403.0], [3.0, 2405.0], [3.1, 2407.0], [3.2, 2409.0], [3.3, 2412.0], [3.4, 2414.0], [3.5, 2416.0], [3.6, 2417.0], [3.7, 2419.0], [3.8, 2421.0], [3.9, 2423.0], [4.0, 2425.0], [4.1, 2426.0], [4.2, 2428.0], [4.3, 2430.0], [4.4, 2432.0], [4.5, 2434.0], [4.6, 2435.0], [4.7, 2437.0], [4.8, 2438.0], [4.9, 2440.0], [5.0, 2441.0], [5.1, 2443.0], [5.2, 2445.0], [5.3, 2446.0], [5.4, 2448.0], [5.5, 2449.0], [5.6, 2451.0], [5.7, 2452.0], [5.8, 2453.0], [5.9, 2455.0], [6.0, 2456.0], [6.1, 2458.0], [6.2, 2459.0], [6.3, 2461.0], [6.4, 2462.0], [6.5, 2464.0], [6.6, 2465.0], [6.7, 2467.0], [6.8, 2468.0], [6.9, 2470.0], [7.0, 2471.0], [7.1, 2472.0], [7.2, 2474.0], [7.3, 2475.0], [7.4, 2477.0], [7.5, 2478.0], [7.6, 2480.0], [7.7, 2481.0], [7.8, 2483.0], [7.9, 2484.0], [8.0, 2486.0], [8.1, 2488.0], [8.2, 2489.0], [8.3, 2490.0], [8.4, 2492.0], [8.5, 2493.0], [8.6, 2495.0], [8.7, 2496.0], [8.8, 2498.0], [8.9, 2499.0], [9.0, 2501.0], [9.1, 2502.0], [9.2, 2504.0], [9.3, 2505.0], [9.4, 2507.0], [9.5, 2509.0], [9.6, 2511.0], [9.7, 2512.0], [9.8, 2514.0], [9.9, 2516.0], [10.0, 2518.0], [10.1, 2520.0], [10.2, 2522.0], [10.3, 2524.0], [10.4, 2527.0], [10.5, 2528.0], [10.6, 2531.0], [10.7, 2533.0], [10.8, 2535.0], [10.9, 2537.0], [11.0, 2540.0], [11.1, 2543.0], [11.2, 2545.0], [11.3, 2548.0], [11.4, 2551.0], [11.5, 2555.0], [11.6, 2559.0], [11.7, 2562.0], [11.8, 2565.0], [11.9, 2568.0], [12.0, 2572.0], [12.1, 2577.0], [12.2, 2581.0], [12.3, 2586.0], [12.4, 2592.0], [12.5, 2597.0], [12.6, 2604.0], [12.7, 2613.0], [12.8, 2623.0], [12.9, 2637.0], [13.0, 2656.0], [13.1, 2689.0], [13.2, 2747.0], [13.3, 2804.0], [13.4, 2824.0], [13.5, 2834.0], [13.6, 2841.0], [13.7, 2846.0], [13.8, 2850.0], [13.9, 2854.0], [14.0, 2857.0], [14.1, 2860.0], [14.2, 2863.0], [14.3, 2865.0], [14.4, 2868.0], [14.5, 2870.0], [14.6, 2872.0], [14.7, 2874.0], [14.8, 2876.0], [14.9, 2878.0], [15.0, 2879.0], [15.1, 2881.0], [15.2, 2883.0], [15.3, 2884.0], [15.4, 2885.0], [15.5, 2887.0], [15.6, 2888.0], [15.7, 2889.0], [15.8, 2890.0], [15.9, 2892.0], [16.0, 2893.0], [16.1, 2894.0], [16.2, 2895.0], [16.3, 2896.0], [16.4, 2897.0], [16.5, 2899.0], [16.6, 2900.0], [16.7, 2900.0], [16.8, 2902.0], [16.9, 2903.0], [17.0, 2904.0], [17.1, 2905.0], [17.2, 2906.0], [17.3, 2907.0], [17.4, 2908.0], [17.5, 2909.0], [17.6, 2910.0], [17.7, 2911.0], [17.8, 2912.0], [17.9, 2912.0], [18.0, 2914.0], [18.1, 2915.0], [18.2, 2915.0], [18.3, 2916.0], [18.4, 2917.0], [18.5, 2918.0], [18.6, 2919.0], [18.7, 2920.0], [18.8, 2920.0], [18.9, 2921.0], [19.0, 2922.0], [19.1, 2923.0], [19.2, 2923.0], [19.3, 2924.0], [19.4, 2925.0], [19.5, 2925.0], [19.6, 2926.0], [19.7, 2927.0], [19.8, 2927.0], [19.9, 2928.0], [20.0, 2928.0], [20.1, 2929.0], [20.2, 2930.0], [20.3, 2930.0], [20.4, 2931.0], [20.5, 2932.0], [20.6, 2932.0], [20.7, 2933.0], [20.8, 2933.0], [20.9, 2934.0], [21.0, 2935.0], [21.1, 2935.0], [21.2, 2936.0], [21.3, 2936.0], [21.4, 2937.0], [21.5, 2938.0], [21.6, 2938.0], [21.7, 2939.0], [21.8, 2940.0], [21.9, 2940.0], [22.0, 2940.0], [22.1, 2941.0], [22.2, 2942.0], [22.3, 2942.0], [22.4, 2943.0], [22.5, 2943.0], [22.6, 2944.0], [22.7, 2944.0], [22.8, 2945.0], [22.9, 2945.0], [23.0, 2946.0], [23.1, 2946.0], [23.2, 2947.0], [23.3, 2948.0], [23.4, 2948.0], [23.5, 2949.0], [23.6, 2949.0], [23.7, 2950.0], [23.8, 2950.0], [23.9, 2951.0], [24.0, 2951.0], [24.1, 2952.0], [24.2, 2952.0], [24.3, 2953.0], [24.4, 2953.0], [24.5, 2954.0], [24.6, 2954.0], [24.7, 2955.0], [24.8, 2955.0], [24.9, 2956.0], [25.0, 2956.0], [25.1, 2956.0], [25.2, 2957.0], [25.3, 2957.0], [25.4, 2958.0], [25.5, 2958.0], [25.6, 2959.0], [25.7, 2959.0], [25.8, 2960.0], [25.9, 2960.0], [26.0, 2960.0], [26.1, 2961.0], [26.2, 2961.0], [26.3, 2962.0], [26.4, 2962.0], [26.5, 2963.0], [26.6, 2963.0], [26.7, 2964.0], [26.8, 2964.0], [26.9, 2964.0], [27.0, 2965.0], [27.1, 2965.0], [27.2, 2966.0], [27.3, 2966.0], [27.4, 2966.0], [27.5, 2967.0], [27.6, 2967.0], [27.7, 2968.0], [27.8, 2968.0], [27.9, 2968.0], [28.0, 2969.0], [28.1, 2969.0], [28.2, 2969.0], [28.3, 2970.0], [28.4, 2970.0], [28.5, 2971.0], [28.6, 2971.0], [28.7, 2971.0], [28.8, 2972.0], [28.9, 2972.0], [29.0, 2973.0], [29.1, 2973.0], [29.2, 2973.0], [29.3, 2974.0], [29.4, 2974.0], [29.5, 2975.0], [29.6, 2975.0], [29.7, 2975.0], [29.8, 2976.0], [29.9, 2976.0], [30.0, 2976.0], [30.1, 2977.0], [30.2, 2977.0], [30.3, 2977.0], [30.4, 2978.0], [30.5, 2978.0], [30.6, 2979.0], [30.7, 2979.0], [30.8, 2979.0], [30.9, 2980.0], [31.0, 2980.0], [31.1, 2980.0], [31.2, 2981.0], [31.3, 2981.0], [31.4, 2981.0], [31.5, 2982.0], [31.6, 2982.0], [31.7, 2982.0], [31.8, 2983.0], [31.9, 2983.0], [32.0, 2983.0], [32.1, 2984.0], [32.2, 2984.0], [32.3, 2984.0], [32.4, 2985.0], [32.5, 2985.0], [32.6, 2985.0], [32.7, 2986.0], [32.8, 2986.0], [32.9, 2986.0], [33.0, 2987.0], [33.1, 2987.0], [33.2, 2987.0], [33.3, 2988.0], [33.4, 2988.0], [33.5, 2988.0], [33.6, 2989.0], [33.7, 2989.0], [33.8, 2989.0], [33.9, 2990.0], [34.0, 2990.0], [34.1, 2990.0], [34.2, 2990.0], [34.3, 2991.0], [34.4, 2991.0], [34.5, 2991.0], [34.6, 2992.0], [34.7, 2992.0], [34.8, 2992.0], [34.9, 2992.0], [35.0, 2993.0], [35.1, 2993.0], [35.2, 2993.0], [35.3, 2994.0], [35.4, 2994.0], [35.5, 2994.0], [35.6, 2995.0], [35.7, 2995.0], [35.8, 2995.0], [35.9, 2996.0], [36.0, 2996.0], [36.1, 2996.0], [36.2, 2996.0], [36.3, 2997.0], [36.4, 2997.0], [36.5, 2997.0], [36.6, 2998.0], [36.7, 2998.0], [36.8, 2998.0], [36.9, 2999.0], [37.0, 2999.0], [37.1, 2999.0], [37.2, 3000.0], [37.3, 3000.0], [37.4, 3000.0], [37.5, 3000.0], [37.6, 3001.0], [37.7, 3001.0], [37.8, 3001.0], [37.9, 3002.0], [38.0, 3002.0], [38.1, 3002.0], [38.2, 3002.0], [38.3, 3003.0], [38.4, 3003.0], [38.5, 3003.0], [38.6, 3004.0], [38.7, 3004.0], [38.8, 3004.0], [38.9, 3004.0], [39.0, 3005.0], [39.1, 3005.0], [39.2, 3005.0], [39.3, 3006.0], [39.4, 3006.0], [39.5, 3006.0], [39.6, 3007.0], [39.7, 3007.0], [39.8, 3007.0], [39.9, 3007.0], [40.0, 3008.0], [40.1, 3008.0], [40.2, 3008.0], [40.3, 3008.0], [40.4, 3009.0], [40.5, 3009.0], [40.6, 3009.0], [40.7, 3010.0], [40.8, 3010.0], [40.9, 3010.0], [41.0, 3010.0], [41.1, 3011.0], [41.2, 3011.0], [41.3, 3011.0], [41.4, 3011.0], [41.5, 3012.0], [41.6, 3012.0], [41.7, 3012.0], [41.8, 3012.0], [41.9, 3013.0], [42.0, 3013.0], [42.1, 3013.0], [42.2, 3014.0], [42.3, 3014.0], [42.4, 3014.0], [42.5, 3014.0], [42.6, 3015.0], [42.7, 3015.0], [42.8, 3015.0], [42.9, 3015.0], [43.0, 3016.0], [43.1, 3016.0], [43.2, 3016.0], [43.3, 3016.0], [43.4, 3017.0], [43.5, 3017.0], [43.6, 3017.0], [43.7, 3017.0], [43.8, 3018.0], [43.9, 3018.0], [44.0, 3018.0], [44.1, 3019.0], [44.2, 3019.0], [44.3, 3019.0], [44.4, 3019.0], [44.5, 3020.0], [44.6, 3020.0], [44.7, 3020.0], [44.8, 3020.0], [44.9, 3021.0], [45.0, 3021.0], [45.1, 3021.0], [45.2, 3021.0], [45.3, 3022.0], [45.4, 3022.0], [45.5, 3022.0], [45.6, 3023.0], [45.7, 3023.0], [45.8, 3023.0], [45.9, 3023.0], [46.0, 3024.0], [46.1, 3024.0], [46.2, 3024.0], [46.3, 3024.0], [46.4, 3025.0], [46.5, 3025.0], [46.6, 3025.0], [46.7, 3025.0], [46.8, 3026.0], [46.9, 3026.0], [47.0, 3026.0], [47.1, 3026.0], [47.2, 3027.0], [47.3, 3027.0], [47.4, 3027.0], [47.5, 3028.0], [47.6, 3028.0], [47.7, 3028.0], [47.8, 3028.0], [47.9, 3028.0], [48.0, 3029.0], [48.1, 3029.0], [48.2, 3029.0], [48.3, 3029.0], [48.4, 3030.0], [48.5, 3030.0], [48.6, 3030.0], [48.7, 3031.0], [48.8, 3031.0], [48.9, 3031.0], [49.0, 3031.0], [49.1, 3032.0], [49.2, 3032.0], [49.3, 3032.0], [49.4, 3032.0], [49.5, 3033.0], [49.6, 3033.0], [49.7, 3033.0], [49.8, 3033.0], [49.9, 3034.0], [50.0, 3034.0], [50.1, 3034.0], [50.2, 3035.0], [50.3, 3035.0], [50.4, 3035.0], [50.5, 3035.0], [50.6, 3036.0], [50.7, 3036.0], [50.8, 3036.0], [50.9, 3036.0], [51.0, 3037.0], [51.1, 3037.0], [51.2, 3037.0], [51.3, 3037.0], [51.4, 3038.0], [51.5, 3038.0], [51.6, 3038.0], [51.7, 3039.0], [51.8, 3039.0], [51.9, 3039.0], [52.0, 3039.0], [52.1, 3040.0], [52.2, 3040.0], [52.3, 3040.0], [52.4, 3040.0], [52.5, 3040.0], [52.6, 3041.0], [52.7, 3041.0], [52.8, 3041.0], [52.9, 3041.0], [53.0, 3042.0], [53.1, 3042.0], [53.2, 3042.0], [53.3, 3042.0], [53.4, 3043.0], [53.5, 3043.0], [53.6, 3043.0], [53.7, 3044.0], [53.8, 3044.0], [53.9, 3044.0], [54.0, 3044.0], [54.1, 3044.0], [54.2, 3045.0], [54.3, 3045.0], [54.4, 3045.0], [54.5, 3045.0], [54.6, 3046.0], [54.7, 3046.0], [54.8, 3046.0], [54.9, 3047.0], [55.0, 3047.0], [55.1, 3047.0], [55.2, 3047.0], [55.3, 3048.0], [55.4, 3048.0], [55.5, 3048.0], [55.6, 3048.0], [55.7, 3049.0], [55.8, 3049.0], [55.9, 3049.0], [56.0, 3049.0], [56.1, 3050.0], [56.2, 3050.0], [56.3, 3050.0], [56.4, 3050.0], [56.5, 3051.0], [56.6, 3051.0], [56.7, 3051.0], [56.8, 3051.0], [56.9, 3052.0], [57.0, 3052.0], [57.1, 3052.0], [57.2, 3052.0], [57.3, 3053.0], [57.4, 3053.0], [57.5, 3053.0], [57.6, 3053.0], [57.7, 3054.0], [57.8, 3054.0], [57.9, 3054.0], [58.0, 3054.0], [58.1, 3055.0], [58.2, 3055.0], [58.3, 3055.0], [58.4, 3055.0], [58.5, 3056.0], [58.6, 3056.0], [58.7, 3056.0], [58.8, 3056.0], [58.9, 3057.0], [59.0, 3057.0], [59.1, 3057.0], [59.2, 3057.0], [59.3, 3058.0], [59.4, 3058.0], [59.5, 3058.0], [59.6, 3058.0], [59.7, 3059.0], [59.8, 3059.0], [59.9, 3059.0], [60.0, 3060.0], [60.1, 3060.0], [60.2, 3060.0], [60.3, 3060.0], [60.4, 3060.0], [60.5, 3061.0], [60.6, 3061.0], [60.7, 3061.0], [60.8, 3062.0], [60.9, 3062.0], [61.0, 3062.0], [61.1, 3062.0], [61.2, 3063.0], [61.3, 3063.0], [61.4, 3063.0], [61.5, 3064.0], [61.6, 3064.0], [61.7, 3064.0], [61.8, 3064.0], [61.9, 3065.0], [62.0, 3065.0], [62.1, 3065.0], [62.2, 3065.0], [62.3, 3066.0], [62.4, 3066.0], [62.5, 3066.0], [62.6, 3067.0], [62.7, 3067.0], [62.8, 3067.0], [62.9, 3067.0], [63.0, 3068.0], [63.1, 3068.0], [63.2, 3068.0], [63.3, 3068.0], [63.4, 3069.0], [63.5, 3069.0], [63.6, 3069.0], [63.7, 3070.0], [63.8, 3070.0], [63.9, 3070.0], [64.0, 3071.0], [64.1, 3071.0], [64.2, 3071.0], [64.3, 3071.0], [64.4, 3072.0], [64.5, 3072.0], [64.6, 3072.0], [64.7, 3072.0], [64.8, 3073.0], [64.9, 3073.0], [65.0, 3073.0], [65.1, 3074.0], [65.2, 3074.0], [65.3, 3074.0], [65.4, 3075.0], [65.5, 3075.0], [65.6, 3075.0], [65.7, 3076.0], [65.8, 3076.0], [65.9, 3076.0], [66.0, 3076.0], [66.1, 3077.0], [66.2, 3077.0], [66.3, 3077.0], [66.4, 3078.0], [66.5, 3078.0], [66.6, 3078.0], [66.7, 3079.0], [66.8, 3079.0], [66.9, 3079.0], [67.0, 3080.0], [67.1, 3080.0], [67.2, 3080.0], [67.3, 3081.0], [67.4, 3081.0], [67.5, 3081.0], [67.6, 3082.0], [67.7, 3082.0], [67.8, 3082.0], [67.9, 3083.0], [68.0, 3083.0], [68.1, 3083.0], [68.2, 3084.0], [68.3, 3084.0], [68.4, 3084.0], [68.5, 3085.0], [68.6, 3085.0], [68.7, 3085.0], [68.8, 3086.0], [68.9, 3086.0], [69.0, 3087.0], [69.1, 3087.0], [69.2, 3087.0], [69.3, 3088.0], [69.4, 3088.0], [69.5, 3088.0], [69.6, 3089.0], [69.7, 3089.0], [69.8, 3089.0], [69.9, 3090.0], [70.0, 3090.0], [70.1, 3090.0], [70.2, 3091.0], [70.3, 3091.0], [70.4, 3092.0], [70.5, 3092.0], [70.6, 3092.0], [70.7, 3093.0], [70.8, 3093.0], [70.9, 3093.0], [71.0, 3094.0], [71.1, 3094.0], [71.2, 3095.0], [71.3, 3095.0], [71.4, 3095.0], [71.5, 3096.0], [71.6, 3096.0], [71.7, 3096.0], [71.8, 3097.0], [71.9, 3097.0], [72.0, 3098.0], [72.1, 3098.0], [72.2, 3098.0], [72.3, 3099.0], [72.4, 3099.0], [72.5, 3100.0], [72.6, 3100.0], [72.7, 3100.0], [72.8, 3101.0], [72.9, 3101.0], [73.0, 3102.0], [73.1, 3102.0], [73.2, 3102.0], [73.3, 3103.0], [73.4, 3103.0], [73.5, 3104.0], [73.6, 3104.0], [73.7, 3104.0], [73.8, 3105.0], [73.9, 3105.0], [74.0, 3106.0], [74.1, 3106.0], [74.2, 3107.0], [74.3, 3107.0], [74.4, 3108.0], [74.5, 3108.0], [74.6, 3109.0], [74.7, 3109.0], [74.8, 3109.0], [74.9, 3110.0], [75.0, 3111.0], [75.1, 3111.0], [75.2, 3112.0], [75.3, 3112.0], [75.4, 3112.0], [75.5, 3113.0], [75.6, 3113.0], [75.7, 3114.0], [75.8, 3114.0], [75.9, 3115.0], [76.0, 3115.0], [76.1, 3116.0], [76.2, 3116.0], [76.3, 3117.0], [76.4, 3117.0], [76.5, 3118.0], [76.6, 3118.0], [76.7, 3119.0], [76.8, 3119.0], [76.9, 3120.0], [77.0, 3120.0], [77.1, 3121.0], [77.2, 3121.0], [77.3, 3122.0], [77.4, 3123.0], [77.5, 3123.0], [77.6, 3124.0], [77.7, 3124.0], [77.8, 3125.0], [77.9, 3126.0], [78.0, 3126.0], [78.1, 3127.0], [78.2, 3128.0], [78.3, 3128.0], [78.4, 3129.0], [78.5, 3129.0], [78.6, 3130.0], [78.7, 3130.0], [78.8, 3131.0], [78.9, 3132.0], [79.0, 3132.0], [79.1, 3133.0], [79.2, 3134.0], [79.3, 3134.0], [79.4, 3135.0], [79.5, 3136.0], [79.6, 3136.0], [79.7, 3137.0], [79.8, 3138.0], [79.9, 3139.0], [80.0, 3139.0], [80.1, 3140.0], [80.2, 3141.0], [80.3, 3142.0], [80.4, 3142.0], [80.5, 3143.0], [80.6, 3144.0], [80.7, 3145.0], [80.8, 3146.0], [80.9, 3147.0], [81.0, 3148.0], [81.1, 3148.0], [81.2, 3149.0], [81.3, 3150.0], [81.4, 3151.0], [81.5, 3152.0], [81.6, 3152.0], [81.7, 3153.0], [81.8, 3155.0], [81.9, 3156.0], [82.0, 3157.0], [82.1, 3158.0], [82.2, 3159.0], [82.3, 3160.0], [82.4, 3161.0], [82.5, 3162.0], [82.6, 3163.0], [82.7, 3164.0], [82.8, 3165.0], [82.9, 3166.0], [83.0, 3168.0], [83.1, 3169.0], [83.2, 3170.0], [83.3, 3171.0], [83.4, 3172.0], [83.5, 3174.0], [83.6, 3175.0], [83.7, 3177.0], [83.8, 3178.0], [83.9, 3180.0], [84.0, 3181.0], [84.1, 3182.0], [84.2, 3184.0], [84.3, 3186.0], [84.4, 3188.0], [84.5, 3189.0], [84.6, 3191.0], [84.7, 3193.0], [84.8, 3195.0], [84.9, 3196.0], [85.0, 3199.0], [85.1, 3201.0], [85.2, 3204.0], [85.3, 3206.0], [85.4, 3209.0], [85.5, 3212.0], [85.6, 3215.0], [85.7, 3218.0], [85.8, 3222.0], [85.9, 3226.0], [86.0, 3230.0], [86.1, 3235.0], [86.2, 3240.0], [86.3, 3244.0], [86.4, 3250.0], [86.5, 3256.0], [86.6, 3264.0], [86.7, 3273.0], [86.8, 3282.0], [86.9, 3293.0], [87.0, 3307.0], [87.1, 3323.0], [87.2, 3340.0], [87.3, 3360.0], [87.4, 3377.0], [87.5, 3395.0], [87.6, 3408.0], [87.7, 3419.0], [87.8, 3428.0], [87.9, 3436.0], [88.0, 3444.0], [88.1, 3450.0], [88.2, 3456.0], [88.3, 3462.0], [88.4, 3467.0], [88.5, 3473.0], [88.6, 3478.0], [88.7, 3482.0], [88.8, 3486.0], [88.9, 3490.0], [89.0, 3494.0], [89.1, 3497.0], [89.2, 3501.0], [89.3, 3504.0], [89.4, 3507.0], [89.5, 3511.0], [89.6, 3514.0], [89.7, 3517.0], [89.8, 3521.0], [89.9, 3523.0], [90.0, 3526.0], [90.1, 3530.0], [90.2, 3532.0], [90.3, 3535.0], [90.4, 3538.0], [90.5, 3541.0], [90.6, 3544.0], [90.7, 3546.0], [90.8, 3549.0], [90.9, 3551.0], [91.0, 3554.0], [91.1, 3556.0], [91.2, 3558.0], [91.3, 3561.0], [91.4, 3563.0], [91.5, 3565.0], [91.6, 3567.0], [91.7, 3569.0], [91.8, 3572.0], [91.9, 3574.0], [92.0, 3576.0], [92.1, 3578.0], [92.2, 3580.0], [92.3, 3582.0], [92.4, 3584.0], [92.5, 3586.0], [92.6, 3588.0], [92.7, 3590.0], [92.8, 3592.0], [92.9, 3594.0], [93.0, 3596.0], [93.1, 3598.0], [93.2, 3600.0], [93.3, 3602.0], [93.4, 3604.0], [93.5, 3605.0], [93.6, 3607.0], [93.7, 3609.0], [93.8, 3611.0], [93.9, 3613.0], [94.0, 3616.0], [94.1, 3618.0], [94.2, 3620.0], [94.3, 3621.0], [94.4, 3623.0], [94.5, 3625.0], [94.6, 3627.0], [94.7, 3629.0], [94.8, 3632.0], [94.9, 3634.0], [95.0, 3636.0], [95.1, 3638.0], [95.2, 3640.0], [95.3, 3642.0], [95.4, 3644.0], [95.5, 3646.0], [95.6, 3649.0], [95.7, 3652.0], [95.8, 3654.0], [95.9, 3657.0], [96.0, 3659.0], [96.1, 3662.0], [96.2, 3665.0], [96.3, 3667.0], [96.4, 3670.0], [96.5, 3673.0], [96.6, 3676.0], [96.7, 3679.0], [96.8, 3682.0], [96.9, 3685.0], [97.0, 3689.0], [97.1, 3693.0], [97.2, 3697.0], [97.3, 3702.0], [97.4, 3707.0], [97.5, 3712.0], [97.6, 3717.0], [97.7, 3722.0], [97.8, 3727.0], [97.9, 3734.0], [98.0, 3742.0], [98.1, 3750.0], [98.2, 3761.0], [98.3, 3772.0], [98.4, 3791.0], [98.5, 3812.0], [98.6, 3853.0], [98.7, 3925.0], [98.8, 3994.0], [98.9, 4039.0], [99.0, 4079.0], [99.1, 4108.0], [99.2, 4134.0], [99.3, 4155.0], [99.4, 4176.0], [99.5, 4194.0], [99.6, 4219.0], [99.7, 4250.0], [99.8, 4297.0], [99.9, 4518.0], [100.0, 5421.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 52365.0, "series": [{"data": [[0.0, 20000.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[600.0, 15.0], [700.0, 3.0], [800.0, 8.0], [900.0, 7.0], [1000.0, 21.0], [1100.0, 45.0], [1200.0, 94.0], [1300.0, 27.0], [1400.0, 22.0], [1500.0, 12.0], [1600.0, 16.0], [1700.0, 59.0], [1800.0, 323.0], [1900.0, 410.0], [2000.0, 78.0], [2100.0, 28.0], [2200.0, 122.0], [2300.0, 2760.0], [2400.0, 9184.0], [2500.0, 5379.0], [2600.0, 863.0], [2700.0, 247.0], [2800.0, 4899.0], [2900.0, 30609.0], [3000.0, 52365.0], [3100.0, 18664.0], [3200.0, 2831.0], [3300.0, 879.0], [3400.0, 2411.0], [3500.0, 5960.0], [3700.0, 1758.0], [3600.0, 6050.0], [3800.0, 360.0], [3900.0, 206.0], [4000.0, 369.0], [4100.0, 679.0], [4200.0, 422.0], [4300.0, 112.0], [4400.0, 28.0], [4600.0, 33.0], [4500.0, 25.0], [4800.0, 25.0], [4700.0, 52.0], [5000.0, 4.0], [4900.0, 5.0], [5100.0, 1.0], [5300.0, 2.0], [5200.0, 3.0], [5400.0, 1.0], [300.0, 1.0], [400.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 243.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 148234.0, "series": [{"data": [[0.0, 20002.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 243.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 148234.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 41.817636145367196, "minX": 1.64872824E12, "maxY": 500.0, "series": [{"data": [[1.64872842E12, 500.0], [1.64872872E12, 500.0], [1.64872908E12, 500.0], [1.64872878E12, 500.0], [1.64872896E12, 500.0], [1.64872866E12, 500.0], [1.64872836E12, 500.0], [1.64872902E12, 500.0], [1.6487292E12, 336.8891786179921], [1.64872824E12, 41.817636145367196], [1.6487289E12, 500.0], [1.6487283E12, 243.32239636736426], [1.6487286E12, 500.0], [1.64872848E12, 500.0], [1.64872914E12, 500.0], [1.64872884E12, 500.0], [1.64872854E12, 500.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6487292E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.175, "minX": 1.0, "maxY": 5240.0, "series": [{"data": [[2.0, 1.175], [3.0, 1.4285714285714282], [4.0, 1.5267857142857144], [5.0, 1.346491228070176], [6.0, 1.7239263803680986], [7.0, 1.3964285714285714], [8.0, 1.4892857142857137], [9.0, 1.736842105263159], [10.0, 1.6864686468646861], [11.0, 1.689814814814815], [12.0, 1.7140468227424746], [13.0, 1.9484304932735421], [14.0, 2.1645338208409526], [15.0, 1.869510664993726], [16.0, 1.8520770010131697], [17.0, 1.7189278937381385], [18.0, 2.0942307692307685], [19.0, 7.0925925925925934], [20.0, 6.966101694915256], [21.0, 7.1607142857142865], [22.0, 6.434210526315788], [23.0, 5.471153846153845], [24.0, 7.097222222222221], [25.0, 7.293333333333335], [26.0, 3.9543378995433835], [27.0, 7.592592592592595], [28.0, 6.138211382113818], [29.0, 8.10810810810811], [30.0, 9.863636363636363], [31.0, 5.126436781609197], [32.0, 11.192982456140353], [33.0, 7.008620689655173], [34.0, 7.0303030303030365], [35.0, 4.705454545454546], [36.0, 6.067010309278353], [37.0, 5.3283018867924525], [38.0, 4.987538940809969], [39.0, 5.057401812688819], [40.0, 8.776785714285722], [41.0, 7.7602739726027465], [42.0, 6.908629441624368], [43.0, 6.194214876033059], [44.0, 16.958762886597945], [45.0, 20.602150537634408], [46.0, 21.33009708737865], [47.0, 20.146496815286607], [48.0, 20.72027972027972], [49.0, 20.404651162790685], [50.0, 22.212855377008722], [1.0, 1.3636363636363633]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[27.332500000000007, 7.989650000000089]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 2576.0], [3.0, 3160.0], [4.0, 3131.0], [5.0, 2789.0], [6.0, 2766.0], [7.0, 3448.0], [8.0, 2974.0], [9.0, 2782.0], [10.0, 3015.0], [11.0, 2584.0], [13.0, 3047.0], [14.0, 2632.0], [15.0, 2661.0], [16.0, 3403.0], [17.0, 3428.0], [18.0, 2759.0], [19.0, 2752.0], [20.0, 2753.0], [21.0, 2736.0], [22.0, 2795.0], [23.0, 2743.0], [24.0, 2791.0], [25.0, 2790.0], [26.0, 3873.0], [27.0, 2786.0], [28.0, 2849.0], [29.0, 2860.0], [30.0, 2915.0], [31.0, 2768.0], [33.0, 3509.0], [32.0, 2779.0], [35.0, 2884.0], [34.0, 2769.0], [36.0, 2761.0], [38.0, 3198.0], [41.0, 2882.0], [40.0, 2791.5], [43.0, 2816.0], [42.0, 2823.0], [45.0, 2904.0], [44.0, 3040.0], [47.0, 2806.0], [46.0, 2933.0], [49.0, 2985.0], [48.0, 3019.0], [51.0, 2909.0], [50.0, 2857.0], [53.0, 2908.0], [52.0, 3470.0], [55.0, 2903.0], [54.0, 2967.0], [57.0, 2897.0], [56.0, 2956.0], [59.0, 2953.0], [58.0, 2954.0], [61.0, 2888.0], [60.0, 3003.0], [63.0, 3494.0], [62.0, 2966.0], [67.0, 3484.0], [66.0, 3536.0], [65.0, 2976.0], [71.0, 3035.0], [70.0, 3027.0], [69.0, 2980.0], [68.0, 2947.0], [75.0, 3526.0], [74.0, 3066.5], [72.0, 3030.0], [79.0, 3532.0], [78.0, 2988.0], [77.0, 3130.0], [76.0, 2989.0], [83.0, 3053.5], [81.0, 3038.0], [80.0, 3032.0], [87.0, 3050.0], [86.0, 3023.0], [85.0, 2981.0], [84.0, 2978.0], [91.0, 3033.0], [90.0, 3040.0], [89.0, 3039.0], [88.0, 3048.0], [95.0, 3103.0], [94.0, 3104.0], [93.0, 3063.0], [99.0, 2329.0], [98.0, 3199.6666666666665], [103.0, 2994.0], [102.0, 3053.0], [101.0, 2997.0], [100.0, 3552.0], [107.0, 2389.0], [106.0, 3066.0], [105.0, 2990.0], [104.0, 3075.0], [111.0, 3064.0], [110.0, 3065.0], [109.0, 3045.0], [108.0, 3063.0], [115.0, 3118.0], [114.0, 2387.0], [113.0, 2706.0], [119.0, 3127.6666666666665], [116.0, 3031.0], [123.0, 3113.0], [122.0, 2988.0], [121.0, 2982.0], [120.0, 3019.0], [127.0, 2359.0], [126.0, 3529.0], [125.0, 3097.0], [124.0, 3073.0], [135.0, 2393.0], [134.0, 3078.0], [133.0, 3515.0], [132.0, 2356.0], [131.0, 3098.0], [130.0, 2424.0], [129.0, 3121.0], [128.0, 3110.0], [143.0, 3480.0], [142.0, 2523.0], [141.0, 3072.0], [140.0, 3021.0], [138.0, 3071.0], [137.0, 3069.0], [136.0, 2516.0], [151.0, 2485.0], [150.0, 3044.0], [149.0, 3048.0], [148.0, 3048.0], [147.0, 2441.0], [146.0, 3007.0], [145.0, 3060.0], [144.0, 3046.0], [159.0, 2999.0], [158.0, 3060.0], [157.0, 3095.3333333333335], [154.0, 2550.0], [153.0, 3054.0], [152.0, 3584.0], [167.0, 2493.0], [166.0, 2993.0], [165.0, 3024.0], [164.0, 2995.0], [163.0, 2810.5], [161.0, 2999.0], [160.0, 2497.0], [175.0, 2982.0], [173.0, 2984.0], [172.0, 3052.0], [171.0, 3067.0], [170.0, 3017.0], [169.0, 3566.0], [168.0, 3623.0], [183.0, 3036.0], [182.0, 3008.0], [180.0, 3040.0], [179.0, 3016.0], [178.0, 2551.0], [177.0, 3001.0], [176.0, 2971.0], [190.0, 1420.5], [191.0, 3056.0], [189.0, 3059.0], [188.0, 3002.0], [187.0, 3004.0], [186.0, 3601.0], [185.0, 2983.0], [199.0, 3014.0], [198.0, 3722.0], [197.0, 3006.0], [196.0, 3031.0], [195.0, 3030.0], [194.0, 3034.0], [193.0, 2998.0], [192.0, 2999.0], [207.0, 2485.0], [206.0, 3695.0], [205.0, 2960.0], [204.0, 2583.0], [203.0, 2964.0], [202.0, 2969.0], [201.0, 2988.0], [200.0, 3607.0], [215.0, 2922.0], [213.0, 2929.0], [212.0, 3000.0], [211.0, 2921.0], [210.0, 3681.0], [209.0, 3001.0], [208.0, 3005.0], [223.0, 2974.6666666666665], [222.0, 2945.0], [220.0, 2985.0], [219.0, 2997.0], [217.0, 3013.0], [216.0, 2546.0], [231.0, 3051.0], [230.0, 2956.0], [229.0, 2957.0], [228.0, 3009.0], [227.0, 2962.0], [226.0, 3090.0], [225.0, 2509.0], [224.0, 3684.0], [239.0, 2992.0], [237.0, 3057.0], [236.0, 3010.0], [235.0, 3651.0], [234.0, 2792.5], [232.0, 3040.0], [247.0, 3106.0], [246.0, 3062.0], [245.0, 3067.0], [244.0, 3584.0], [243.0, 2494.0], [242.0, 3016.0], [241.0, 3070.0], [240.0, 2991.0], [255.0, 3081.0], [254.0, 3056.0], [253.0, 3062.0], [252.0, 3628.0], [251.0, 3332.5], [249.0, 3046.0], [248.0, 3062.0], [271.0, 2719.0], [268.0, 3520.0], [267.0, 3066.0], [266.0, 3099.0], [265.0, 3527.0], [264.0, 2867.0], [263.0, 3065.0], [261.0, 3053.0], [259.0, 2486.0], [258.0, 3566.0], [256.0, 3021.0], [286.0, 3036.0], [276.0, 1746.0], [277.0, 3051.0], [279.0, 3611.0], [273.0, 3005.0], [272.0, 3005.5], [275.0, 3097.0], [274.0, 2504.0], [278.0, 3071.0], [287.0, 3024.0], [285.0, 4123.0], [284.0, 2975.0], [283.0, 3004.0], [282.0, 3013.0], [281.0, 3115.0], [280.0, 3030.0], [303.0, 3532.0], [298.0, 1817.0], [302.0, 2385.0], [301.0, 3506.0], [300.0, 2964.0], [291.0, 3030.0], [290.0, 3023.0], [289.0, 2989.0], [288.0, 3033.0], [299.0, 3510.0], [297.0, 3575.0], [296.0, 2423.0], [295.0, 3013.0], [294.0, 2981.0], [293.0, 2979.0], [292.0, 2387.0], [318.0, 3036.0], [319.0, 3045.0], [317.0, 3055.0], [316.0, 3523.0], [315.0, 3040.0], [314.0, 2973.0], [313.0, 3053.0], [312.0, 3040.0], [310.0, 3082.0], [307.0, 3069.0], [306.0, 2978.0], [305.0, 2959.0], [304.0, 2985.0], [309.0, 2976.0], [334.0, 2415.0], [335.0, 3037.0], [333.0, 3028.0], [332.0, 2999.0], [331.0, 3055.0], [330.0, 2384.0], [329.0, 3528.0], [328.0, 3278.5], [326.0, 2495.5], [323.0, 3036.0], [322.0, 3043.0], [321.0, 2367.0], [320.0, 3048.0], [324.0, 3088.0], [350.0, 2981.0], [348.0, 691.0], [351.0, 2464.0], [349.0, 3256.5], [347.0, 2984.0], [346.0, 3002.0], [345.0, 2943.0], [344.0, 3013.0], [342.0, 2990.0], [337.0, 3018.0], [336.0, 3515.0], [339.0, 3002.0], [338.0, 3016.0], [341.0, 3527.0], [340.0, 3034.0], [366.0, 3033.0], [352.0, 1836.5], [355.0, 2962.0], [354.0, 2708.0], [359.0, 3004.0], [358.0, 2997.0], [357.0, 2961.0], [367.0, 2994.0], [365.0, 3026.0], [364.0, 3031.0], [363.0, 2913.0], [362.0, 3593.0], [361.0, 3575.0], [360.0, 2979.0], [381.0, 2984.0], [382.0, 2968.0], [380.0, 3028.0], [371.0, 3000.0], [369.0, 2983.0], [368.0, 2958.0], [379.0, 2991.0], [378.0, 2489.0], [377.0, 2985.0], [376.0, 2492.0], [375.0, 2994.0], [374.0, 2990.0], [373.0, 2482.0], [372.0, 4034.0], [399.0, 2948.0], [394.0, 1457.0], [398.0, 2539.0], [397.0, 2984.0], [396.0, 2978.0], [387.0, 2422.0], [386.0, 2967.0], [385.0, 3079.0], [384.0, 3301.0], [395.0, 2421.0], [393.0, 2991.0], [392.0, 2936.0], [391.0, 4681.0], [390.0, 2952.0], [389.0, 2926.0], [388.0, 3630.0], [414.0, 2938.0], [408.0, 1891.0], [403.0, 803.0], [402.0, 2938.0], [401.0, 2940.0], [400.0, 2991.0], [407.0, 3662.0], [406.0, 2989.0], [405.0, 2968.0], [404.0, 2944.0], [410.0, 1649.0], [415.0, 2936.0], [413.0, 2931.0], [412.0, 2957.0], [411.0, 2960.0], [409.0, 2485.0], [430.0, 4116.0], [431.0, 2973.0], [429.0, 2999.0], [428.0, 2717.5], [426.0, 2938.0], [425.0, 2942.0], [424.0, 2889.0], [423.0, 3046.0], [417.0, 2978.0], [416.0, 4137.0], [419.0, 2989.0], [418.0, 3661.0], [422.0, 2987.0], [421.0, 2930.0], [420.0, 2930.0], [446.0, 2440.0], [432.0, 1910.0], [433.0, 2931.0], [435.0, 2945.0], [434.0, 3051.0], [447.0, 3037.0], [445.0, 2988.0], [444.0, 3048.0], [443.0, 3057.0], [441.0, 2980.0], [440.0, 2997.0], [439.0, 3555.0], [438.0, 3012.0], [437.0, 5240.0], [436.0, 2954.0], [463.0, 2443.0], [451.0, 1931.0], [453.0, 1936.5], [452.0, 3008.0], [455.0, 2976.0], [448.0, 2914.0], [450.0, 2951.0], [449.0, 3040.0], [454.0, 2452.0], [457.0, 877.0], [456.0, 3061.0], [462.0, 2964.0], [461.0, 2302.0], [460.0, 2974.0], [459.0, 2982.0], [458.0, 2983.5], [478.0, 2994.0], [468.0, 1964.5], [471.0, 3285.0], [465.0, 2926.0], [464.0, 3430.0], [467.0, 2915.0], [466.0, 2991.0], [469.0, 2371.0], [476.0, 1973.0], [479.0, 2223.0], [477.0, 2797.0], [475.0, 2939.0], [474.0, 2985.0], [473.0, 2985.5], [472.0, 2985.0], [495.0, 3326.4], [483.0, 2298.0], [487.0, 3011.0], [480.0, 3000.0], [482.0, 3253.0], [481.0, 2997.0], [486.0, 2943.0], [485.0, 3006.0], [484.0, 2999.0], [490.0, 2678.375], [494.0, 3016.0], [493.0, 3035.75], [492.0, 2443.5], [491.0, 3082.3333333333335], [489.0, 3130.25], [488.0, 2709.5], [500.0, 3035.349051820316], [499.0, 3808.0], [498.0, 2805.0], [497.0, 2332.0], [496.0, 2607.833333333333], [1.0, 2672.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[499.14401363155395, 3034.9477636568113]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1687.4, "minX": 1.64872824E12, "maxY": 9.529487385E7, "series": [{"data": [[1.64872842E12, 9.529487385E7], [1.64872872E12, 9.088385291666667E7], [1.64872908E12, 9.250060423333333E7], [1.64872878E12, 9.241649578333333E7], [1.64872896E12, 9.26314396E7], [1.64872866E12, 9.1397849E7], [1.64872836E12, 9.52668377E7], [1.64872902E12, 9.255667653333333E7], [1.6487292E12, 7167909.016666667], [1.64872824E12, 30662.7], [1.6487289E12, 9.213613428333333E7], [1.6487283E12, 9.016278416666667E7], [1.6487286E12, 9.074367216666667E7], [1.64872848E12, 9.099599751666667E7], [1.64872914E12, 9.250060423333333E7], [1.64872884E12, 9.10614152E7], [1.64872854E12, 8.991193305E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64872842E12, 22433.4], [1.64872872E12, 21395.0], [1.64872908E12, 21775.6], [1.64872878E12, 21755.8], [1.64872896E12, 21806.4], [1.64872866E12, 21516.0], [1.64872836E12, 22426.8], [1.64872902E12, 21788.8], [1.6487292E12, 1687.4], [1.64872824E12, 39248.183333333334], [1.6487289E12, 21689.8], [1.6487283E12, 67968.61666666667], [1.6487286E12, 21362.0], [1.64872848E12, 21421.4], [1.64872914E12, 21775.6], [1.64872884E12, 21436.8], [1.64872854E12, 21166.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6487292E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.599981544707944, "minX": 1.64872824E12, "maxY": 3119.5192807400394, "series": [{"data": [[1.64872824E12, 15.546655025646636], [1.6487283E12, 1.599981544707944]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64872842E12, 2939.4867117779745], [1.64872872E12, 3088.538920308485], [1.64872908E12, 3028.8657304505928], [1.64872878E12, 3032.4700171908216], [1.64872896E12, 3027.447033898315], [1.64872866E12, 3063.3139059304676], [1.64872836E12, 2941.917696684321], [1.64872902E12, 3030.675989499192], [1.6487292E12, 3000.4041720990867], [1.6487289E12, 3039.4984278324446], [1.6487283E12, 2940.7295727913684], [1.6487286E12, 3090.4864057672557], [1.64872848E12, 3078.8700831878423], [1.64872914E12, 3032.1255809254403], [1.64872884E12, 3082.373563218399], [1.64872854E12, 3119.5192807400394]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6487292E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1.5760819414967204, "minX": 1.64872824E12, "maxY": 3107.787652011231, "series": [{"data": [[1.64872824E12, 15.511841100076348], [1.6487283E12, 1.5760819414967204]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64872842E12, 2928.6956948122056], [1.64872872E12, 3077.044627249366], [1.64872908E12, 3017.612547989487], [1.64872878E12, 3021.361613914455], [1.64872896E12, 3016.7079297821015], [1.64872866E12, 3052.4283231083705], [1.64872836E12, 2930.598195016687], [1.64872902E12, 3019.6809369951516], [1.6487292E12, 2988.1512385919145], [1.6487289E12, 3028.563748858908], [1.6487283E12, 2928.8198880132786], [1.6487286E12, 3079.137281153452], [1.64872848E12, 3067.8652562390844], [1.64872914E12, 3021.2248939179617], [1.64872884E12, 3071.100574712632], [1.64872854E12, 3107.787652011231]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6487292E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64872824E12, "maxY": 0.01480827694419927, "series": [{"data": [[1.64872824E12, 6.548073774964552E-4], [1.6487283E12, 0.0011995939835747896]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64872842E12, 0.01480827694419927], [1.64872872E12, 0.010282776349614407], [1.64872908E12, 0.012628813901798335], [1.64872878E12, 0.010415613307715623], [1.64872896E12, 0.007364810330912014], [1.64872866E12, 0.013701431492842501], [1.64872836E12, 0.011673533451049621], [1.64872902E12, 0.00706785137318255], [1.6487292E12, 0.0], [1.6487289E12, 0.010548737194441566], [1.6487283E12, 0.006221484861053532], [1.6487286E12, 0.010195674562306923], [1.64872848E12, 0.011502516175413428], [1.64872914E12, 0.010810264699939367], [1.64872884E12, 0.013238916256157581], [1.64872854E12, 0.008626961854277086]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6487292E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64872824E12, "maxY": 5421.0, "series": [{"data": [[1.64872842E12, 4668.0], [1.64872872E12, 5421.0], [1.64872908E12, 4788.0], [1.64872878E12, 5263.0], [1.64872896E12, 4791.0], [1.64872866E12, 5320.0], [1.64872836E12, 5073.0], [1.64872902E12, 4809.0], [1.6487292E12, 5240.0], [1.64872824E12, 77.0], [1.6487289E12, 5250.0], [1.6487283E12, 5013.0], [1.6487286E12, 5361.0], [1.64872848E12, 4926.0], [1.64872914E12, 4841.0], [1.64872884E12, 4929.0], [1.64872854E12, 5016.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64872842E12, 3444.0], [1.64872872E12, 3577.0], [1.64872908E12, 3544.0], [1.64872878E12, 3550.0], [1.64872896E12, 3542.0], [1.64872866E12, 3587.0], [1.64872836E12, 3448.5], [1.64872902E12, 3549.0], [1.6487292E12, 3506.2], [1.64872824E12, 24.0], [1.6487289E12, 3552.0], [1.6487283E12, 3059.0], [1.6487286E12, 3585.0], [1.64872848E12, 3611.0], [1.64872914E12, 3536.0], [1.64872884E12, 3590.0], [1.64872854E12, 3617.800000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64872842E12, 3982.0200000000004], [1.64872872E12, 4155.48], [1.64872908E12, 4088.050000000001], [1.64872878E12, 4109.300000000001], [1.64872896E12, 4099.0], [1.64872866E12, 4150.1900000000005], [1.64872836E12, 3985.149999999998], [1.64872902E12, 4058.800000000003], [1.6487292E12, 4112.599999999999], [1.64872824E12, 37.0], [1.6487289E12, 4135.0], [1.6487283E12, 3644.0], [1.6487286E12, 4154.889999999999], [1.64872848E12, 4187.240000000002], [1.64872914E12, 4085.0], [1.64872884E12, 4177.0], [1.64872854E12, 4101.240000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64872842E12, 3505.0], [1.64872872E12, 3692.0], [1.64872908E12, 3617.0], [1.64872878E12, 3626.0], [1.64872896E12, 3616.3500000000004], [1.64872866E12, 3664.949999999999], [1.64872836E12, 3512.25], [1.64872902E12, 3613.0], [1.6487292E12, 3586.3999999999996], [1.64872824E12, 24.0], [1.6487289E12, 3634.0], [1.6487283E12, 3465.0], [1.6487286E12, 3692.0], [1.64872848E12, 3675.0], [1.64872914E12, 3617.0499999999993], [1.64872884E12, 3699.75], [1.64872854E12, 3732.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64872842E12, 694.0], [1.64872872E12, 682.0], [1.64872908E12, 1188.0], [1.64872878E12, 1187.0], [1.64872896E12, 649.0], [1.64872866E12, 696.0], [1.64872836E12, 1158.0], [1.64872902E12, 766.0], [1.6487292E12, 1855.0], [1.64872824E12, 0.0], [1.6487289E12, 670.0], [1.6487283E12, 0.0], [1.6487286E12, 1158.0], [1.64872848E12, 1169.0], [1.64872914E12, 694.0], [1.64872884E12, 653.0], [1.64872854E12, 1206.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64872842E12, 2938.0], [1.64872872E12, 3073.0], [1.64872908E12, 3031.0], [1.64872878E12, 3033.0], [1.64872896E12, 3027.0], [1.64872866E12, 3060.0], [1.64872836E12, 2940.0], [1.64872902E12, 3032.0], [1.6487292E12, 2999.0], [1.64872824E12, 20.0], [1.6487289E12, 3040.0], [1.6487283E12, 3.0], [1.6487286E12, 3060.0], [1.64872848E12, 3079.0], [1.64872914E12, 3034.0], [1.64872884E12, 3083.0], [1.64872854E12, 3111.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6487292E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 85.0, "maxY": 3508.0, "series": [{"data": [[783.0, 5.0], [2220.0, 20.0], [2257.0, 23.0], [2477.0, 1.0], [3903.0, 16.0], [8363.0, 2.0], [85.0, 1101.0], [98.0, 2974.5], [126.0, 3216.0], [135.0, 3205.0], [131.0, 3508.0], [138.0, 2359.5], [139.0, 3236.0], [140.0, 3052.0], [150.0, 3112.0], [144.0, 3076.5], [147.0, 3118.0], [149.0, 3166.0], [148.0, 3077.0], [146.0, 3189.0], [145.0, 3264.0], [151.0, 3050.0], [158.0, 3058.0], [155.0, 3073.0], [156.0, 3061.0], [159.0, 3043.0], [154.0, 3052.0], [157.0, 3063.0], [153.0, 3059.5], [152.0, 3100.0], [161.0, 3055.0], [164.0, 3043.0], [162.0, 3047.0], [165.0, 3042.0], [167.0, 3026.0], [163.0, 3045.0], [166.0, 3025.0], [160.0, 3062.0], [169.0, 3017.0], [175.0, 2978.0], [170.0, 3024.0], [171.0, 3023.0], [172.0, 2989.0], [173.0, 3014.0], [174.0, 2994.0], [168.0, 3020.0], [182.0, 2985.0], [183.0, 2988.0], [176.0, 2954.0], [179.0, 2994.0], [180.0, 2940.5], [178.0, 2994.0], [177.0, 2971.0], [181.0, 2977.0], [189.0, 3000.0], [184.0, 2936.0], [187.0, 2928.0], [194.0, 3079.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8363.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 85.0, "maxY": 3494.0, "series": [{"data": [[783.0, 5.0], [2220.0, 20.0], [2257.0, 23.0], [2477.0, 1.0], [3903.0, 16.0], [8363.0, 2.0], [85.0, 1089.0], [98.0, 2966.0], [126.0, 3202.0], [135.0, 3191.0], [131.0, 3494.0], [138.0, 2354.5], [139.0, 3217.0], [140.0, 3043.0], [150.0, 3100.0], [144.0, 3063.0], [147.0, 3104.5], [149.0, 3156.0], [148.0, 3068.0], [146.0, 3181.5], [145.0, 3251.0], [151.0, 3037.0], [158.0, 3048.0], [155.0, 3060.0], [156.0, 3050.0], [159.0, 3030.0], [154.0, 3041.5], [157.0, 3051.0], [153.0, 3047.5], [152.0, 3089.0], [161.0, 3044.0], [164.0, 3033.0], [162.0, 3035.0], [165.0, 3032.0], [167.0, 3015.0], [163.0, 3034.0], [166.0, 3013.0], [160.0, 3051.0], [169.0, 3005.0], [175.0, 2967.0], [170.0, 3013.0], [171.0, 3012.0], [172.0, 2976.0], [173.0, 3003.0], [174.0, 2985.0], [168.0, 3009.0], [182.0, 2970.5], [183.0, 2978.0], [176.0, 2943.0], [179.0, 2985.0], [180.0, 2929.0], [178.0, 2981.5], [177.0, 2958.0], [181.0, 2966.0], [189.0, 2990.0], [184.0, 2927.0], [187.0, 2922.0], [194.0, 3072.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8363.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.45, "minX": 1.64872824E12, "maxY": 349.18333333333334, "series": [{"data": [[1.64872842E12, 169.95], [1.64872872E12, 162.08333333333334], [1.64872908E12, 164.96666666666667], [1.64872878E12, 164.81666666666666], [1.64872896E12, 165.2], [1.64872866E12, 163.0], [1.64872836E12, 169.9], [1.64872902E12, 165.06666666666666], [1.6487292E12, 4.45], [1.64872824E12, 153.21666666666667], [1.6487289E12, 164.31666666666666], [1.6487283E12, 349.18333333333334], [1.6487286E12, 161.83333333333334], [1.64872848E12, 162.28333333333333], [1.64872914E12, 164.96666666666667], [1.64872884E12, 162.4], [1.64872854E12, 160.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6487292E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 12.783333333333333, "minX": 1.64872824E12, "maxY": 341.35, "series": [{"data": [[1.64872842E12, 169.95], [1.64872872E12, 162.08333333333334], [1.64872908E12, 164.96666666666667], [1.64872878E12, 164.81666666666666], [1.64872896E12, 165.2], [1.64872866E12, 163.0], [1.64872836E12, 169.9], [1.64872902E12, 165.06666666666666], [1.6487292E12, 12.783333333333333], [1.64872824E12, 152.71666666666667], [1.6487289E12, 164.31666666666666], [1.6487283E12, 341.35], [1.6487286E12, 161.83333333333334], [1.64872848E12, 162.28333333333333], [1.64872914E12, 164.96666666666667], [1.64872884E12, 162.4], [1.64872854E12, 160.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6487292E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 12.783333333333333, "minX": 1.64872824E12, "maxY": 180.61666666666667, "series": [{"data": [[1.64872842E12, 169.95], [1.64872872E12, 162.08333333333334], [1.64872908E12, 164.96666666666667], [1.64872878E12, 164.81666666666666], [1.64872896E12, 165.2], [1.64872866E12, 163.0], [1.64872836E12, 169.9], [1.64872902E12, 165.06666666666666], [1.6487292E12, 12.783333333333333], [1.6487289E12, 164.31666666666666], [1.6487283E12, 160.73333333333332], [1.6487286E12, 161.83333333333334], [1.64872848E12, 162.28333333333333], [1.64872914E12, 164.96666666666667], [1.64872884E12, 162.4], [1.64872854E12, 160.35]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.64872824E12, 152.71666666666667], [1.6487283E12, 180.61666666666667]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6487292E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 12.783333333333333, "minX": 1.64872824E12, "maxY": 341.35, "series": [{"data": [[1.64872842E12, 169.95], [1.64872872E12, 162.08333333333334], [1.64872908E12, 164.96666666666667], [1.64872878E12, 164.81666666666666], [1.64872896E12, 165.2], [1.64872866E12, 163.0], [1.64872836E12, 169.9], [1.64872902E12, 165.06666666666666], [1.6487292E12, 12.783333333333333], [1.64872824E12, 152.71666666666667], [1.6487289E12, 164.31666666666666], [1.6487283E12, 341.35], [1.6487286E12, 161.83333333333334], [1.64872848E12, 162.28333333333333], [1.64872914E12, 164.96666666666667], [1.64872884E12, 162.4], [1.64872854E12, 160.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6487292E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

