/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 31482.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 3.0], [4.1, 3.0], [4.2, 3.0], [4.3, 3.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 4.0], [5.3, 4.0], [5.4, 4.0], [5.5, 4.0], [5.6, 4.0], [5.7, 4.0], [5.8, 4.0], [5.9, 4.0], [6.0, 4.0], [6.1, 4.0], [6.2, 4.0], [6.3, 4.0], [6.4, 4.0], [6.5, 4.0], [6.6, 4.0], [6.7, 4.0], [6.8, 4.0], [6.9, 4.0], [7.0, 5.0], [7.1, 5.0], [7.2, 5.0], [7.3, 5.0], [7.4, 5.0], [7.5, 5.0], [7.6, 5.0], [7.7, 5.0], [7.8, 5.0], [7.9, 5.0], [8.0, 5.0], [8.1, 5.0], [8.2, 5.0], [8.3, 5.0], [8.4, 5.0], [8.5, 5.0], [8.6, 5.0], [8.7, 5.0], [8.8, 5.0], [8.9, 5.0], [9.0, 5.0], [9.1, 5.0], [9.2, 5.0], [9.3, 5.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 6.0], [12.0, 6.0], [12.1, 6.0], [12.2, 6.0], [12.3, 6.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 7.0], [12.8, 7.0], [12.9, 7.0], [13.0, 7.0], [13.1, 7.0], [13.2, 7.0], [13.3, 7.0], [13.4, 7.0], [13.5, 7.0], [13.6, 7.0], [13.7, 7.0], [13.8, 7.0], [13.9, 7.0], [14.0, 7.0], [14.1, 7.0], [14.2, 7.0], [14.3, 7.0], [14.4, 7.0], [14.5, 7.0], [14.6, 7.0], [14.7, 7.0], [14.8, 7.0], [14.9, 7.0], [15.0, 7.0], [15.1, 7.0], [15.2, 7.0], [15.3, 7.0], [15.4, 7.0], [15.5, 7.0], [15.6, 7.0], [15.7, 7.0], [15.8, 7.0], [15.9, 7.0], [16.0, 7.0], [16.1, 7.0], [16.2, 7.0], [16.3, 7.0], [16.4, 7.0], [16.5, 8.0], [16.6, 8.0], [16.7, 8.0], [16.8, 8.0], [16.9, 8.0], [17.0, 8.0], [17.1, 8.0], [17.2, 8.0], [17.3, 8.0], [17.4, 8.0], [17.5, 8.0], [17.6, 8.0], [17.7, 8.0], [17.8, 8.0], [17.9, 8.0], [18.0, 8.0], [18.1, 8.0], [18.2, 8.0], [18.3, 8.0], [18.4, 8.0], [18.5, 8.0], [18.6, 8.0], [18.7, 8.0], [18.8, 8.0], [18.9, 8.0], [19.0, 8.0], [19.1, 8.0], [19.2, 8.0], [19.3, 8.0], [19.4, 8.0], [19.5, 8.0], [19.6, 8.0], [19.7, 8.0], [19.8, 8.0], [19.9, 8.0], [20.0, 8.0], [20.1, 8.0], [20.2, 8.0], [20.3, 8.0], [20.4, 8.0], [20.5, 8.0], [20.6, 8.0], [20.7, 8.0], [20.8, 9.0], [20.9, 9.0], [21.0, 9.0], [21.1, 9.0], [21.2, 9.0], [21.3, 9.0], [21.4, 9.0], [21.5, 9.0], [21.6, 9.0], [21.7, 9.0], [21.8, 9.0], [21.9, 9.0], [22.0, 9.0], [22.1, 9.0], [22.2, 9.0], [22.3, 9.0], [22.4, 9.0], [22.5, 9.0], [22.6, 9.0], [22.7, 9.0], [22.8, 9.0], [22.9, 9.0], [23.0, 9.0], [23.1, 9.0], [23.2, 9.0], [23.3, 9.0], [23.4, 9.0], [23.5, 9.0], [23.6, 9.0], [23.7, 9.0], [23.8, 9.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 10.0], [26.0, 10.0], [26.1, 10.0], [26.2, 10.0], [26.3, 10.0], [26.4, 10.0], [26.5, 10.0], [26.6, 10.0], [26.7, 10.0], [26.8, 10.0], [26.9, 10.0], [27.0, 10.0], [27.1, 10.0], [27.2, 10.0], [27.3, 10.0], [27.4, 10.0], [27.5, 10.0], [27.6, 10.0], [27.7, 10.0], [27.8, 10.0], [27.9, 10.0], [28.0, 10.0], [28.1, 10.0], [28.2, 10.0], [28.3, 10.0], [28.4, 10.0], [28.5, 10.0], [28.6, 10.0], [28.7, 10.0], [28.8, 10.0], [28.9, 10.0], [29.0, 10.0], [29.1, 10.0], [29.2, 10.0], [29.3, 10.0], [29.4, 10.0], [29.5, 10.0], [29.6, 10.0], [29.7, 10.0], [29.8, 10.0], [29.9, 10.0], [30.0, 10.0], [30.1, 10.0], [30.2, 10.0], [30.3, 10.0], [30.4, 10.0], [30.5, 10.0], [30.6, 10.0], [30.7, 10.0], [30.8, 10.0], [30.9, 10.0], [31.0, 10.0], [31.1, 10.0], [31.2, 10.0], [31.3, 10.0], [31.4, 10.0], [31.5, 10.0], [31.6, 10.0], [31.7, 10.0], [31.8, 10.0], [31.9, 10.0], [32.0, 10.0], [32.1, 10.0], [32.2, 10.0], [32.3, 10.0], [32.4, 10.0], [32.5, 10.0], [32.6, 10.0], [32.7, 10.0], [32.8, 10.0], [32.9, 10.0], [33.0, 10.0], [33.1, 10.0], [33.2, 10.0], [33.3, 10.0], [33.4, 11.0], [33.5, 11.0], [33.6, 11.0], [33.7, 11.0], [33.8, 11.0], [33.9, 11.0], [34.0, 11.0], [34.1, 11.0], [34.2, 11.0], [34.3, 11.0], [34.4, 11.0], [34.5, 11.0], [34.6, 11.0], [34.7, 11.0], [34.8, 11.0], [34.9, 11.0], [35.0, 11.0], [35.1, 11.0], [35.2, 11.0], [35.3, 11.0], [35.4, 11.0], [35.5, 11.0], [35.6, 11.0], [35.7, 11.0], [35.8, 11.0], [35.9, 11.0], [36.0, 11.0], [36.1, 11.0], [36.2, 11.0], [36.3, 11.0], [36.4, 11.0], [36.5, 11.0], [36.6, 11.0], [36.7, 11.0], [36.8, 11.0], [36.9, 11.0], [37.0, 11.0], [37.1, 11.0], [37.2, 11.0], [37.3, 11.0], [37.4, 11.0], [37.5, 11.0], [37.6, 11.0], [37.7, 11.0], [37.8, 11.0], [37.9, 11.0], [38.0, 11.0], [38.1, 11.0], [38.2, 11.0], [38.3, 11.0], [38.4, 11.0], [38.5, 11.0], [38.6, 11.0], [38.7, 11.0], [38.8, 11.0], [38.9, 11.0], [39.0, 11.0], [39.1, 11.0], [39.2, 11.0], [39.3, 11.0], [39.4, 11.0], [39.5, 11.0], [39.6, 11.0], [39.7, 11.0], [39.8, 11.0], [39.9, 11.0], [40.0, 11.0], [40.1, 11.0], [40.2, 11.0], [40.3, 11.0], [40.4, 11.0], [40.5, 11.0], [40.6, 11.0], [40.7, 11.0], [40.8, 11.0], [40.9, 11.0], [41.0, 11.0], [41.1, 11.0], [41.2, 11.0], [41.3, 11.0], [41.4, 11.0], [41.5, 11.0], [41.6, 11.0], [41.7, 11.0], [41.8, 11.0], [41.9, 11.0], [42.0, 11.0], [42.1, 11.0], [42.2, 11.0], [42.3, 11.0], [42.4, 11.0], [42.5, 11.0], [42.6, 11.0], [42.7, 11.0], [42.8, 11.0], [42.9, 11.0], [43.0, 11.0], [43.1, 11.0], [43.2, 11.0], [43.3, 11.0], [43.4, 11.0], [43.5, 11.0], [43.6, 11.0], [43.7, 12.0], [43.8, 12.0], [43.9, 12.0], [44.0, 12.0], [44.1, 12.0], [44.2, 12.0], [44.3, 12.0], [44.4, 12.0], [44.5, 12.0], [44.6, 12.0], [44.7, 12.0], [44.8, 12.0], [44.9, 12.0], [45.0, 12.0], [45.1, 12.0], [45.2, 12.0], [45.3, 12.0], [45.4, 12.0], [45.5, 12.0], [45.6, 12.0], [45.7, 12.0], [45.8, 12.0], [45.9, 12.0], [46.0, 12.0], [46.1, 12.0], [46.2, 12.0], [46.3, 12.0], [46.4, 12.0], [46.5, 12.0], [46.6, 12.0], [46.7, 12.0], [46.8, 12.0], [46.9, 12.0], [47.0, 12.0], [47.1, 12.0], [47.2, 12.0], [47.3, 12.0], [47.4, 12.0], [47.5, 12.0], [47.6, 12.0], [47.7, 12.0], [47.8, 12.0], [47.9, 12.0], [48.0, 12.0], [48.1, 12.0], [48.2, 12.0], [48.3, 12.0], [48.4, 12.0], [48.5, 12.0], [48.6, 12.0], [48.7, 12.0], [48.8, 12.0], [48.9, 12.0], [49.0, 12.0], [49.1, 12.0], [49.2, 12.0], [49.3, 12.0], [49.4, 12.0], [49.5, 12.0], [49.6, 12.0], [49.7, 12.0], [49.8, 12.0], [49.9, 12.0], [50.0, 12.0], [50.1, 12.0], [50.2, 12.0], [50.3, 12.0], [50.4, 12.0], [50.5, 12.0], [50.6, 12.0], [50.7, 12.0], [50.8, 12.0], [50.9, 12.0], [51.0, 12.0], [51.1, 12.0], [51.2, 12.0], [51.3, 12.0], [51.4, 12.0], [51.5, 12.0], [51.6, 12.0], [51.7, 12.0], [51.8, 12.0], [51.9, 12.0], [52.0, 12.0], [52.1, 12.0], [52.2, 12.0], [52.3, 12.0], [52.4, 12.0], [52.5, 12.0], [52.6, 12.0], [52.7, 12.0], [52.8, 12.0], [52.9, 12.0], [53.0, 12.0], [53.1, 12.0], [53.2, 12.0], [53.3, 12.0], [53.4, 12.0], [53.5, 12.0], [53.6, 12.0], [53.7, 12.0], [53.8, 12.0], [53.9, 12.0], [54.0, 12.0], [54.1, 12.0], [54.2, 12.0], [54.3, 12.0], [54.4, 12.0], [54.5, 12.0], [54.6, 12.0], [54.7, 12.0], [54.8, 12.0], [54.9, 12.0], [55.0, 12.0], [55.1, 12.0], [55.2, 13.0], [55.3, 13.0], [55.4, 13.0], [55.5, 13.0], [55.6, 13.0], [55.7, 13.0], [55.8, 13.0], [55.9, 13.0], [56.0, 13.0], [56.1, 13.0], [56.2, 13.0], [56.3, 13.0], [56.4, 13.0], [56.5, 13.0], [56.6, 13.0], [56.7, 13.0], [56.8, 13.0], [56.9, 13.0], [57.0, 13.0], [57.1, 13.0], [57.2, 13.0], [57.3, 13.0], [57.4, 13.0], [57.5, 13.0], [57.6, 13.0], [57.7, 13.0], [57.8, 13.0], [57.9, 13.0], [58.0, 13.0], [58.1, 13.0], [58.2, 13.0], [58.3, 13.0], [58.4, 14.0], [58.5, 14.0], [58.6, 14.0], [58.7, 16.0], [58.8, 16.0], [58.9, 16.0], [59.0, 17.0], [59.1, 18.0], [59.2, 18.0], [59.3, 18.0], [59.4, 19.0], [59.5, 20.0], [59.6, 20.0], [59.7, 20.0], [59.8, 20.0], [59.9, 22.0], [60.0, 23.0], [60.1, 25.0], [60.2, 26.0], [60.3, 27.0], [60.4, 30.0], [60.5, 31.0], [60.6, 32.0], [60.7, 32.0], [60.8, 34.0], [60.9, 34.0], [61.0, 36.0], [61.1, 37.0], [61.2, 40.0], [61.3, 41.0], [61.4, 43.0], [61.5, 44.0], [61.6, 45.0], [61.7, 45.0], [61.8, 46.0], [61.9, 46.0], [62.0, 46.0], [62.1, 47.0], [62.2, 47.0], [62.3, 47.0], [62.4, 47.0], [62.5, 47.0], [62.6, 47.0], [62.7, 47.0], [62.8, 47.0], [62.9, 47.0], [63.0, 48.0], [63.1, 48.0], [63.2, 48.0], [63.3, 48.0], [63.4, 48.0], [63.5, 48.0], [63.6, 48.0], [63.7, 48.0], [63.8, 48.0], [63.9, 48.0], [64.0, 48.0], [64.1, 48.0], [64.2, 48.0], [64.3, 48.0], [64.4, 48.0], [64.5, 48.0], [64.6, 48.0], [64.7, 48.0], [64.8, 48.0], [64.9, 48.0], [65.0, 48.0], [65.1, 48.0], [65.2, 48.0], [65.3, 48.0], [65.4, 48.0], [65.5, 48.0], [65.6, 48.0], [65.7, 48.0], [65.8, 48.0], [65.9, 48.0], [66.0, 48.0], [66.1, 48.0], [66.2, 48.0], [66.3, 48.0], [66.4, 48.0], [66.5, 48.0], [66.6, 48.0], [66.7, 48.0], [66.8, 49.0], [66.9, 49.0], [67.0, 49.0], [67.1, 49.0], [67.2, 49.0], [67.3, 49.0], [67.4, 49.0], [67.5, 49.0], [67.6, 49.0], [67.7, 49.0], [67.8, 49.0], [67.9, 49.0], [68.0, 49.0], [68.1, 49.0], [68.2, 49.0], [68.3, 49.0], [68.4, 49.0], [68.5, 49.0], [68.6, 49.0], [68.7, 49.0], [68.8, 49.0], [68.9, 49.0], [69.0, 49.0], [69.1, 49.0], [69.2, 49.0], [69.3, 49.0], [69.4, 49.0], [69.5, 49.0], [69.6, 49.0], [69.7, 49.0], [69.8, 49.0], [69.9, 49.0], [70.0, 49.0], [70.1, 49.0], [70.2, 49.0], [70.3, 49.0], [70.4, 49.0], [70.5, 49.0], [70.6, 49.0], [70.7, 49.0], [70.8, 49.0], [70.9, 49.0], [71.0, 49.0], [71.1, 49.0], [71.2, 50.0], [71.3, 50.0], [71.4, 50.0], [71.5, 50.0], [71.6, 50.0], [71.7, 50.0], [71.8, 50.0], [71.9, 50.0], [72.0, 50.0], [72.1, 50.0], [72.2, 50.0], [72.3, 50.0], [72.4, 50.0], [72.5, 50.0], [72.6, 50.0], [72.7, 50.0], [72.8, 50.0], [72.9, 50.0], [73.0, 50.0], [73.1, 50.0], [73.2, 50.0], [73.3, 50.0], [73.4, 50.0], [73.5, 50.0], [73.6, 50.0], [73.7, 50.0], [73.8, 50.0], [73.9, 50.0], [74.0, 50.0], [74.1, 50.0], [74.2, 50.0], [74.3, 50.0], [74.4, 50.0], [74.5, 50.0], [74.6, 50.0], [74.7, 50.0], [74.8, 50.0], [74.9, 50.0], [75.0, 50.0], [75.1, 50.0], [75.2, 50.0], [75.3, 50.0], [75.4, 50.0], [75.5, 50.0], [75.6, 50.0], [75.7, 50.0], [75.8, 50.0], [75.9, 50.0], [76.0, 50.0], [76.1, 50.0], [76.2, 50.0], [76.3, 50.0], [76.4, 50.0], [76.5, 50.0], [76.6, 50.0], [76.7, 50.0], [76.8, 50.0], [76.9, 50.0], [77.0, 51.0], [77.1, 51.0], [77.2, 51.0], [77.3, 51.0], [77.4, 51.0], [77.5, 51.0], [77.6, 51.0], [77.7, 51.0], [77.8, 51.0], [77.9, 51.0], [78.0, 51.0], [78.1, 51.0], [78.2, 51.0], [78.3, 51.0], [78.4, 51.0], [78.5, 51.0], [78.6, 51.0], [78.7, 51.0], [78.8, 51.0], [78.9, 51.0], [79.0, 51.0], [79.1, 51.0], [79.2, 51.0], [79.3, 51.0], [79.4, 51.0], [79.5, 51.0], [79.6, 51.0], [79.7, 51.0], [79.8, 51.0], [79.9, 51.0], [80.0, 51.0], [80.1, 51.0], [80.2, 51.0], [80.3, 51.0], [80.4, 51.0], [80.5, 51.0], [80.6, 51.0], [80.7, 51.0], [80.8, 51.0], [80.9, 51.0], [81.0, 51.0], [81.1, 51.0], [81.2, 51.0], [81.3, 51.0], [81.4, 51.0], [81.5, 51.0], [81.6, 51.0], [81.7, 51.0], [81.8, 51.0], [81.9, 51.0], [82.0, 52.0], [82.1, 52.0], [82.2, 52.0], [82.3, 52.0], [82.4, 52.0], [82.5, 52.0], [82.6, 52.0], [82.7, 52.0], [82.8, 52.0], [82.9, 52.0], [83.0, 52.0], [83.1, 52.0], [83.2, 52.0], [83.3, 52.0], [83.4, 52.0], [83.5, 52.0], [83.6, 52.0], [83.7, 52.0], [83.8, 52.0], [83.9, 52.0], [84.0, 52.0], [84.1, 52.0], [84.2, 52.0], [84.3, 52.0], [84.4, 52.0], [84.5, 52.0], [84.6, 52.0], [84.7, 52.0], [84.8, 52.0], [84.9, 52.0], [85.0, 52.0], [85.1, 53.0], [85.2, 53.0], [85.3, 53.0], [85.4, 53.0], [85.5, 53.0], [85.6, 53.0], [85.7, 53.0], [85.8, 53.0], [85.9, 53.0], [86.0, 53.0], [86.1, 53.0], [86.2, 53.0], [86.3, 53.0], [86.4, 53.0], [86.5, 53.0], [86.6, 53.0], [86.7, 53.0], [86.8, 53.0], [86.9, 53.0], [87.0, 53.0], [87.1, 53.0], [87.2, 53.0], [87.3, 53.0], [87.4, 54.0], [87.5, 54.0], [87.6, 54.0], [87.7, 54.0], [87.8, 54.0], [87.9, 54.0], [88.0, 54.0], [88.1, 54.0], [88.2, 55.0], [88.3, 55.0], [88.4, 55.0], [88.5, 55.0], [88.6, 55.0], [88.7, 55.0], [88.8, 55.0], [88.9, 55.0], [89.0, 56.0], [89.1, 56.0], [89.2, 56.0], [89.3, 56.0], [89.4, 56.0], [89.5, 56.0], [89.6, 56.0], [89.7, 56.0], [89.8, 56.0], [89.9, 56.0], [90.0, 56.0], [90.1, 56.0], [90.2, 56.0], [90.3, 56.0], [90.4, 56.0], [90.5, 57.0], [90.6, 57.0], [90.7, 57.0], [90.8, 57.0], [90.9, 57.0], [91.0, 57.0], [91.1, 57.0], [91.2, 57.0], [91.3, 57.0], [91.4, 57.0], [91.5, 57.0], [91.6, 57.0], [91.7, 57.0], [91.8, 57.0], [91.9, 57.0], [92.0, 57.0], [92.1, 57.0], [92.2, 58.0], [92.3, 58.0], [92.4, 58.0], [92.5, 58.0], [92.6, 58.0], [92.7, 58.0], [92.8, 58.0], [92.9, 58.0], [93.0, 58.0], [93.1, 58.0], [93.2, 58.0], [93.3, 58.0], [93.4, 58.0], [93.5, 58.0], [93.6, 58.0], [93.7, 58.0], [93.8, 58.0], [93.9, 58.0], [94.0, 58.0], [94.1, 59.0], [94.2, 59.0], [94.3, 59.0], [94.4, 59.0], [94.5, 59.0], [94.6, 59.0], [94.7, 59.0], [94.8, 59.0], [94.9, 59.0], [95.0, 59.0], [95.1, 59.0], [95.2, 59.0], [95.3, 59.0], [95.4, 59.0], [95.5, 59.0], [95.6, 59.0], [95.7, 59.0], [95.8, 59.0], [95.9, 59.0], [96.0, 60.0], [96.1, 60.0], [96.2, 60.0], [96.3, 60.0], [96.4, 60.0], [96.5, 60.0], [96.6, 60.0], [96.7, 60.0], [96.8, 60.0], [96.9, 60.0], [97.0, 60.0], [97.1, 60.0], [97.2, 60.0], [97.3, 61.0], [97.4, 61.0], [97.5, 61.0], [97.6, 61.0], [97.7, 61.0], [97.8, 61.0], [97.9, 61.0], [98.0, 61.0], [98.1, 61.0], [98.2, 61.0], [98.3, 62.0], [98.4, 62.0], [98.5, 62.0], [98.6, 62.0], [98.7, 62.0], [98.8, 62.0], [98.9, 63.0], [99.0, 63.0], [99.1, 63.0], [99.2, 64.0], [99.3, 65.0], [99.4, 65.0], [99.5, 67.0], [99.6, 68.0], [99.7, 69.0], [99.8, 71.0], [99.9, 72.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 12.0], [31.3, 1301.0], [31.4, 2669.0], [31.5, 4006.0], [31.6, 5477.0], [31.7, 7073.0], [31.8, 9286.0], [31.9, 10457.0], [32.0, 11925.0], [32.1, 13208.0], [32.2, 14591.0], [32.3, 15981.0], [32.4, 17782.0], [32.5, 19840.0], [32.6, 21629.0], [32.7, 23680.0], [32.8, 25178.0], [32.9, 26663.0], [33.0, 28145.0], [33.1, 28824.0], [33.2, 29064.0], [33.3, 29123.0], [33.4, 29179.0], [33.5, 29302.0], [33.6, 29431.0], [33.7, 29492.0], [33.8, 29630.0], [33.9, 29772.0], [34.0, 29845.0], [34.1, 29880.0], [34.2, 29907.0], [34.3, 29926.0], [34.4, 29941.0], [34.5, 29954.0], [34.6, 29966.0], [34.7, 29971.0], [34.8, 29977.0], [34.9, 29985.0], [35.0, 29990.0], [35.1, 29995.0], [35.2, 29999.0], [35.3, 30000.0], [35.4, 30000.0], [35.5, 30000.0], [35.6, 30001.0], [35.7, 30001.0], [35.8, 30001.0], [35.9, 30001.0], [36.0, 30001.0], [36.1, 30001.0], [36.2, 30001.0], [36.3, 30001.0], [36.4, 30001.0], [36.5, 30001.0], [36.6, 30001.0], [36.7, 30001.0], [36.8, 30001.0], [36.9, 30001.0], [37.0, 30001.0], [37.1, 30001.0], [37.2, 30001.0], [37.3, 30001.0], [37.4, 30001.0], [37.5, 30001.0], [37.6, 30001.0], [37.7, 30001.0], [37.8, 30001.0], [37.9, 30001.0], [38.0, 30001.0], [38.1, 30001.0], [38.2, 30001.0], [38.3, 30001.0], [38.4, 30001.0], [38.5, 30001.0], [38.6, 30001.0], [38.7, 30001.0], [38.8, 30001.0], [38.9, 30001.0], [39.0, 30001.0], [39.1, 30001.0], [39.2, 30001.0], [39.3, 30001.0], [39.4, 30001.0], [39.5, 30001.0], [39.6, 30001.0], [39.7, 30001.0], [39.8, 30001.0], [39.9, 30001.0], [40.0, 30001.0], [40.1, 30001.0], [40.2, 30001.0], [40.3, 30001.0], [40.4, 30001.0], [40.5, 30001.0], [40.6, 30001.0], [40.7, 30001.0], [40.8, 30001.0], [40.9, 30001.0], [41.0, 30001.0], [41.1, 30001.0], [41.2, 30001.0], [41.3, 30001.0], [41.4, 30001.0], [41.5, 30001.0], [41.6, 30001.0], [41.7, 30001.0], [41.8, 30001.0], [41.9, 30001.0], [42.0, 30001.0], [42.1, 30001.0], [42.2, 30001.0], [42.3, 30001.0], [42.4, 30001.0], [42.5, 30001.0], [42.6, 30001.0], [42.7, 30001.0], [42.8, 30001.0], [42.9, 30001.0], [43.0, 30001.0], [43.1, 30001.0], [43.2, 30001.0], [43.3, 30001.0], [43.4, 30001.0], [43.5, 30001.0], [43.6, 30001.0], [43.7, 30001.0], [43.8, 30002.0], [43.9, 30002.0], [44.0, 30002.0], [44.1, 30002.0], [44.2, 30002.0], [44.3, 30002.0], [44.4, 30002.0], [44.5, 30002.0], [44.6, 30002.0], [44.7, 30002.0], [44.8, 30002.0], [44.9, 30002.0], [45.0, 30002.0], [45.1, 30002.0], [45.2, 30002.0], [45.3, 30002.0], [45.4, 30002.0], [45.5, 30002.0], [45.6, 30002.0], [45.7, 30002.0], [45.8, 30002.0], [45.9, 30002.0], [46.0, 30002.0], [46.1, 30002.0], [46.2, 30002.0], [46.3, 30002.0], [46.4, 30002.0], [46.5, 30002.0], [46.6, 30002.0], [46.7, 30002.0], [46.8, 30002.0], [46.9, 30002.0], [47.0, 30002.0], [47.1, 30002.0], [47.2, 30002.0], [47.3, 30002.0], [47.4, 30002.0], [47.5, 30002.0], [47.6, 30002.0], [47.7, 30002.0], [47.8, 30002.0], [47.9, 30002.0], [48.0, 30002.0], [48.1, 30002.0], [48.2, 30002.0], [48.3, 30002.0], [48.4, 30002.0], [48.5, 30002.0], [48.6, 30002.0], [48.7, 30002.0], [48.8, 30002.0], [48.9, 30002.0], [49.0, 30002.0], [49.1, 30002.0], [49.2, 30002.0], [49.3, 30002.0], [49.4, 30002.0], [49.5, 30002.0], [49.6, 30002.0], [49.7, 30002.0], [49.8, 30002.0], [49.9, 30002.0], [50.0, 30002.0], [50.1, 30002.0], [50.2, 30002.0], [50.3, 30002.0], [50.4, 30002.0], [50.5, 30002.0], [50.6, 30002.0], [50.7, 30002.0], [50.8, 30002.0], [50.9, 30002.0], [51.0, 30002.0], [51.1, 30002.0], [51.2, 30002.0], [51.3, 30002.0], [51.4, 30002.0], [51.5, 30002.0], [51.6, 30002.0], [51.7, 30002.0], [51.8, 30002.0], [51.9, 30002.0], [52.0, 30002.0], [52.1, 30002.0], [52.2, 30002.0], [52.3, 30002.0], [52.4, 30002.0], [52.5, 30002.0], [52.6, 30002.0], [52.7, 30002.0], [52.8, 30002.0], [52.9, 30002.0], [53.0, 30002.0], [53.1, 30002.0], [53.2, 30002.0], [53.3, 30002.0], [53.4, 30002.0], [53.5, 30002.0], [53.6, 30002.0], [53.7, 30002.0], [53.8, 30002.0], [53.9, 30002.0], [54.0, 30002.0], [54.1, 30002.0], [54.2, 30002.0], [54.3, 30002.0], [54.4, 30002.0], [54.5, 30002.0], [54.6, 30002.0], [54.7, 30002.0], [54.8, 30002.0], [54.9, 30002.0], [55.0, 30002.0], [55.1, 30002.0], [55.2, 30002.0], [55.3, 30002.0], [55.4, 30002.0], [55.5, 30002.0], [55.6, 30002.0], [55.7, 30002.0], [55.8, 30002.0], [55.9, 30002.0], [56.0, 30002.0], [56.1, 30002.0], [56.2, 30002.0], [56.3, 30002.0], [56.4, 30002.0], [56.5, 30002.0], [56.6, 30002.0], [56.7, 30003.0], [56.8, 30003.0], [56.9, 30003.0], [57.0, 30003.0], [57.1, 30003.0], [57.2, 30003.0], [57.3, 30003.0], [57.4, 30003.0], [57.5, 30003.0], [57.6, 30003.0], [57.7, 30003.0], [57.8, 30003.0], [57.9, 30003.0], [58.0, 30003.0], [58.1, 30003.0], [58.2, 30003.0], [58.3, 30003.0], [58.4, 30003.0], [58.5, 30003.0], [58.6, 30003.0], [58.7, 30003.0], [58.8, 30003.0], [58.9, 30003.0], [59.0, 30003.0], [59.1, 30003.0], [59.2, 30003.0], [59.3, 30003.0], [59.4, 30003.0], [59.5, 30003.0], [59.6, 30003.0], [59.7, 30003.0], [59.8, 30003.0], [59.9, 30003.0], [60.0, 30003.0], [60.1, 30003.0], [60.2, 30003.0], [60.3, 30003.0], [60.4, 30003.0], [60.5, 30003.0], [60.6, 30003.0], [60.7, 30003.0], [60.8, 30003.0], [60.9, 30003.0], [61.0, 30003.0], [61.1, 30003.0], [61.2, 30003.0], [61.3, 30003.0], [61.4, 30003.0], [61.5, 30003.0], [61.6, 30003.0], [61.7, 30003.0], [61.8, 30003.0], [61.9, 30004.0], [62.0, 30004.0], [62.1, 30004.0], [62.2, 30004.0], [62.3, 30004.0], [62.4, 30004.0], [62.5, 30004.0], [62.6, 30004.0], [62.7, 30004.0], [62.8, 30004.0], [62.9, 30004.0], [63.0, 30005.0], [63.1, 30005.0], [63.2, 30005.0], [63.3, 30005.0], [63.4, 30005.0], [63.5, 30005.0], [63.6, 30005.0], [63.7, 30005.0], [63.8, 30005.0], [63.9, 30005.0], [64.0, 30005.0], [64.1, 30005.0], [64.2, 30005.0], [64.3, 30005.0], [64.4, 30005.0], [64.5, 30005.0], [64.6, 30005.0], [64.7, 30005.0], [64.8, 30006.0], [64.9, 30006.0], [65.0, 30006.0], [65.1, 30006.0], [65.2, 30006.0], [65.3, 30006.0], [65.4, 30006.0], [65.5, 30006.0], [65.6, 30006.0], [65.7, 30006.0], [65.8, 30006.0], [65.9, 30006.0], [66.0, 30006.0], [66.1, 30006.0], [66.2, 30006.0], [66.3, 30006.0], [66.4, 30006.0], [66.5, 30006.0], [66.6, 30006.0], [66.7, 30006.0], [66.8, 30006.0], [66.9, 30006.0], [67.0, 30006.0], [67.1, 30006.0], [67.2, 30006.0], [67.3, 30006.0], [67.4, 30006.0], [67.5, 30006.0], [67.6, 30006.0], [67.7, 30006.0], [67.8, 30006.0], [67.9, 30006.0], [68.0, 30006.0], [68.1, 30006.0], [68.2, 30006.0], [68.3, 30007.0], [68.4, 30007.0], [68.5, 30007.0], [68.6, 30007.0], [68.7, 30007.0], [68.8, 30007.0], [68.9, 30007.0], [69.0, 30007.0], [69.1, 30007.0], [69.2, 30007.0], [69.3, 30007.0], [69.4, 30007.0], [69.5, 30007.0], [69.6, 30007.0], [69.7, 30007.0], [69.8, 30007.0], [69.9, 30007.0], [70.0, 30007.0], [70.1, 30007.0], [70.2, 30007.0], [70.3, 30007.0], [70.4, 30008.0], [70.5, 30008.0], [70.6, 30008.0], [70.7, 30008.0], [70.8, 30008.0], [70.9, 30008.0], [71.0, 30008.0], [71.1, 30008.0], [71.2, 30008.0], [71.3, 30009.0], [71.4, 30009.0], [71.5, 30009.0], [71.6, 30009.0], [71.7, 30009.0], [71.8, 30010.0], [71.9, 30010.0], [72.0, 30011.0], [72.1, 30011.0], [72.2, 30012.0], [72.3, 30012.0], [72.4, 30013.0], [72.5, 30014.0], [72.6, 30015.0], [72.7, 30015.0], [72.8, 30016.0], [72.9, 30017.0], [73.0, 30017.0], [73.1, 30018.0], [73.2, 30019.0], [73.3, 30019.0], [73.4, 30020.0], [73.5, 30021.0], [73.6, 30022.0], [73.7, 30023.0], [73.8, 30024.0], [73.9, 30025.0], [74.0, 30026.0], [74.1, 30027.0], [74.2, 30028.0], [74.3, 30029.0], [74.4, 30030.0], [74.5, 30031.0], [74.6, 30032.0], [74.7, 30033.0], [74.8, 30034.0], [74.9, 30035.0], [75.0, 30035.0], [75.1, 30036.0], [75.2, 30037.0], [75.3, 30039.0], [75.4, 30040.0], [75.5, 30041.0], [75.6, 30042.0], [75.7, 30042.0], [75.8, 30043.0], [75.9, 30044.0], [76.0, 30045.0], [76.1, 30045.0], [76.2, 30046.0], [76.3, 30047.0], [76.4, 30048.0], [76.5, 30049.0], [76.6, 30049.0], [76.7, 30050.0], [76.8, 30051.0], [76.9, 30052.0], [77.0, 30053.0], [77.1, 30054.0], [77.2, 30056.0], [77.3, 30056.0], [77.4, 30057.0], [77.5, 30058.0], [77.6, 30059.0], [77.7, 30060.0], [77.8, 30061.0], [77.9, 30062.0], [78.0, 30064.0], [78.1, 30064.0], [78.2, 30066.0], [78.3, 30067.0], [78.4, 30068.0], [78.5, 30069.0], [78.6, 30070.0], [78.7, 30071.0], [78.8, 30072.0], [78.9, 30073.0], [79.0, 30074.0], [79.1, 30075.0], [79.2, 30076.0], [79.3, 30077.0], [79.4, 30078.0], [79.5, 30080.0], [79.6, 30081.0], [79.7, 30082.0], [79.8, 30083.0], [79.9, 30084.0], [80.0, 30085.0], [80.1, 30086.0], [80.2, 30087.0], [80.3, 30088.0], [80.4, 30089.0], [80.5, 30091.0], [80.6, 30092.0], [80.7, 30093.0], [80.8, 30093.0], [80.9, 30094.0], [81.0, 30095.0], [81.1, 30096.0], [81.2, 30097.0], [81.3, 30098.0], [81.4, 30099.0], [81.5, 30100.0], [81.6, 30101.0], [81.7, 30102.0], [81.8, 30103.0], [81.9, 30104.0], [82.0, 30105.0], [82.1, 30106.0], [82.2, 30107.0], [82.3, 30108.0], [82.4, 30109.0], [82.5, 30110.0], [82.6, 30111.0], [82.7, 30112.0], [82.8, 30112.0], [82.9, 30114.0], [83.0, 30114.0], [83.1, 30115.0], [83.2, 30116.0], [83.3, 30116.0], [83.4, 30117.0], [83.5, 30118.0], [83.6, 30119.0], [83.7, 30119.0], [83.8, 30120.0], [83.9, 30121.0], [84.0, 30122.0], [84.1, 30123.0], [84.2, 30124.0], [84.3, 30125.0], [84.4, 30126.0], [84.5, 30126.0], [84.6, 30127.0], [84.7, 30127.0], [84.8, 30128.0], [84.9, 30129.0], [85.0, 30130.0], [85.1, 30131.0], [85.2, 30131.0], [85.3, 30132.0], [85.4, 30133.0], [85.5, 30133.0], [85.6, 30134.0], [85.7, 30135.0], [85.8, 30135.0], [85.9, 30136.0], [86.0, 30137.0], [86.1, 30138.0], [86.2, 30138.0], [86.3, 30139.0], [86.4, 30140.0], [86.5, 30141.0], [86.6, 30142.0], [86.7, 30142.0], [86.8, 30143.0], [86.9, 30143.0], [87.0, 30144.0], [87.1, 30144.0], [87.2, 30145.0], [87.3, 30146.0], [87.4, 30146.0], [87.5, 30147.0], [87.6, 30148.0], [87.7, 30148.0], [87.8, 30149.0], [87.9, 30149.0], [88.0, 30150.0], [88.1, 30150.0], [88.2, 30151.0], [88.3, 30152.0], [88.4, 30152.0], [88.5, 30153.0], [88.6, 30154.0], [88.7, 30154.0], [88.8, 30155.0], [88.9, 30156.0], [89.0, 30156.0], [89.1, 30157.0], [89.2, 30157.0], [89.3, 30158.0], [89.4, 30158.0], [89.5, 30159.0], [89.6, 30159.0], [89.7, 30160.0], [89.8, 30160.0], [89.9, 30161.0], [90.0, 30161.0], [90.1, 30162.0], [90.2, 30162.0], [90.3, 30163.0], [90.4, 30163.0], [90.5, 30164.0], [90.6, 30164.0], [90.7, 30165.0], [90.8, 30165.0], [90.9, 30166.0], [91.0, 30166.0], [91.1, 30167.0], [91.2, 30168.0], [91.3, 30168.0], [91.4, 30169.0], [91.5, 30170.0], [91.6, 30170.0], [91.7, 30171.0], [91.8, 30172.0], [91.9, 30172.0], [92.0, 30173.0], [92.1, 30173.0], [92.2, 30174.0], [92.3, 30175.0], [92.4, 30175.0], [92.5, 30176.0], [92.6, 30177.0], [92.7, 30177.0], [92.8, 30178.0], [92.9, 30178.0], [93.0, 30179.0], [93.1, 30180.0], [93.2, 30181.0], [93.3, 30182.0], [93.4, 30182.0], [93.5, 30183.0], [93.6, 30184.0], [93.7, 30185.0], [93.8, 30186.0], [93.9, 30186.0], [94.0, 30187.0], [94.1, 30187.0], [94.2, 30188.0], [94.3, 30189.0], [94.4, 30190.0], [94.5, 30191.0], [94.6, 30192.0], [94.7, 30192.0], [94.8, 30194.0], [94.9, 30194.0], [95.0, 30195.0], [95.1, 30196.0], [95.2, 30197.0], [95.3, 30198.0], [95.4, 30199.0], [95.5, 30200.0], [95.6, 30201.0], [95.7, 30202.0], [95.8, 30203.0], [95.9, 30204.0], [96.0, 30205.0], [96.1, 30207.0], [96.2, 30208.0], [96.3, 30209.0], [96.4, 30210.0], [96.5, 30211.0], [96.6, 30213.0], [96.7, 30214.0], [96.8, 30215.0], [96.9, 30217.0], [97.0, 30219.0], [97.1, 30220.0], [97.2, 30223.0], [97.3, 30224.0], [97.4, 30226.0], [97.5, 30228.0], [97.6, 30230.0], [97.7, 30232.0], [97.8, 30234.0], [97.9, 30236.0], [98.0, 30239.0], [98.1, 30243.0], [98.2, 30246.0], [98.3, 30248.0], [98.4, 30250.0], [98.5, 30254.0], [98.6, 30258.0], [98.7, 30262.0], [98.8, 30268.0], [98.9, 30273.0], [99.0, 30284.0], [99.1, 30292.0], [99.2, 30307.0], [99.3, 30322.0], [99.4, 30358.0], [99.5, 30394.0], [99.6, 30438.0], [99.7, 30574.0], [99.8, 31093.0], [99.9, 31142.0], [100.0, 31482.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 20000.0, "series": [{"data": [[0.0, 20000.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 6989.0], [100.0, 1.0], [200.0, 4.0], [600.0, 3.0], [700.0, 1.0], [900.0, 3.0], [1100.0, 4.0], [1300.0, 4.0], [1600.0, 1.0], [1700.0, 3.0], [1800.0, 2.0], [1900.0, 2.0], [2000.0, 2.0], [2100.0, 1.0], [2200.0, 3.0], [2300.0, 1.0], [2400.0, 3.0], [2600.0, 1.0], [2700.0, 3.0], [2800.0, 1.0], [2900.0, 2.0], [3000.0, 2.0], [3100.0, 2.0], [3200.0, 3.0], [3300.0, 1.0], [3600.0, 3.0], [3700.0, 1.0], [3800.0, 3.0], [3900.0, 1.0], [4000.0, 2.0], [4100.0, 2.0], [4200.0, 2.0], [4300.0, 1.0], [4500.0, 2.0], [4600.0, 1.0], [4700.0, 3.0], [4800.0, 1.0], [4900.0, 3.0], [5000.0, 1.0], [5100.0, 3.0], [5200.0, 1.0], [5400.0, 1.0], [5500.0, 1.0], [5600.0, 3.0], [5700.0, 1.0], [5800.0, 2.0], [5900.0, 1.0], [6000.0, 2.0], [6300.0, 1.0], [6400.0, 3.0], [6600.0, 4.0], [6800.0, 3.0], [6900.0, 1.0], [7000.0, 3.0], [7200.0, 2.0], [7400.0, 1.0], [7600.0, 2.0], [7700.0, 2.0], [7800.0, 1.0], [7900.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8200.0, 1.0], [8400.0, 2.0], [8600.0, 4.0], [8900.0, 1.0], [9200.0, 1.0], [9300.0, 2.0], [9500.0, 4.0], [9400.0, 1.0], [9700.0, 3.0], [9800.0, 1.0], [10000.0, 3.0], [10100.0, 1.0], [10200.0, 3.0], [10300.0, 1.0], [10400.0, 3.0], [10500.0, 1.0], [10600.0, 2.0], [10700.0, 2.0], [10800.0, 2.0], [11000.0, 2.0], [11100.0, 2.0], [11200.0, 2.0], [11300.0, 1.0], [11400.0, 2.0], [11500.0, 2.0], [11600.0, 1.0], [11700.0, 3.0], [11900.0, 3.0], [12000.0, 1.0], [12100.0, 1.0], [12300.0, 3.0], [12400.0, 1.0], [12500.0, 3.0], [12600.0, 1.0], [12700.0, 3.0], [12800.0, 1.0], [12900.0, 1.0], [13000.0, 2.0], [13100.0, 1.0], [13200.0, 3.0], [13500.0, 4.0], [13700.0, 4.0], [13900.0, 4.0], [14100.0, 4.0], [14300.0, 3.0], [14400.0, 1.0], [14500.0, 3.0], [14900.0, 4.0], [15100.0, 3.0], [15000.0, 1.0], [15200.0, 2.0], [15300.0, 1.0], [15400.0, 2.0], [15500.0, 1.0], [15600.0, 2.0], [15700.0, 3.0], [15900.0, 2.0], [16000.0, 1.0], [16200.0, 1.0], [16300.0, 3.0], [16400.0, 1.0], [16800.0, 4.0], [17000.0, 3.0], [17200.0, 2.0], [18200.0, 2.0], [18400.0, 5.0], [18600.0, 3.0], [18800.0, 2.0], [19200.0, 1.0], [19800.0, 3.0], [20600.0, 3.0], [21000.0, 1.0], [21400.0, 3.0], [21600.0, 2.0], [22000.0, 1.0], [22400.0, 1.0], [22600.0, 4.0], [23000.0, 1.0], [23200.0, 3.0], [23400.0, 4.0], [23600.0, 2.0], [23800.0, 3.0], [24400.0, 2.0], [24600.0, 3.0], [24800.0, 3.0], [25000.0, 1.0], [25600.0, 1.0], [25800.0, 3.0], [26000.0, 2.0], [26400.0, 3.0], [26600.0, 3.0], [27000.0, 1.0], [27200.0, 2.0], [27400.0, 3.0], [27600.0, 3.0], [27800.0, 1.0], [28000.0, 1.0], [28400.0, 1.0], [28600.0, 5.0], [28800.0, 13.0], [29000.0, 22.0], [29200.0, 18.0], [29400.0, 30.0], [29600.0, 15.0], [30000.0, 10347.0], [30200.0, 829.0], [30400.0, 32.0], [30600.0, 11.0], [29800.0, 53.0], [31000.0, 9.0], [31200.0, 3.0], [31400.0, 1.0], [16500.0, 2.0], [16700.0, 2.0], [16900.0, 2.0], [17700.0, 1.0], [18100.0, 4.0], [18700.0, 1.0], [19700.0, 4.0], [20100.0, 1.0], [20700.0, 3.0], [20900.0, 3.0], [21100.0, 3.0], [21500.0, 1.0], [22500.0, 3.0], [22900.0, 3.0], [23500.0, 1.0], [23700.0, 1.0], [23900.0, 1.0], [24100.0, 4.0], [24300.0, 1.0], [24700.0, 1.0], [24900.0, 1.0], [25100.0, 1.0], [25300.0, 4.0], [25500.0, 3.0], [25900.0, 1.0], [26100.0, 1.0], [26300.0, 1.0], [26500.0, 1.0], [26700.0, 1.0], [26900.0, 3.0], [27100.0, 2.0], [27500.0, 1.0], [27900.0, 2.0], [28100.0, 2.0], [28700.0, 14.0], [29300.0, 17.0], [29500.0, 17.0], [29100.0, 33.0], [28900.0, 4.0], [29700.0, 17.0], [29900.0, 238.0], [30100.0, 3134.0], [30500.0, 11.0], [30300.0, 80.0], [30700.0, 4.0], [31100.0, 35.0], [31300.0, 2.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 31400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 20004.0, "series": [{"data": [[0.0, 20004.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 15.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6016.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 16347.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 44.94954083144067, "minX": 1.64872698E12, "maxY": 500.0, "series": [{"data": [[1.64872746E12, 500.0], [1.64872776E12, 500.0], [1.64872782E12, 500.0], [1.64872716E12, 500.0], [1.6487277E12, 500.0], [1.64872704E12, 77.28883383796675], [1.6487271E12, 500.0], [1.6487274E12, 500.0], [1.64872794E12, 273.32909090909106], [1.64872698E12, 44.94954083144067], [1.64872728E12, 500.0], [1.64872734E12, 500.0], [1.64872764E12, 500.0], [1.64872722E12, 500.0], [1.64872752E12, 500.0], [1.64872758E12, 500.0], [1.64872788E12, 500.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64872794E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.4583333333333335, "minX": 1.0, "maxY": 30290.0, "series": [{"data": [[2.0, 1.4827586206896557], [3.0, 1.5185185185185182], [4.0, 1.6363636363636367], [5.0, 1.8867924528301891], [6.0, 2.373831775700935], [7.0, 2.6111111111111116], [8.0, 3.224299065420561], [9.0, 3.495495495495499], [10.0, 3.8434782608695652], [11.0, 4.249999999999999], [12.0, 4.570247933884298], [13.0, 4.753623188405799], [14.0, 5.409836065573771], [15.0, 5.876923076923074], [16.0, 6.67857142857143], [17.0, 6.549668874172184], [18.0, 7.031007751937984], [19.0, 6.740740740740739], [20.0, 7.43971631205674], [21.0, 7.329608938547484], [22.0, 7.683333333333336], [23.0, 8.273885350318466], [24.0, 7.9910714285714315], [25.0, 8.348484848484848], [26.0, 8.614634146341462], [27.0, 9.19178082191781], [28.0, 9.787234042553187], [29.0, 9.415637860082297], [30.0, 9.976653696498058], [31.0, 9.821818181818182], [32.0, 10.168458781362007], [33.0, 11.163865546218489], [34.0, 10.94047619047619], [35.0, 10.873076923076919], [36.0, 10.908839779005527], [37.0, 11.978142076502738], [38.0, 11.62051282051281], [39.0, 11.355339805825249], [40.0, 11.97826086956521], [41.0, 12.005597014925371], [42.0, 12.215000000000007], [43.0, 12.40390390390391], [44.0, 12.613434727503158], [45.0, 12.767167381974247], [46.0, 18.14144736842104], [47.0, 39.62470308788599], [48.0, 48.954732510288075], [49.0, 50.23936170212765], [50.0, 53.400656324582215], [1.0, 1.4583333333333335]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[39.336699999999745, 26.409000000000056]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 30111.0], [3.0, 30002.0], [4.0, 30143.0], [5.0, 30007.0], [6.0, 30157.0], [7.0, 30149.0], [8.0, 30023.0], [9.0, 30152.0], [10.0, 30079.0], [11.0, 30003.0], [12.0, 30002.0], [13.0, 30150.0], [14.0, 30003.0], [15.0, 30179.0], [16.0, 30103.0], [17.0, 30004.0], [18.0, 30188.0], [19.0, 30001.0], [20.0, 30098.0], [21.0, 30240.0], [22.0, 30003.0], [23.0, 30004.0], [24.0, 30003.0], [25.0, 30004.0], [26.0, 30246.0], [27.0, 30121.0], [28.0, 30168.0], [29.0, 30113.0], [30.0, 30003.0], [31.0, 29995.0], [33.0, 30006.0], [32.0, 30205.0], [37.0, 30180.0], [36.0, 30044.666666666668], [39.0, 30163.0], [38.0, 30003.0], [41.0, 30003.0], [40.0, 30004.0], [43.0, 30109.0], [42.0, 30008.0], [45.0, 30007.0], [44.0, 30205.0], [47.0, 30006.0], [46.0, 30107.0], [49.0, 30186.0], [48.0, 30169.0], [51.0, 30143.0], [50.0, 30052.0], [53.0, 30003.0], [52.0, 30007.0], [55.0, 30004.0], [54.0, 30002.0], [57.0, 30006.0], [56.0, 30120.0], [59.0, 30045.0], [58.0, 30253.0], [61.0, 30160.0], [60.0, 30005.0], [63.0, 30002.0], [62.0, 30007.0], [67.0, 30082.0], [66.0, 30003.0], [65.0, 30073.0], [64.0, 30003.0], [71.0, 30070.0], [70.0, 30006.0], [69.0, 30145.0], [68.0, 30004.0], [75.0, 30006.0], [74.0, 30044.0], [73.0, 30004.0], [72.0, 30003.0], [79.0, 30004.0], [78.0, 30074.0], [77.0, 30001.0], [76.0, 30003.0], [83.0, 30004.0], [82.0, 30158.0], [81.0, 30006.0], [80.0, 30225.0], [87.0, 30184.0], [86.0, 30023.0], [85.0, 30003.0], [84.0, 30003.0], [91.0, 30018.0], [90.0, 30002.0], [89.0, 30003.0], [88.0, 30006.0], [95.0, 30184.0], [94.0, 30006.0], [93.0, 30002.0], [92.0, 30149.0], [99.0, 30158.0], [98.0, 30003.0], [97.0, 30002.0], [96.0, 30196.0], [102.0, 30005.0], [101.0, 30176.0], [100.0, 30003.0], [107.0, 30003.0], [106.0, 30187.0], [105.0, 30002.0], [104.0, 30003.0], [111.0, 30172.0], [110.0, 30001.0], [109.0, 30002.0], [108.0, 30137.0], [115.0, 30004.0], [114.0, 30167.0], [113.0, 30002.0], [112.0, 30008.0], [119.0, 15250.0], [118.0, 30004.0], [117.0, 30003.0], [116.0, 30145.0], [123.0, 30002.0], [122.0, 30003.0], [121.0, 30001.0], [120.0, 30003.0], [127.0, 30187.0], [126.0, 30004.0], [125.0, 30005.0], [124.0, 30153.0], [131.0, 15131.0], [135.0, 30009.0], [134.0, 30003.0], [132.0, 30187.0], [130.0, 30004.0], [129.0, 30165.0], [128.0, 30004.0], [137.0, 15136.0], [143.0, 15232.5], [142.0, 30006.0], [141.0, 30124.0], [140.0, 30010.0], [139.0, 30106.0], [138.0, 30112.0], [136.0, 30182.0], [151.0, 30007.0], [150.0, 30125.0], [149.0, 30006.0], [148.0, 30004.0], [147.0, 30117.0], [146.0, 30001.0], [145.0, 30004.0], [144.0, 30007.0], [159.0, 30003.0], [158.0, 30178.0], [157.0, 30006.0], [156.0, 30129.0], [155.0, 30006.0], [154.0, 30168.0], [153.0, 30006.0], [152.0, 30112.0], [167.0, 30126.0], [166.0, 30006.0], [165.0, 30003.0], [163.0, 30003.0], [162.0, 30102.0], [161.0, 30006.0], [160.0, 30010.0], [175.0, 30003.0], [174.0, 30046.0], [173.0, 30003.0], [172.0, 30002.0], [170.0, 30166.0], [169.0, 30255.0], [168.0, 30005.0], [183.0, 30064.0], [182.0, 30002.0], [181.0, 30002.0], [180.0, 30003.0], [179.0, 30002.0], [178.0, 30006.0], [177.0, 30101.0], [176.0, 29971.0], [191.0, 30005.0], [190.0, 30157.0], [189.0, 30003.0], [188.0, 30005.0], [187.0, 30045.0], [186.0, 30003.0], [185.0, 30003.0], [184.0, 30004.0], [199.0, 30056.0], [198.0, 30002.0], [197.0, 30004.0], [196.0, 30094.0], [195.0, 30002.0], [194.0, 30003.0], [193.0, 30050.0], [207.0, 30007.0], [206.0, 29995.0], [205.0, 30034.5], [203.0, 30003.0], [202.0, 30239.0], [201.0, 30039.0], [200.0, 30002.0], [215.0, 30002.0], [214.0, 30086.0], [213.0, 30001.0], [212.0, 30001.0], [211.0, 30290.0], [210.0, 30166.0], [209.0, 30004.0], [208.0, 30200.0], [223.0, 30129.0], [222.0, 30001.5], [220.0, 30007.0], [219.0, 30154.0], [218.0, 30001.0], [217.0, 30002.0], [216.0, 30002.0], [231.0, 30003.0], [230.0, 30067.0], [229.0, 30003.0], [227.0, 30089.0], [226.0, 30006.0], [225.0, 30118.0], [224.0, 30005.0], [239.0, 30015.0], [238.0, 30146.0], [237.0, 30003.0], [236.0, 30007.0], [235.0, 30004.0], [234.0, 30143.0], [233.0, 30148.0], [232.0, 30003.0], [247.0, 30051.0], [246.0, 30003.0], [245.0, 30001.0], [244.0, 30201.0], [243.0, 30086.0], [242.0, 30006.0], [241.0, 30003.0], [240.0, 30147.0], [254.0, 30006.0], [253.0, 30144.0], [252.0, 30002.0], [251.0, 30001.0], [250.0, 30003.0], [249.0, 30006.0], [248.0, 30093.0], [270.0, 30006.0], [271.0, 30160.0], [269.0, 30223.0], [268.0, 30006.0], [267.0, 30132.0], [266.0, 30003.0], [265.0, 30002.0], [264.0, 30005.0], [263.0, 30148.0], [257.0, 30236.0], [256.0, 30003.0], [259.0, 30007.0], [258.0, 30004.0], [262.0, 30006.0], [261.0, 30163.0], [260.0, 30004.0], [286.0, 30149.0], [287.0, 30003.0], [285.0, 30002.0], [284.0, 30004.0], [283.0, 30190.0], [282.0, 30168.0], [281.0, 30006.0], [280.0, 30004.0], [279.0, 30099.0], [273.0, 30005.0], [272.0, 30002.0], [275.0, 30177.0], [274.0, 30004.0], [278.0, 30057.0], [277.0, 30203.0], [276.0, 30007.0], [302.0, 30163.0], [303.0, 30003.0], [301.0, 30007.0], [300.0, 30164.0], [299.0, 30002.0], [298.0, 30007.0], [297.0, 30171.0], [296.0, 30003.0], [295.0, 30034.0], [289.0, 30003.0], [288.0, 30103.0], [291.0, 30032.0], [290.0, 30003.0], [293.0, 30007.0], [292.0, 30225.0], [318.0, 30164.0], [319.0, 30006.0], [317.0, 30002.0], [307.0, 30157.0], [306.0, 30006.0], [305.0, 30181.0], [304.0, 30039.0], [315.0, 30006.0], [314.0, 30108.0], [313.0, 30014.0], [312.0, 30007.0], [311.0, 30002.0], [310.0, 30003.0], [309.0, 30203.0], [308.0, 30003.0], [334.0, 30229.0], [335.0, 30002.0], [333.0, 30006.0], [332.0, 30157.0], [331.0, 30005.0], [330.0, 30134.0], [329.0, 30003.0], [328.0, 30023.6], [323.0, 30179.0], [322.0, 30007.0], [321.0, 30002.0], [320.0, 30177.0], [350.0, 30003.0], [337.0, 15324.0], [336.0, 30006.0], [339.0, 30007.0], [338.0, 30194.0], [351.0, 30002.0], [349.0, 30001.0], [348.0, 30178.0], [347.0, 30007.0], [346.0, 30001.0], [345.0, 30058.5], [343.0, 30002.0], [342.0, 30261.0], [341.0, 30002.0], [340.0, 30003.0], [367.0, 30210.0], [352.0, 10461.333333333334], [359.0, 30006.0], [358.0, 30139.0], [357.0, 30003.0], [356.0, 30002.0], [365.0, 15358.0], [366.0, 30005.0], [364.0, 30168.0], [355.0, 30198.0], [354.0, 30003.0], [353.0, 30180.0], [363.0, 30007.0], [362.0, 30088.0], [361.0, 30003.0], [360.0, 30003.0], [381.0, 30005.0], [382.0, 30002.0], [380.0, 30183.0], [371.0, 30002.0], [370.0, 30007.0], [369.0, 30003.0], [379.0, 30000.0], [378.0, 30001.0], [377.0, 30002.0], [376.0, 30002.0], [375.0, 30006.0], [374.0, 30099.0], [373.0, 30006.0], [372.0, 30104.0], [398.0, 30002.0], [399.0, 30131.0], [397.0, 30002.0], [396.0, 30002.5], [394.0, 30002.0], [393.0, 30002.0], [392.0, 30004.0], [390.0, 30150.0], [387.0, 30002.0], [386.0, 30114.0], [385.0, 30001.0], [389.0, 30001.5], [408.0, 30182.0], [407.0, 30002.0], [406.0, 30001.0], [404.0, 30001.0], [403.0, 30002.0], [402.0, 30002.0], [401.0, 30001.0], [400.0, 30001.0], [428.0, 30001.0], [430.0, 30001.0], [431.0, 30006.0], [429.0, 30001.0], [427.0, 30001.0], [425.0, 30001.5], [423.0, 30001.0], [417.0, 30054.000000000004], [419.0, 30007.0], [418.0, 30002.0], [422.0, 30002.0], [421.0, 30051.0], [420.0, 30183.0], [435.0, 30001.0], [447.0, 30001.0], [446.0, 30002.333333333332], [434.0, 30001.0], [433.0, 30001.0], [443.0, 30001.5], [441.0, 30001.0], [440.0, 30003.0], [439.0, 30005.0], [438.0, 30002.0], [437.0, 30056.0], [436.0, 30001.0], [463.0, 30002.0], [459.0, 15454.0], [462.0, 30006.0], [461.0, 30240.0], [460.0, 30002.0], [450.0, 30001.0], [449.0, 30002.0], [448.0, 30002.0], [458.0, 30002.0], [457.0, 30002.0], [456.0, 30002.0], [455.0, 30001.0], [454.0, 30126.0], [453.0, 30002.0], [452.0, 30001.5], [477.0, 30007.0], [465.0, 15478.5], [479.0, 30002.0], [476.0, 30002.0], [467.0, 30002.0], [466.0, 30133.0], [475.0, 30001.0], [474.0, 30002.0], [473.0, 30001.0], [472.0, 30094.0], [471.0, 30002.0], [464.0, 30001.0], [470.0, 30003.0], [469.0, 30002.0], [468.0, 30005.0], [494.0, 30006.0], [481.0, 15475.0], [480.0, 30002.5], [482.0, 30001.0], [495.0, 30002.0], [493.0, 30142.0], [492.0, 30003.0], [491.0, 30003.0], [490.0, 30007.0], [489.0, 30128.0], [488.0, 30052.5], [486.0, 30133.0], [485.0, 30056.0], [484.0, 30003.5], [500.0, 20167.456931236295], [499.0, 30004.0], [498.0, 30226.0], [497.0, 30004.0], [496.0, 30003.0], [1.0, 30152.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[494.3334822625306, 20378.167902778998]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1159.1666666666667, "minX": 1.64872698E12, "maxY": 2.15774941E7, "series": [{"data": [[1.64872746E12, 8697793.25], [1.64872776E12, 8786817.866666667], [1.64872782E12, 8904832.433333334], [1.64872716E12, 2.1517054833333332E7], [1.6487277E12, 8638140.133333333], [1.64872704E12, 2.1176575783333335E7], [1.6487271E12, 2.15774941E7], [1.6487274E12, 8845660.85], [1.64872794E12, 4725911.05], [1.64872698E12, 17549.233333333334], [1.64872728E12, 8903893.116666667], [1.64872734E12, 8578274.15], [1.64872764E12, 8578758.85], [1.64872722E12, 1.4750427716666667E7], [1.64872752E12, 8578632.633333333], [1.64872758E12, 8667364.2], [1.64872788E12, 8667025.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64872746E12, 2162.3333333333335], [1.64872776E12, 2162.3333333333335], [1.64872782E12, 2160.1666666666665], [1.64872716E12, 2162.3333333333335], [1.6487277E12, 2162.3333333333335], [1.64872704E12, 44007.63333333333], [1.6487271E12, 2190.5], [1.6487274E12, 2164.5], [1.64872794E12, 1159.1666666666667], [1.64872698E12, 43708.53333333333], [1.64872728E12, 2164.5], [1.64872734E12, 2164.5], [1.64872764E12, 2164.5], [1.64872722E12, 2160.1666666666665], [1.64872752E12, 2164.5], [1.64872758E12, 2160.1666666666665], [1.64872788E12, 2164.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64872794E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9.094095006583588, "minX": 1.64872698E12, "maxY": 29231.17272727273, "series": [{"data": [[1.64872698E12, 43.289621803100594], [1.64872704E12, 9.094095006583588]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64872746E12, 19114.033779477388], [1.64872776E12, 19151.73116219666], [1.64872782E12, 19440.513951979217], [1.64872716E12, 25314.6489451477], [1.6487277E12, 19199.28937259919], [1.64872704E12, 19251.727095516537], [1.6487271E12, 25039.16694214876], [1.6487274E12, 19366.924516128987], [1.64872794E12, 29231.17272727273], [1.64872728E12, 19800.494722955144], [1.64872734E12, 19353.63056092845], [1.64872764E12, 19194.29539641947], [1.64872722E12, 22290.40446096654], [1.64872752E12, 19230.30877642541], [1.64872758E12, 19367.024563671614], [1.64872788E12, 19504.41780376867]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64872794E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9.091461561835311, "minX": 1.64872698E12, "maxY": 29227.609090909085, "series": [{"data": [[1.64872698E12, 43.28656067937206], [1.64872704E12, 9.091461561835311]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64872746E12, 19111.637985978337], [1.64872776E12, 19149.343550446996], [1.64872782E12, 19438.118754055795], [1.64872716E12, 25302.887763713094], [1.6487277E12, 19196.91869398207], [1.64872704E12, 19233.736842105263], [1.6487271E12, 25026.027272727286], [1.6487274E12, 19364.42838709675], [1.64872794E12, 29227.609090909085], [1.64872728E12, 19797.9703166227], [1.64872734E12, 19351.237266279775], [1.64872764E12, 19191.996163682863], [1.64872722E12, 22285.113011152396], [1.64872752E12, 19227.9859064702], [1.64872758E12, 19364.648998060744], [1.64872788E12, 19502.025341130608]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64872794E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.090043553124708E-4, "minX": 1.64872698E12, "maxY": 0.09873417721518998, "series": [{"data": [[1.64872698E12, 0.001283697047496785], [1.64872704E12, 7.090043553124708E-4]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64872746E12, 0.06309751434034422], [1.64872776E12, 0.047254150702426605], [1.64872782E12, 0.04218040233614537], [1.64872716E12, 0.09873417721518998], [1.6487277E12, 0.044814340588988526], [1.64872704E12, 0.07309941520467848], [1.6487271E12, 0.08429752066115705], [1.6487274E12, 0.04645161290322581], [1.64872794E12, 0.07272727272727281], [1.64872728E12, 0.05277044854881261], [1.64872734E12, 0.05609284332688595], [1.64872764E12, 0.04795396419437334], [1.64872722E12, 0.08475836431226762], [1.64872752E12, 0.04484304932735429], [1.64872758E12, 0.0523594053005817], [1.64872788E12, 0.056530214424951215]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64872794E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64872698E12, "maxY": 31482.0, "series": [{"data": [[1.64872746E12, 30362.0], [1.64872776E12, 30328.0], [1.64872782E12, 30321.0], [1.64872716E12, 30740.0], [1.6487277E12, 30407.0], [1.64872704E12, 31482.0], [1.6487271E12, 31001.0], [1.6487274E12, 30292.0], [1.64872794E12, 30290.0], [1.64872698E12, 76.0], [1.64872728E12, 30301.0], [1.64872734E12, 30276.0], [1.64872764E12, 30324.0], [1.64872722E12, 30498.0], [1.64872752E12, 30296.0], [1.64872758E12, 30367.0], [1.64872788E12, 30304.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64872746E12, 30224.0], [1.64872776E12, 30215.4], [1.64872782E12, 30213.0], [1.64872716E12, 30225.5], [1.6487277E12, 30221.9], [1.64872704E12, 13.0], [1.6487271E12, 30227.9], [1.6487274E12, 30215.0], [1.64872794E12, 30210.0], [1.64872698E12, 59.0], [1.64872728E12, 30210.0], [1.64872734E12, 30211.2], [1.64872764E12, 30230.0], [1.64872722E12, 30213.3], [1.64872752E12, 30227.3], [1.64872758E12, 30215.8], [1.64872788E12, 30212.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64872746E12, 30311.49], [1.64872776E12, 30285.44], [1.64872782E12, 30261.0], [1.64872716E12, 30468.0], [1.6487277E12, 30293.239999999998], [1.64872704E12, 30197.28], [1.6487271E12, 30641.87], [1.6487274E12, 30268.18], [1.64872794E12, 30274.4], [1.64872698E12, 66.71999999999935], [1.64872728E12, 30290.0], [1.64872734E12, 30262.22], [1.64872764E12, 30269.44], [1.64872722E12, 30317.03], [1.64872752E12, 30280.21], [1.64872758E12, 30335.88], [1.64872788E12, 30279.24]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64872746E12, 30240.75], [1.64872776E12, 30246.2], [1.64872782E12, 30234.0], [1.64872716E12, 30298.75], [1.6487277E12, 30246.45], [1.64872704E12, 12585.699999999999], [1.6487271E12, 30290.0], [1.6487274E12, 30235.4], [1.64872794E12, 30240.0], [1.64872698E12, 61.0], [1.64872728E12, 30238.0], [1.64872734E12, 30231.1], [1.64872764E12, 30252.0], [1.64872722E12, 30247.15], [1.64872752E12, 30252.0], [1.64872758E12, 30243.8], [1.64872788E12, 30234.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64872746E12, 29982.0], [1.64872776E12, 29963.0], [1.64872782E12, 29961.0], [1.64872716E12, 29077.0], [1.6487277E12, 29937.0], [1.64872704E12, 1.0], [1.6487271E12, 28618.0], [1.6487274E12, 29957.0], [1.64872794E12, 29971.0], [1.64872698E12, 0.0], [1.64872728E12, 29985.0], [1.64872734E12, 29947.0], [1.64872764E12, 29957.0], [1.64872722E12, 29895.0], [1.64872752E12, 29923.0], [1.64872758E12, 29965.0], [1.64872788E12, 29977.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64872746E12, 30150.5], [1.64872776E12, 30149.0], [1.64872782E12, 30152.0], [1.64872716E12, 30107.0], [1.6487277E12, 30149.0], [1.64872704E12, 10.0], [1.6487271E12, 30081.0], [1.6487274E12, 30148.0], [1.64872794E12, 30153.0], [1.64872698E12, 50.0], [1.64872728E12, 30149.0], [1.64872734E12, 30153.0], [1.64872764E12, 30154.5], [1.64872722E12, 30140.0], [1.64872752E12, 30159.5], [1.64872758E12, 30155.0], [1.64872788E12, 30146.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64872794E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 6.0, "maxY": 30312.0, "series": [{"data": [[856.0, 58.0], [877.0, 52.0], [869.0, 58.0], [959.0, 51.0], [948.0, 51.0], [980.0, 50.0], [996.0, 50.0], [6.0, 30147.5], [7.0, 30071.0], [8.0, 21171.5], [2209.0, 11.0], [9.0, 30142.0], [2573.0, 8.0], [10.0, 30107.0], [11.0, 29989.5], [12.0, 30080.0], [13.0, 30056.0], [3642.0, 8.0], [3662.0, 12.0], [14.0, 30072.0], [15.0, 30090.5], [16.0, 30130.0], [17.0, 30141.0], [18.0, 30135.0], [19.0, 30148.0], [20.0, 30149.0], [21.0, 30152.0], [22.0, 30144.0], [23.0, 30156.5], [24.0, 30145.0], [25.0, 30158.0], [26.0, 30163.0], [27.0, 30158.0], [28.0, 30156.0], [29.0, 30149.0], [30.0, 30157.0], [31.0, 30152.0], [32.0, 30158.5], [33.0, 30155.5], [34.0, 30156.0], [35.0, 30166.0], [37.0, 30097.0], [36.0, 30165.0], [39.0, 30152.5], [40.0, 30166.0], [41.0, 30067.0], [43.0, 30133.0], [42.0, 30151.0], [44.0, 30154.5], [45.0, 30061.0], [47.0, 30117.0], [46.0, 30172.0], [48.0, 30119.5], [51.0, 30160.0], [52.0, 30157.0], [53.0, 30188.0], [54.0, 30184.0], [55.0, 30151.5], [56.0, 30144.0], [59.0, 29843.0], [60.0, 30172.0], [75.0, 30071.0], [74.0, 30126.0], [86.0, 29972.0], [115.0, 30312.0], [116.0, 30179.0], [117.0, 30144.0], [119.0, 30166.5], [118.0, 30180.0], [120.0, 30195.0], [123.0, 30198.0], [121.0, 30197.0], [122.0, 30188.0], [124.0, 30168.5], [125.0, 30166.0], [453.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 30004.5], [9.0, 30003.0], [10.0, 30005.0], [11.0, 30007.0], [12.0, 30006.0], [13.0, 30003.5], [14.0, 30003.0], [15.0, 30002.0], [16.0, 30002.0], [17.0, 30002.0], [18.0, 30002.0], [19.0, 30002.0], [20.0, 30002.0], [21.0, 30002.0], [22.0, 30001.0], [23.0, 30001.0], [24.0, 30001.0], [25.0, 30001.0], [26.0, 30002.0], [27.0, 30001.0], [28.0, 30001.0], [29.0, 30001.0], [30.0, 30001.0], [31.0, 30001.0], [32.0, 30001.0], [33.0, 30001.0], [34.0, 30001.0], [35.0, 30001.0], [37.0, 30001.0], [36.0, 30001.0], [39.0, 30001.0], [40.0, 30001.0], [41.0, 30001.0], [43.0, 30001.0], [42.0, 30001.0], [44.0, 30001.0], [45.0, 30000.0], [47.0, 30001.0], [46.0, 30001.0], [48.0, 30001.0], [51.0, 30001.0], [52.0, 30001.0], [53.0, 30000.0], [54.0, 30001.0], [55.0, 30001.0], [56.0, 30001.0], [59.0, 30001.0], [60.0, 30001.0], [75.0, 30001.5], [74.0, 30002.0], [86.0, 15002.0], [115.0, 30001.0], [116.0, 30001.0], [117.0, 30001.0], [119.0, 30001.0], [118.0, 30001.0], [120.0, 30000.0], [123.0, 30001.0], [121.0, 30001.0], [122.0, 30001.0], [124.0, 30001.0], [125.0, 30001.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3662.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 7.5, "minX": 6.0, "maxY": 30295.0, "series": [{"data": [[856.0, 58.0], [877.0, 52.0], [869.0, 58.0], [959.0, 51.0], [948.0, 51.0], [980.0, 50.0], [996.0, 49.0], [6.0, 30135.5], [7.0, 30055.0], [8.0, 21153.5], [2209.0, 11.0], [9.0, 30098.0], [2573.0, 8.0], [10.0, 30087.0], [11.0, 29965.5], [12.0, 30061.0], [13.0, 30038.0], [3642.0, 7.5], [3662.0, 12.0], [14.0, 30046.0], [15.0, 30075.0], [16.0, 30117.0], [17.0, 30128.0], [18.0, 30121.0], [19.0, 30136.0], [20.0, 30137.0], [21.0, 30139.5], [22.0, 30127.0], [23.0, 30145.0], [24.0, 30132.0], [25.0, 30145.0], [26.0, 30150.0], [27.0, 30146.0], [28.0, 30143.0], [29.0, 30137.0], [30.0, 30146.0], [31.0, 30136.0], [32.0, 30145.5], [33.0, 30144.0], [34.0, 30144.0], [35.0, 30153.0], [37.0, 30085.0], [36.0, 30153.0], [39.0, 30141.0], [40.0, 30154.0], [41.0, 30054.0], [43.0, 30121.0], [42.0, 30139.0], [44.0, 30139.5], [45.0, 30046.0], [47.0, 30105.0], [46.0, 30156.5], [48.0, 30105.0], [51.0, 30147.5], [52.0, 30143.0], [53.0, 30176.0], [54.0, 30172.0], [55.0, 30140.5], [56.0, 30131.0], [59.0, 29831.0], [60.0, 30145.0], [75.0, 30054.0], [74.0, 30110.0], [86.0, 29945.0], [115.0, 30295.0], [116.0, 30160.5], [117.0, 30132.0], [119.0, 30153.5], [118.0, 30168.0], [120.0, 30183.0], [123.0, 30187.0], [121.0, 30184.0], [122.0, 30176.0], [124.0, 30152.5], [125.0, 30154.0], [453.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 30004.5], [9.0, 30003.0], [10.0, 30005.0], [11.0, 30007.0], [12.0, 30006.0], [13.0, 30003.5], [14.0, 30003.0], [15.0, 30002.0], [16.0, 30002.0], [17.0, 30002.0], [18.0, 30002.0], [19.0, 30002.0], [20.0, 30002.0], [21.0, 30002.0], [22.0, 30001.0], [23.0, 30001.0], [24.0, 30001.0], [25.0, 30001.0], [26.0, 30002.0], [27.0, 30001.0], [28.0, 30001.0], [29.0, 30001.0], [30.0, 30001.0], [31.0, 30001.0], [32.0, 30001.0], [33.0, 30001.0], [34.0, 30001.0], [35.0, 30001.0], [37.0, 30001.0], [36.0, 30001.0], [39.0, 30001.0], [40.0, 30001.0], [41.0, 30001.0], [43.0, 30001.0], [42.0, 30001.0], [44.0, 30001.0], [45.0, 30000.0], [47.0, 30001.0], [46.0, 30001.0], [48.0, 30001.0], [51.0, 30001.0], [52.0, 30001.0], [53.0, 30000.0], [54.0, 30001.0], [55.0, 30001.0], [56.0, 30001.0], [59.0, 30001.0], [60.0, 30001.0], [75.0, 30001.5], [74.0, 30002.0], [86.0, 15001.5], [115.0, 30001.0], [116.0, 30001.0], [117.0, 30001.0], [119.0, 30001.0], [118.0, 30001.0], [120.0, 30000.0], [123.0, 30001.0], [121.0, 30001.0], [122.0, 30001.0], [124.0, 30001.0], [125.0, 30001.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3662.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.64872698E12, "maxY": 189.91666666666666, "series": [{"data": [[1.64872746E12, 26.15], [1.64872776E12, 26.1], [1.64872782E12, 25.683333333333334], [1.64872716E12, 19.75], [1.6487277E12, 26.033333333333335], [1.64872704E12, 189.91666666666666], [1.6487271E12, 20.166666666666668], [1.6487274E12, 25.833333333333332], [1.64872794E12, 0.8333333333333334], [1.64872698E12, 168.85], [1.64872728E12, 25.266666666666666], [1.64872734E12, 25.85], [1.64872764E12, 26.066666666666666], [1.64872722E12, 22.416666666666668], [1.64872752E12, 26.016666666666666], [1.64872758E12, 25.783333333333335], [1.64872788E12, 25.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64872794E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.64872698E12, "maxY": 168.78333333333333, "series": [{"data": [[1.64872746E12, 4.866666666666666], [1.64872776E12, 4.916666666666667], [1.64872782E12, 4.983333333333333], [1.64872716E12, 12.066666666666666], [1.6487277E12, 4.833333333333333], [1.64872704E12, 11.866666666666667], [1.6487271E12, 12.1], [1.6487274E12, 4.95], [1.64872794E12, 2.65], [1.64872728E12, 4.983333333333333], [1.64872734E12, 4.8], [1.64872764E12, 4.8], [1.64872722E12, 8.266666666666667], [1.64872752E12, 4.8], [1.64872758E12, 4.85], [1.64872788E12, 4.85]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.64872698E12, 168.78333333333333], [1.64872704E12, 164.55]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.64872746E12, 11.766666666666667], [1.64872776E12, 11.716666666666667], [1.64872782E12, 11.633333333333333], [1.64872716E12, 4.566666666666666], [1.6487277E12, 11.8], [1.64872704E12, 2.6166666666666667], [1.6487271E12, 4.75], [1.6487274E12, 11.7], [1.64872794E12, 6.266666666666667], [1.64872728E12, 11.666666666666666], [1.64872734E12, 11.85], [1.64872764E12, 11.85], [1.64872722E12, 8.35], [1.64872752E12, 11.85], [1.64872758E12, 11.766666666666667], [1.64872788E12, 11.8]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.64872746E12, 9.516666666666667], [1.64872776E12, 9.466666666666667], [1.64872782E12, 9.066666666666666], [1.64872716E12, 3.1166666666666667], [1.6487277E12, 9.4], [1.64872704E12, 2.6166666666666667], [1.6487271E12, 3.316666666666667], [1.6487274E12, 9.183333333333334], [1.64872794E12, 0.25], [1.64872728E12, 8.616666666666667], [1.64872734E12, 9.2], [1.64872764E12, 9.416666666666666], [1.64872722E12, 5.8], [1.64872752E12, 9.366666666666667], [1.64872758E12, 9.166666666666666], [1.64872788E12, 9.0]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64872794E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.65, "minX": 1.64872698E12, "maxY": 168.78333333333333, "series": [{"data": [[1.64872746E12, 4.866666666666666], [1.64872776E12, 4.916666666666667], [1.64872782E12, 4.983333333333333], [1.64872716E12, 12.066666666666666], [1.6487277E12, 4.833333333333333], [1.64872704E12, 11.866666666666667], [1.6487271E12, 12.1], [1.6487274E12, 4.95], [1.64872794E12, 2.65], [1.64872728E12, 4.983333333333333], [1.64872734E12, 4.8], [1.64872764E12, 4.8], [1.64872722E12, 8.266666666666667], [1.64872752E12, 4.8], [1.64872758E12, 4.85], [1.64872788E12, 4.85]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.64872746E12, 21.283333333333335], [1.64872776E12, 21.183333333333334], [1.64872782E12, 20.7], [1.64872716E12, 7.683333333333334], [1.6487277E12, 21.2], [1.64872704E12, 5.233333333333333], [1.6487271E12, 8.066666666666666], [1.6487274E12, 20.883333333333333], [1.64872794E12, 6.516666666666667], [1.64872728E12, 20.283333333333335], [1.64872734E12, 21.05], [1.64872764E12, 21.266666666666666], [1.64872722E12, 14.15], [1.64872752E12, 21.216666666666665], [1.64872758E12, 20.933333333333334], [1.64872788E12, 20.8]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.64872698E12, 168.78333333333333], [1.64872704E12, 164.55]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64872794E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.65, "minX": 1.64872698E12, "maxY": 176.41666666666666, "series": [{"data": [[1.64872746E12, 4.866666666666666], [1.64872776E12, 4.916666666666667], [1.64872782E12, 4.983333333333333], [1.64872716E12, 12.066666666666666], [1.6487277E12, 4.833333333333333], [1.64872704E12, 176.41666666666666], [1.6487271E12, 12.1], [1.6487274E12, 4.95], [1.64872794E12, 2.65], [1.64872698E12, 168.78333333333333], [1.64872728E12, 4.983333333333333], [1.64872734E12, 4.8], [1.64872764E12, 4.8], [1.64872722E12, 8.266666666666667], [1.64872752E12, 4.8], [1.64872758E12, 4.85], [1.64872788E12, 4.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.64872746E12, 21.283333333333335], [1.64872776E12, 21.183333333333334], [1.64872782E12, 20.7], [1.64872716E12, 7.683333333333334], [1.6487277E12, 21.2], [1.64872704E12, 5.233333333333333], [1.6487271E12, 8.066666666666666], [1.6487274E12, 20.883333333333333], [1.64872794E12, 6.516666666666667], [1.64872728E12, 20.283333333333335], [1.64872734E12, 21.05], [1.64872764E12, 21.266666666666666], [1.64872722E12, 14.15], [1.64872752E12, 21.216666666666665], [1.64872758E12, 20.933333333333334], [1.64872788E12, 20.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64872794E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

