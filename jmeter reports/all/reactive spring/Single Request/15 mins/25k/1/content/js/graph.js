/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3114.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 3.0], [4.3, 3.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 3.0], [5.6, 3.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 3.0], [6.2, 3.0], [6.3, 3.0], [6.4, 3.0], [6.5, 3.0], [6.6, 3.0], [6.7, 3.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 4.0], [7.5, 4.0], [7.6, 4.0], [7.7, 4.0], [7.8, 4.0], [7.9, 4.0], [8.0, 4.0], [8.1, 4.0], [8.2, 4.0], [8.3, 4.0], [8.4, 4.0], [8.5, 4.0], [8.6, 4.0], [8.7, 4.0], [8.8, 4.0], [8.9, 4.0], [9.0, 4.0], [9.1, 4.0], [9.2, 4.0], [9.3, 4.0], [9.4, 4.0], [9.5, 4.0], [9.6, 4.0], [9.7, 4.0], [9.8, 4.0], [9.9, 4.0], [10.0, 4.0], [10.1, 4.0], [10.2, 4.0], [10.3, 4.0], [10.4, 4.0], [10.5, 4.0], [10.6, 4.0], [10.7, 4.0], [10.8, 4.0], [10.9, 4.0], [11.0, 4.0], [11.1, 4.0], [11.2, 4.0], [11.3, 4.0], [11.4, 4.0], [11.5, 4.0], [11.6, 4.0], [11.7, 4.0], [11.8, 4.0], [11.9, 4.0], [12.0, 4.0], [12.1, 4.0], [12.2, 4.0], [12.3, 4.0], [12.4, 4.0], [12.5, 4.0], [12.6, 4.0], [12.7, 4.0], [12.8, 4.0], [12.9, 4.0], [13.0, 4.0], [13.1, 4.0], [13.2, 5.0], [13.3, 5.0], [13.4, 5.0], [13.5, 5.0], [13.6, 5.0], [13.7, 5.0], [13.8, 5.0], [13.9, 5.0], [14.0, 5.0], [14.1, 5.0], [14.2, 5.0], [14.3, 5.0], [14.4, 5.0], [14.5, 5.0], [14.6, 5.0], [14.7, 5.0], [14.8, 5.0], [14.9, 5.0], [15.0, 5.0], [15.1, 5.0], [15.2, 5.0], [15.3, 5.0], [15.4, 5.0], [15.5, 5.0], [15.6, 5.0], [15.7, 5.0], [15.8, 5.0], [15.9, 5.0], [16.0, 5.0], [16.1, 5.0], [16.2, 5.0], [16.3, 5.0], [16.4, 5.0], [16.5, 5.0], [16.6, 5.0], [16.7, 5.0], [16.8, 5.0], [16.9, 5.0], [17.0, 5.0], [17.1, 5.0], [17.2, 5.0], [17.3, 5.0], [17.4, 5.0], [17.5, 5.0], [17.6, 5.0], [17.7, 5.0], [17.8, 5.0], [17.9, 5.0], [18.0, 5.0], [18.1, 5.0], [18.2, 5.0], [18.3, 5.0], [18.4, 5.0], [18.5, 5.0], [18.6, 5.0], [18.7, 5.0], [18.8, 5.0], [18.9, 5.0], [19.0, 5.0], [19.1, 5.0], [19.2, 5.0], [19.3, 5.0], [19.4, 5.0], [19.5, 5.0], [19.6, 5.0], [19.7, 5.0], [19.8, 5.0], [19.9, 5.0], [20.0, 5.0], [20.1, 5.0], [20.2, 5.0], [20.3, 5.0], [20.4, 5.0], [20.5, 5.0], [20.6, 5.0], [20.7, 5.0], [20.8, 5.0], [20.9, 5.0], [21.0, 5.0], [21.1, 5.0], [21.2, 5.0], [21.3, 5.0], [21.4, 5.0], [21.5, 5.0], [21.6, 5.0], [21.7, 5.0], [21.8, 5.0], [21.9, 5.0], [22.0, 5.0], [22.1, 5.0], [22.2, 5.0], [22.3, 5.0], [22.4, 5.0], [22.5, 5.0], [22.6, 5.0], [22.7, 5.0], [22.8, 5.0], [22.9, 5.0], [23.0, 5.0], [23.1, 5.0], [23.2, 5.0], [23.3, 5.0], [23.4, 5.0], [23.5, 5.0], [23.6, 5.0], [23.7, 5.0], [23.8, 5.0], [23.9, 5.0], [24.0, 5.0], [24.1, 5.0], [24.2, 5.0], [24.3, 5.0], [24.4, 5.0], [24.5, 5.0], [24.6, 5.0], [24.7, 5.0], [24.8, 5.0], [24.9, 5.0], [25.0, 5.0], [25.1, 5.0], [25.2, 5.0], [25.3, 5.0], [25.4, 5.0], [25.5, 5.0], [25.6, 5.0], [25.7, 5.0], [25.8, 5.0], [25.9, 5.0], [26.0, 5.0], [26.1, 5.0], [26.2, 5.0], [26.3, 5.0], [26.4, 5.0], [26.5, 5.0], [26.6, 5.0], [26.7, 5.0], [26.8, 5.0], [26.9, 5.0], [27.0, 5.0], [27.1, 5.0], [27.2, 5.0], [27.3, 5.0], [27.4, 5.0], [27.5, 5.0], [27.6, 5.0], [27.7, 5.0], [27.8, 5.0], [27.9, 5.0], [28.0, 5.0], [28.1, 5.0], [28.2, 5.0], [28.3, 5.0], [28.4, 5.0], [28.5, 5.0], [28.6, 5.0], [28.7, 5.0], [28.8, 5.0], [28.9, 5.0], [29.0, 5.0], [29.1, 5.0], [29.2, 5.0], [29.3, 5.0], [29.4, 5.0], [29.5, 5.0], [29.6, 5.0], [29.7, 5.0], [29.8, 6.0], [29.9, 6.0], [30.0, 6.0], [30.1, 6.0], [30.2, 6.0], [30.3, 6.0], [30.4, 6.0], [30.5, 6.0], [30.6, 6.0], [30.7, 6.0], [30.8, 6.0], [30.9, 6.0], [31.0, 6.0], [31.1, 6.0], [31.2, 6.0], [31.3, 6.0], [31.4, 6.0], [31.5, 6.0], [31.6, 6.0], [31.7, 6.0], [31.8, 6.0], [31.9, 6.0], [32.0, 6.0], [32.1, 6.0], [32.2, 6.0], [32.3, 6.0], [32.4, 6.0], [32.5, 6.0], [32.6, 6.0], [32.7, 6.0], [32.8, 6.0], [32.9, 6.0], [33.0, 6.0], [33.1, 6.0], [33.2, 6.0], [33.3, 6.0], [33.4, 6.0], [33.5, 6.0], [33.6, 6.0], [33.7, 6.0], [33.8, 6.0], [33.9, 6.0], [34.0, 6.0], [34.1, 6.0], [34.2, 6.0], [34.3, 6.0], [34.4, 6.0], [34.5, 6.0], [34.6, 6.0], [34.7, 6.0], [34.8, 6.0], [34.9, 6.0], [35.0, 6.0], [35.1, 6.0], [35.2, 6.0], [35.3, 6.0], [35.4, 6.0], [35.5, 6.0], [35.6, 6.0], [35.7, 6.0], [35.8, 6.0], [35.9, 6.0], [36.0, 6.0], [36.1, 6.0], [36.2, 6.0], [36.3, 6.0], [36.4, 6.0], [36.5, 6.0], [36.6, 6.0], [36.7, 6.0], [36.8, 6.0], [36.9, 6.0], [37.0, 6.0], [37.1, 6.0], [37.2, 6.0], [37.3, 6.0], [37.4, 6.0], [37.5, 6.0], [37.6, 6.0], [37.7, 6.0], [37.8, 6.0], [37.9, 6.0], [38.0, 6.0], [38.1, 6.0], [38.2, 6.0], [38.3, 6.0], [38.4, 6.0], [38.5, 6.0], [38.6, 6.0], [38.7, 6.0], [38.8, 6.0], [38.9, 6.0], [39.0, 6.0], [39.1, 6.0], [39.2, 6.0], [39.3, 6.0], [39.4, 6.0], [39.5, 6.0], [39.6, 6.0], [39.7, 6.0], [39.8, 6.0], [39.9, 6.0], [40.0, 6.0], [40.1, 6.0], [40.2, 6.0], [40.3, 6.0], [40.4, 6.0], [40.5, 6.0], [40.6, 6.0], [40.7, 6.0], [40.8, 6.0], [40.9, 6.0], [41.0, 6.0], [41.1, 6.0], [41.2, 6.0], [41.3, 6.0], [41.4, 6.0], [41.5, 6.0], [41.6, 6.0], [41.7, 6.0], [41.8, 6.0], [41.9, 6.0], [42.0, 6.0], [42.1, 6.0], [42.2, 6.0], [42.3, 6.0], [42.4, 6.0], [42.5, 6.0], [42.6, 6.0], [42.7, 6.0], [42.8, 6.0], [42.9, 6.0], [43.0, 6.0], [43.1, 6.0], [43.2, 6.0], [43.3, 6.0], [43.4, 6.0], [43.5, 6.0], [43.6, 6.0], [43.7, 6.0], [43.8, 6.0], [43.9, 6.0], [44.0, 6.0], [44.1, 6.0], [44.2, 6.0], [44.3, 6.0], [44.4, 6.0], [44.5, 6.0], [44.6, 6.0], [44.7, 6.0], [44.8, 6.0], [44.9, 6.0], [45.0, 6.0], [45.1, 6.0], [45.2, 6.0], [45.3, 6.0], [45.4, 6.0], [45.5, 6.0], [45.6, 6.0], [45.7, 6.0], [45.8, 6.0], [45.9, 6.0], [46.0, 6.0], [46.1, 6.0], [46.2, 6.0], [46.3, 6.0], [46.4, 6.0], [46.5, 6.0], [46.6, 6.0], [46.7, 6.0], [46.8, 6.0], [46.9, 6.0], [47.0, 6.0], [47.1, 6.0], [47.2, 6.0], [47.3, 6.0], [47.4, 6.0], [47.5, 6.0], [47.6, 6.0], [47.7, 6.0], [47.8, 6.0], [47.9, 6.0], [48.0, 6.0], [48.1, 6.0], [48.2, 6.0], [48.3, 6.0], [48.4, 6.0], [48.5, 6.0], [48.6, 6.0], [48.7, 6.0], [48.8, 6.0], [48.9, 6.0], [49.0, 6.0], [49.1, 6.0], [49.2, 6.0], [49.3, 6.0], [49.4, 6.0], [49.5, 6.0], [49.6, 6.0], [49.7, 6.0], [49.8, 6.0], [49.9, 6.0], [50.0, 6.0], [50.1, 6.0], [50.2, 6.0], [50.3, 6.0], [50.4, 6.0], [50.5, 6.0], [50.6, 6.0], [50.7, 6.0], [50.8, 6.0], [50.9, 6.0], [51.0, 6.0], [51.1, 6.0], [51.2, 6.0], [51.3, 6.0], [51.4, 6.0], [51.5, 6.0], [51.6, 6.0], [51.7, 6.0], [51.8, 6.0], [51.9, 7.0], [52.0, 7.0], [52.1, 7.0], [52.2, 7.0], [52.3, 7.0], [52.4, 7.0], [52.5, 7.0], [52.6, 7.0], [52.7, 7.0], [52.8, 7.0], [52.9, 7.0], [53.0, 7.0], [53.1, 7.0], [53.2, 7.0], [53.3, 7.0], [53.4, 7.0], [53.5, 7.0], [53.6, 7.0], [53.7, 7.0], [53.8, 7.0], [53.9, 7.0], [54.0, 7.0], [54.1, 7.0], [54.2, 7.0], [54.3, 7.0], [54.4, 7.0], [54.5, 7.0], [54.6, 7.0], [54.7, 7.0], [54.8, 7.0], [54.9, 7.0], [55.0, 7.0], [55.1, 7.0], [55.2, 7.0], [55.3, 7.0], [55.4, 7.0], [55.5, 7.0], [55.6, 7.0], [55.7, 7.0], [55.8, 7.0], [55.9, 7.0], [56.0, 7.0], [56.1, 7.0], [56.2, 7.0], [56.3, 7.0], [56.4, 7.0], [56.5, 7.0], [56.6, 7.0], [56.7, 7.0], [56.8, 7.0], [56.9, 7.0], [57.0, 7.0], [57.1, 7.0], [57.2, 7.0], [57.3, 7.0], [57.4, 7.0], [57.5, 7.0], [57.6, 7.0], [57.7, 7.0], [57.8, 7.0], [57.9, 7.0], [58.0, 7.0], [58.1, 7.0], [58.2, 7.0], [58.3, 7.0], [58.4, 7.0], [58.5, 7.0], [58.6, 7.0], [58.7, 7.0], [58.8, 7.0], [58.9, 7.0], [59.0, 7.0], [59.1, 7.0], [59.2, 7.0], [59.3, 7.0], [59.4, 7.0], [59.5, 7.0], [59.6, 7.0], [59.7, 7.0], [59.8, 7.0], [59.9, 7.0], [60.0, 7.0], [60.1, 7.0], [60.2, 7.0], [60.3, 7.0], [60.4, 7.0], [60.5, 7.0], [60.6, 7.0], [60.7, 7.0], [60.8, 7.0], [60.9, 7.0], [61.0, 7.0], [61.1, 7.0], [61.2, 7.0], [61.3, 7.0], [61.4, 7.0], [61.5, 7.0], [61.6, 7.0], [61.7, 7.0], [61.8, 7.0], [61.9, 7.0], [62.0, 7.0], [62.1, 7.0], [62.2, 7.0], [62.3, 7.0], [62.4, 7.0], [62.5, 7.0], [62.6, 7.0], [62.7, 7.0], [62.8, 7.0], [62.9, 7.0], [63.0, 7.0], [63.1, 7.0], [63.2, 7.0], [63.3, 7.0], [63.4, 7.0], [63.5, 7.0], [63.6, 7.0], [63.7, 7.0], [63.8, 7.0], [63.9, 7.0], [64.0, 7.0], [64.1, 7.0], [64.2, 7.0], [64.3, 7.0], [64.4, 7.0], [64.5, 7.0], [64.6, 7.0], [64.7, 7.0], [64.8, 7.0], [64.9, 7.0], [65.0, 7.0], [65.1, 7.0], [65.2, 7.0], [65.3, 7.0], [65.4, 7.0], [65.5, 7.0], [65.6, 7.0], [65.7, 7.0], [65.8, 7.0], [65.9, 7.0], [66.0, 7.0], [66.1, 7.0], [66.2, 7.0], [66.3, 7.0], [66.4, 7.0], [66.5, 7.0], [66.6, 7.0], [66.7, 7.0], [66.8, 7.0], [66.9, 7.0], [67.0, 7.0], [67.1, 7.0], [67.2, 7.0], [67.3, 7.0], [67.4, 7.0], [67.5, 7.0], [67.6, 7.0], [67.7, 7.0], [67.8, 7.0], [67.9, 7.0], [68.0, 7.0], [68.1, 7.0], [68.2, 7.0], [68.3, 7.0], [68.4, 8.0], [68.5, 8.0], [68.6, 8.0], [68.7, 8.0], [68.8, 8.0], [68.9, 8.0], [69.0, 8.0], [69.1, 8.0], [69.2, 8.0], [69.3, 8.0], [69.4, 8.0], [69.5, 8.0], [69.6, 8.0], [69.7, 8.0], [69.8, 8.0], [69.9, 8.0], [70.0, 8.0], [70.1, 8.0], [70.2, 8.0], [70.3, 8.0], [70.4, 8.0], [70.5, 8.0], [70.6, 8.0], [70.7, 8.0], [70.8, 8.0], [70.9, 8.0], [71.0, 8.0], [71.1, 8.0], [71.2, 8.0], [71.3, 8.0], [71.4, 8.0], [71.5, 8.0], [71.6, 8.0], [71.7, 8.0], [71.8, 8.0], [71.9, 8.0], [72.0, 8.0], [72.1, 8.0], [72.2, 8.0], [72.3, 8.0], [72.4, 8.0], [72.5, 8.0], [72.6, 8.0], [72.7, 8.0], [72.8, 8.0], [72.9, 8.0], [73.0, 8.0], [73.1, 8.0], [73.2, 8.0], [73.3, 8.0], [73.4, 8.0], [73.5, 8.0], [73.6, 8.0], [73.7, 8.0], [73.8, 8.0], [73.9, 8.0], [74.0, 8.0], [74.1, 8.0], [74.2, 8.0], [74.3, 8.0], [74.4, 8.0], [74.5, 8.0], [74.6, 8.0], [74.7, 8.0], [74.8, 8.0], [74.9, 8.0], [75.0, 8.0], [75.1, 8.0], [75.2, 8.0], [75.3, 8.0], [75.4, 8.0], [75.5, 8.0], [75.6, 8.0], [75.7, 8.0], [75.8, 8.0], [75.9, 8.0], [76.0, 8.0], [76.1, 8.0], [76.2, 8.0], [76.3, 8.0], [76.4, 8.0], [76.5, 8.0], [76.6, 8.0], [76.7, 8.0], [76.8, 8.0], [76.9, 8.0], [77.0, 8.0], [77.1, 8.0], [77.2, 8.0], [77.3, 8.0], [77.4, 8.0], [77.5, 8.0], [77.6, 8.0], [77.7, 8.0], [77.8, 8.0], [77.9, 8.0], [78.0, 8.0], [78.1, 8.0], [78.2, 9.0], [78.3, 9.0], [78.4, 9.0], [78.5, 9.0], [78.6, 9.0], [78.7, 9.0], [78.8, 9.0], [78.9, 9.0], [79.0, 9.0], [79.1, 9.0], [79.2, 9.0], [79.3, 9.0], [79.4, 9.0], [79.5, 9.0], [79.6, 9.0], [79.7, 9.0], [79.8, 9.0], [79.9, 9.0], [80.0, 9.0], [80.1, 9.0], [80.2, 9.0], [80.3, 9.0], [80.4, 9.0], [80.5, 9.0], [80.6, 9.0], [80.7, 9.0], [80.8, 9.0], [80.9, 9.0], [81.0, 9.0], [81.1, 9.0], [81.2, 9.0], [81.3, 9.0], [81.4, 9.0], [81.5, 9.0], [81.6, 9.0], [81.7, 9.0], [81.8, 9.0], [81.9, 9.0], [82.0, 9.0], [82.1, 9.0], [82.2, 9.0], [82.3, 9.0], [82.4, 9.0], [82.5, 9.0], [82.6, 9.0], [82.7, 9.0], [82.8, 9.0], [82.9, 9.0], [83.0, 9.0], [83.1, 9.0], [83.2, 9.0], [83.3, 9.0], [83.4, 9.0], [83.5, 9.0], [83.6, 9.0], [83.7, 9.0], [83.8, 9.0], [83.9, 9.0], [84.0, 10.0], [84.1, 10.0], [84.2, 10.0], [84.3, 10.0], [84.4, 10.0], [84.5, 10.0], [84.6, 10.0], [84.7, 10.0], [84.8, 10.0], [84.9, 10.0], [85.0, 10.0], [85.1, 10.0], [85.2, 10.0], [85.3, 10.0], [85.4, 10.0], [85.5, 10.0], [85.6, 10.0], [85.7, 10.0], [85.8, 10.0], [85.9, 10.0], [86.0, 10.0], [86.1, 10.0], [86.2, 10.0], [86.3, 10.0], [86.4, 10.0], [86.5, 10.0], [86.6, 10.0], [86.7, 10.0], [86.8, 10.0], [86.9, 10.0], [87.0, 10.0], [87.1, 10.0], [87.2, 10.0], [87.3, 10.0], [87.4, 11.0], [87.5, 11.0], [87.6, 11.0], [87.7, 11.0], [87.8, 11.0], [87.9, 11.0], [88.0, 11.0], [88.1, 11.0], [88.2, 11.0], [88.3, 11.0], [88.4, 11.0], [88.5, 11.0], [88.6, 11.0], [88.7, 11.0], [88.8, 11.0], [88.9, 11.0], [89.0, 11.0], [89.1, 11.0], [89.2, 11.0], [89.3, 11.0], [89.4, 11.0], [89.5, 11.0], [89.6, 11.0], [89.7, 12.0], [89.8, 12.0], [89.9, 12.0], [90.0, 12.0], [90.1, 12.0], [90.2, 12.0], [90.3, 12.0], [90.4, 12.0], [90.5, 12.0], [90.6, 12.0], [90.7, 12.0], [90.8, 12.0], [90.9, 12.0], [91.0, 12.0], [91.1, 12.0], [91.2, 12.0], [91.3, 12.0], [91.4, 12.0], [91.5, 12.0], [91.6, 12.0], [91.7, 12.0], [91.8, 12.0], [91.9, 13.0], [92.0, 13.0], [92.1, 13.0], [92.2, 13.0], [92.3, 13.0], [92.4, 13.0], [92.5, 13.0], [92.6, 13.0], [92.7, 13.0], [92.8, 13.0], [92.9, 13.0], [93.0, 13.0], [93.1, 13.0], [93.2, 13.0], [93.3, 13.0], [93.4, 13.0], [93.5, 13.0], [93.6, 13.0], [93.7, 14.0], [93.8, 14.0], [93.9, 14.0], [94.0, 14.0], [94.1, 14.0], [94.2, 14.0], [94.3, 14.0], [94.4, 14.0], [94.5, 14.0], [94.6, 14.0], [94.7, 14.0], [94.8, 14.0], [94.9, 14.0], [95.0, 14.0], [95.1, 14.0], [95.2, 14.0], [95.3, 15.0], [95.4, 15.0], [95.5, 15.0], [95.6, 15.0], [95.7, 15.0], [95.8, 15.0], [95.9, 15.0], [96.0, 15.0], [96.1, 15.0], [96.2, 15.0], [96.3, 15.0], [96.4, 15.0], [96.5, 16.0], [96.6, 16.0], [96.7, 16.0], [96.8, 16.0], [96.9, 16.0], [97.0, 16.0], [97.1, 16.0], [97.2, 16.0], [97.3, 17.0], [97.4, 17.0], [97.5, 17.0], [97.6, 17.0], [97.7, 17.0], [97.8, 18.0], [97.9, 18.0], [98.0, 18.0], [98.1, 18.0], [98.2, 18.0], [98.3, 19.0], [98.4, 19.0], [98.5, 19.0], [98.6, 19.0], [98.7, 20.0], [98.8, 20.0], [98.9, 21.0], [99.0, 21.0], [99.1, 22.0], [99.2, 23.0], [99.3, 24.0], [99.4, 25.0], [99.5, 28.0], [99.6, 31.0], [99.7, 39.0], [99.8, 48.0], [99.9, 174.0], [100.0, 1025.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 115.0], [0.1, 136.0], [0.2, 156.0], [0.3, 210.0], [0.4, 226.0], [0.5, 231.0], [0.6, 235.0], [0.7, 237.0], [0.8, 240.0], [0.9, 241.0], [1.0, 243.0], [1.1, 244.0], [1.2, 245.0], [1.3, 246.0], [1.4, 247.0], [1.5, 248.0], [1.6, 249.0], [1.7, 250.0], [1.8, 251.0], [1.9, 252.0], [2.0, 252.0], [2.1, 253.0], [2.2, 254.0], [2.3, 255.0], [2.4, 255.0], [2.5, 256.0], [2.6, 257.0], [2.7, 257.0], [2.8, 258.0], [2.9, 259.0], [3.0, 259.0], [3.1, 260.0], [3.2, 261.0], [3.3, 261.0], [3.4, 262.0], [3.5, 263.0], [3.6, 263.0], [3.7, 264.0], [3.8, 265.0], [3.9, 266.0], [4.0, 266.0], [4.1, 267.0], [4.2, 268.0], [4.3, 268.0], [4.4, 269.0], [4.5, 270.0], [4.6, 271.0], [4.7, 272.0], [4.8, 272.0], [4.9, 273.0], [5.0, 274.0], [5.1, 275.0], [5.2, 277.0], [5.3, 278.0], [5.4, 279.0], [5.5, 280.0], [5.6, 281.0], [5.7, 282.0], [5.8, 284.0], [5.9, 285.0], [6.0, 287.0], [6.1, 289.0], [6.2, 291.0], [6.3, 294.0], [6.4, 296.0], [6.5, 299.0], [6.6, 302.0], [6.7, 305.0], [6.8, 309.0], [6.9, 312.0], [7.0, 316.0], [7.1, 319.0], [7.2, 323.0], [7.3, 327.0], [7.4, 329.0], [7.5, 331.0], [7.6, 333.0], [7.7, 335.0], [7.8, 337.0], [7.9, 338.0], [8.0, 339.0], [8.1, 340.0], [8.2, 342.0], [8.3, 343.0], [8.4, 344.0], [8.5, 344.0], [8.6, 345.0], [8.7, 346.0], [8.8, 347.0], [8.9, 347.0], [9.0, 348.0], [9.1, 349.0], [9.2, 350.0], [9.3, 350.0], [9.4, 351.0], [9.5, 351.0], [9.6, 352.0], [9.7, 353.0], [9.8, 353.0], [9.9, 354.0], [10.0, 354.0], [10.1, 355.0], [10.2, 355.0], [10.3, 356.0], [10.4, 356.0], [10.5, 357.0], [10.6, 357.0], [10.7, 358.0], [10.8, 358.0], [10.9, 359.0], [11.0, 359.0], [11.1, 360.0], [11.2, 360.0], [11.3, 360.0], [11.4, 361.0], [11.5, 361.0], [11.6, 361.0], [11.7, 362.0], [11.8, 362.0], [11.9, 363.0], [12.0, 363.0], [12.1, 363.0], [12.2, 364.0], [12.3, 364.0], [12.4, 364.0], [12.5, 365.0], [12.6, 365.0], [12.7, 365.0], [12.8, 365.0], [12.9, 366.0], [13.0, 366.0], [13.1, 366.0], [13.2, 366.0], [13.3, 367.0], [13.4, 367.0], [13.5, 367.0], [13.6, 368.0], [13.7, 368.0], [13.8, 368.0], [13.9, 368.0], [14.0, 368.0], [14.1, 369.0], [14.2, 369.0], [14.3, 369.0], [14.4, 369.0], [14.5, 370.0], [14.6, 370.0], [14.7, 370.0], [14.8, 370.0], [14.9, 371.0], [15.0, 371.0], [15.1, 371.0], [15.2, 371.0], [15.3, 371.0], [15.4, 372.0], [15.5, 372.0], [15.6, 372.0], [15.7, 372.0], [15.8, 372.0], [15.9, 373.0], [16.0, 373.0], [16.1, 373.0], [16.2, 373.0], [16.3, 373.0], [16.4, 374.0], [16.5, 374.0], [16.6, 374.0], [16.7, 374.0], [16.8, 374.0], [16.9, 374.0], [17.0, 375.0], [17.1, 375.0], [17.2, 375.0], [17.3, 375.0], [17.4, 375.0], [17.5, 376.0], [17.6, 376.0], [17.7, 376.0], [17.8, 376.0], [17.9, 376.0], [18.0, 376.0], [18.1, 377.0], [18.2, 377.0], [18.3, 377.0], [18.4, 377.0], [18.5, 377.0], [18.6, 377.0], [18.7, 378.0], [18.8, 378.0], [18.9, 378.0], [19.0, 378.0], [19.1, 378.0], [19.2, 378.0], [19.3, 379.0], [19.4, 379.0], [19.5, 379.0], [19.6, 379.0], [19.7, 379.0], [19.8, 379.0], [19.9, 379.0], [20.0, 380.0], [20.1, 380.0], [20.2, 380.0], [20.3, 380.0], [20.4, 380.0], [20.5, 380.0], [20.6, 380.0], [20.7, 381.0], [20.8, 381.0], [20.9, 381.0], [21.0, 381.0], [21.1, 381.0], [21.2, 381.0], [21.3, 381.0], [21.4, 382.0], [21.5, 382.0], [21.6, 382.0], [21.7, 382.0], [21.8, 382.0], [21.9, 382.0], [22.0, 382.0], [22.1, 383.0], [22.2, 383.0], [22.3, 383.0], [22.4, 383.0], [22.5, 383.0], [22.6, 383.0], [22.7, 383.0], [22.8, 384.0], [22.9, 384.0], [23.0, 384.0], [23.1, 384.0], [23.2, 384.0], [23.3, 384.0], [23.4, 384.0], [23.5, 385.0], [23.6, 385.0], [23.7, 385.0], [23.8, 385.0], [23.9, 385.0], [24.0, 385.0], [24.1, 385.0], [24.2, 386.0], [24.3, 386.0], [24.4, 386.0], [24.5, 386.0], [24.6, 386.0], [24.7, 386.0], [24.8, 386.0], [24.9, 387.0], [25.0, 387.0], [25.1, 387.0], [25.2, 387.0], [25.3, 387.0], [25.4, 387.0], [25.5, 387.0], [25.6, 387.0], [25.7, 388.0], [25.8, 388.0], [25.9, 388.0], [26.0, 388.0], [26.1, 388.0], [26.2, 388.0], [26.3, 388.0], [26.4, 389.0], [26.5, 389.0], [26.6, 389.0], [26.7, 389.0], [26.8, 389.0], [26.9, 389.0], [27.0, 389.0], [27.1, 389.0], [27.2, 390.0], [27.3, 390.0], [27.4, 390.0], [27.5, 390.0], [27.6, 390.0], [27.7, 390.0], [27.8, 390.0], [27.9, 391.0], [28.0, 391.0], [28.1, 391.0], [28.2, 391.0], [28.3, 391.0], [28.4, 391.0], [28.5, 391.0], [28.6, 392.0], [28.7, 392.0], [28.8, 392.0], [28.9, 392.0], [29.0, 392.0], [29.1, 392.0], [29.2, 392.0], [29.3, 393.0], [29.4, 393.0], [29.5, 393.0], [29.6, 393.0], [29.7, 393.0], [29.8, 393.0], [29.9, 394.0], [30.0, 394.0], [30.1, 394.0], [30.2, 394.0], [30.3, 394.0], [30.4, 394.0], [30.5, 394.0], [30.6, 394.0], [30.7, 395.0], [30.8, 395.0], [30.9, 395.0], [31.0, 395.0], [31.1, 395.0], [31.2, 395.0], [31.3, 396.0], [31.4, 396.0], [31.5, 396.0], [31.6, 396.0], [31.7, 396.0], [31.8, 396.0], [31.9, 396.0], [32.0, 397.0], [32.1, 397.0], [32.2, 397.0], [32.3, 397.0], [32.4, 397.0], [32.5, 397.0], [32.6, 397.0], [32.7, 398.0], [32.8, 398.0], [32.9, 398.0], [33.0, 398.0], [33.1, 398.0], [33.2, 398.0], [33.3, 399.0], [33.4, 399.0], [33.5, 399.0], [33.6, 399.0], [33.7, 399.0], [33.8, 399.0], [33.9, 399.0], [34.0, 400.0], [34.1, 400.0], [34.2, 400.0], [34.3, 400.0], [34.4, 400.0], [34.5, 400.0], [34.6, 401.0], [34.7, 401.0], [34.8, 401.0], [34.9, 401.0], [35.0, 401.0], [35.1, 401.0], [35.2, 402.0], [35.3, 402.0], [35.4, 402.0], [35.5, 402.0], [35.6, 402.0], [35.7, 403.0], [35.8, 403.0], [35.9, 403.0], [36.0, 403.0], [36.1, 403.0], [36.2, 403.0], [36.3, 404.0], [36.4, 404.0], [36.5, 404.0], [36.6, 404.0], [36.7, 404.0], [36.8, 404.0], [36.9, 405.0], [37.0, 405.0], [37.1, 405.0], [37.2, 405.0], [37.3, 406.0], [37.4, 406.0], [37.5, 406.0], [37.6, 406.0], [37.7, 406.0], [37.8, 407.0], [37.9, 407.0], [38.0, 407.0], [38.1, 407.0], [38.2, 407.0], [38.3, 408.0], [38.4, 408.0], [38.5, 408.0], [38.6, 408.0], [38.7, 408.0], [38.8, 409.0], [38.9, 409.0], [39.0, 409.0], [39.1, 409.0], [39.2, 409.0], [39.3, 410.0], [39.4, 410.0], [39.5, 410.0], [39.6, 410.0], [39.7, 411.0], [39.8, 411.0], [39.9, 411.0], [40.0, 411.0], [40.1, 411.0], [40.2, 412.0], [40.3, 412.0], [40.4, 412.0], [40.5, 412.0], [40.6, 413.0], [40.7, 413.0], [40.8, 413.0], [40.9, 413.0], [41.0, 414.0], [41.1, 414.0], [41.2, 414.0], [41.3, 414.0], [41.4, 415.0], [41.5, 415.0], [41.6, 415.0], [41.7, 416.0], [41.8, 416.0], [41.9, 416.0], [42.0, 416.0], [42.1, 416.0], [42.2, 417.0], [42.3, 417.0], [42.4, 417.0], [42.5, 418.0], [42.6, 418.0], [42.7, 418.0], [42.8, 419.0], [42.9, 419.0], [43.0, 419.0], [43.1, 419.0], [43.2, 420.0], [43.3, 420.0], [43.4, 420.0], [43.5, 421.0], [43.6, 421.0], [43.7, 421.0], [43.8, 422.0], [43.9, 422.0], [44.0, 422.0], [44.1, 423.0], [44.2, 423.0], [44.3, 423.0], [44.4, 424.0], [44.5, 424.0], [44.6, 424.0], [44.7, 425.0], [44.8, 425.0], [44.9, 425.0], [45.0, 426.0], [45.1, 426.0], [45.2, 426.0], [45.3, 427.0], [45.4, 427.0], [45.5, 427.0], [45.6, 428.0], [45.7, 428.0], [45.8, 428.0], [45.9, 429.0], [46.0, 429.0], [46.1, 430.0], [46.2, 430.0], [46.3, 431.0], [46.4, 431.0], [46.5, 431.0], [46.6, 432.0], [46.7, 432.0], [46.8, 433.0], [46.9, 433.0], [47.0, 434.0], [47.1, 434.0], [47.2, 434.0], [47.3, 435.0], [47.4, 435.0], [47.5, 436.0], [47.6, 436.0], [47.7, 437.0], [47.8, 437.0], [47.9, 438.0], [48.0, 438.0], [48.1, 438.0], [48.2, 439.0], [48.3, 439.0], [48.4, 440.0], [48.5, 440.0], [48.6, 441.0], [48.7, 441.0], [48.8, 442.0], [48.9, 442.0], [49.0, 443.0], [49.1, 443.0], [49.2, 444.0], [49.3, 444.0], [49.4, 445.0], [49.5, 446.0], [49.6, 446.0], [49.7, 447.0], [49.8, 447.0], [49.9, 448.0], [50.0, 448.0], [50.1, 449.0], [50.2, 449.0], [50.3, 450.0], [50.4, 450.0], [50.5, 451.0], [50.6, 452.0], [50.7, 452.0], [50.8, 453.0], [50.9, 454.0], [51.0, 454.0], [51.1, 455.0], [51.2, 455.0], [51.3, 456.0], [51.4, 456.0], [51.5, 457.0], [51.6, 457.0], [51.7, 458.0], [51.8, 458.0], [51.9, 459.0], [52.0, 460.0], [52.1, 460.0], [52.2, 461.0], [52.3, 461.0], [52.4, 462.0], [52.5, 462.0], [52.6, 463.0], [52.7, 463.0], [52.8, 464.0], [52.9, 464.0], [53.0, 465.0], [53.1, 466.0], [53.2, 466.0], [53.3, 467.0], [53.4, 468.0], [53.5, 468.0], [53.6, 469.0], [53.7, 469.0], [53.8, 470.0], [53.9, 471.0], [54.0, 471.0], [54.1, 472.0], [54.2, 473.0], [54.3, 473.0], [54.4, 474.0], [54.5, 475.0], [54.6, 475.0], [54.7, 476.0], [54.8, 476.0], [54.9, 477.0], [55.0, 478.0], [55.1, 478.0], [55.2, 479.0], [55.3, 479.0], [55.4, 480.0], [55.5, 481.0], [55.6, 481.0], [55.7, 482.0], [55.8, 482.0], [55.9, 483.0], [56.0, 484.0], [56.1, 484.0], [56.2, 485.0], [56.3, 485.0], [56.4, 486.0], [56.5, 486.0], [56.6, 487.0], [56.7, 488.0], [56.8, 488.0], [56.9, 489.0], [57.0, 489.0], [57.1, 490.0], [57.2, 490.0], [57.3, 491.0], [57.4, 491.0], [57.5, 492.0], [57.6, 492.0], [57.7, 492.0], [57.8, 493.0], [57.9, 493.0], [58.0, 494.0], [58.1, 494.0], [58.2, 495.0], [58.3, 495.0], [58.4, 496.0], [58.5, 496.0], [58.6, 496.0], [58.7, 497.0], [58.8, 497.0], [58.9, 497.0], [59.0, 498.0], [59.1, 498.0], [59.2, 499.0], [59.3, 499.0], [59.4, 499.0], [59.5, 500.0], [59.6, 500.0], [59.7, 500.0], [59.8, 501.0], [59.9, 501.0], [60.0, 501.0], [60.1, 502.0], [60.2, 502.0], [60.3, 502.0], [60.4, 503.0], [60.5, 503.0], [60.6, 503.0], [60.7, 504.0], [60.8, 504.0], [60.9, 504.0], [61.0, 505.0], [61.1, 505.0], [61.2, 505.0], [61.3, 506.0], [61.4, 506.0], [61.5, 506.0], [61.6, 507.0], [61.7, 507.0], [61.8, 507.0], [61.9, 508.0], [62.0, 508.0], [62.1, 508.0], [62.2, 508.0], [62.3, 509.0], [62.4, 509.0], [62.5, 509.0], [62.6, 510.0], [62.7, 510.0], [62.8, 510.0], [62.9, 510.0], [63.0, 511.0], [63.1, 511.0], [63.2, 511.0], [63.3, 512.0], [63.4, 512.0], [63.5, 512.0], [63.6, 512.0], [63.7, 513.0], [63.8, 513.0], [63.9, 513.0], [64.0, 513.0], [64.1, 514.0], [64.2, 514.0], [64.3, 514.0], [64.4, 515.0], [64.5, 515.0], [64.6, 515.0], [64.7, 516.0], [64.8, 516.0], [64.9, 516.0], [65.0, 516.0], [65.1, 517.0], [65.2, 517.0], [65.3, 517.0], [65.4, 518.0], [65.5, 518.0], [65.6, 518.0], [65.7, 519.0], [65.8, 519.0], [65.9, 519.0], [66.0, 519.0], [66.1, 520.0], [66.2, 520.0], [66.3, 520.0], [66.4, 520.0], [66.5, 521.0], [66.6, 521.0], [66.7, 521.0], [66.8, 522.0], [66.9, 522.0], [67.0, 522.0], [67.1, 523.0], [67.2, 523.0], [67.3, 523.0], [67.4, 523.0], [67.5, 524.0], [67.6, 524.0], [67.7, 524.0], [67.8, 525.0], [67.9, 525.0], [68.0, 525.0], [68.1, 525.0], [68.2, 526.0], [68.3, 526.0], [68.4, 526.0], [68.5, 527.0], [68.6, 527.0], [68.7, 527.0], [68.8, 527.0], [68.9, 528.0], [69.0, 528.0], [69.1, 528.0], [69.2, 529.0], [69.3, 529.0], [69.4, 529.0], [69.5, 530.0], [69.6, 530.0], [69.7, 530.0], [69.8, 531.0], [69.9, 531.0], [70.0, 531.0], [70.1, 532.0], [70.2, 532.0], [70.3, 532.0], [70.4, 533.0], [70.5, 533.0], [70.6, 533.0], [70.7, 533.0], [70.8, 534.0], [70.9, 534.0], [71.0, 535.0], [71.1, 535.0], [71.2, 535.0], [71.3, 536.0], [71.4, 536.0], [71.5, 536.0], [71.6, 537.0], [71.7, 537.0], [71.8, 537.0], [71.9, 538.0], [72.0, 538.0], [72.1, 539.0], [72.2, 539.0], [72.3, 539.0], [72.4, 540.0], [72.5, 540.0], [72.6, 540.0], [72.7, 541.0], [72.8, 541.0], [72.9, 542.0], [73.0, 542.0], [73.1, 543.0], [73.2, 543.0], [73.3, 543.0], [73.4, 544.0], [73.5, 544.0], [73.6, 544.0], [73.7, 545.0], [73.8, 545.0], [73.9, 546.0], [74.0, 546.0], [74.1, 547.0], [74.2, 547.0], [74.3, 547.0], [74.4, 548.0], [74.5, 548.0], [74.6, 549.0], [74.7, 549.0], [74.8, 550.0], [74.9, 550.0], [75.0, 551.0], [75.1, 551.0], [75.2, 552.0], [75.3, 552.0], [75.4, 552.0], [75.5, 553.0], [75.6, 554.0], [75.7, 554.0], [75.8, 555.0], [75.9, 555.0], [76.0, 556.0], [76.1, 556.0], [76.2, 557.0], [76.3, 558.0], [76.4, 558.0], [76.5, 559.0], [76.6, 559.0], [76.7, 560.0], [76.8, 560.0], [76.9, 561.0], [77.0, 562.0], [77.1, 562.0], [77.2, 563.0], [77.3, 564.0], [77.4, 564.0], [77.5, 565.0], [77.6, 566.0], [77.7, 567.0], [77.8, 567.0], [77.9, 568.0], [78.0, 569.0], [78.1, 570.0], [78.2, 570.0], [78.3, 571.0], [78.4, 572.0], [78.5, 573.0], [78.6, 573.0], [78.7, 574.0], [78.8, 575.0], [78.9, 576.0], [79.0, 576.0], [79.1, 577.0], [79.2, 578.0], [79.3, 579.0], [79.4, 579.0], [79.5, 580.0], [79.6, 581.0], [79.7, 582.0], [79.8, 583.0], [79.9, 584.0], [80.0, 584.0], [80.1, 585.0], [80.2, 586.0], [80.3, 587.0], [80.4, 588.0], [80.5, 589.0], [80.6, 590.0], [80.7, 591.0], [80.8, 592.0], [80.9, 592.0], [81.0, 593.0], [81.1, 595.0], [81.2, 596.0], [81.3, 596.0], [81.4, 598.0], [81.5, 599.0], [81.6, 600.0], [81.7, 601.0], [81.8, 602.0], [81.9, 603.0], [82.0, 604.0], [82.1, 605.0], [82.2, 606.0], [82.3, 607.0], [82.4, 608.0], [82.5, 610.0], [82.6, 611.0], [82.7, 612.0], [82.8, 613.0], [82.9, 614.0], [83.0, 615.0], [83.1, 617.0], [83.2, 618.0], [83.3, 619.0], [83.4, 621.0], [83.5, 622.0], [83.6, 623.0], [83.7, 624.0], [83.8, 625.0], [83.9, 626.0], [84.0, 627.0], [84.1, 628.0], [84.2, 630.0], [84.3, 631.0], [84.4, 632.0], [84.5, 633.0], [84.6, 634.0], [84.7, 635.0], [84.8, 636.0], [84.9, 638.0], [85.0, 639.0], [85.1, 640.0], [85.2, 641.0], [85.3, 642.0], [85.4, 643.0], [85.5, 644.0], [85.6, 646.0], [85.7, 647.0], [85.8, 648.0], [85.9, 649.0], [86.0, 650.0], [86.1, 652.0], [86.2, 653.0], [86.3, 654.0], [86.4, 656.0], [86.5, 657.0], [86.6, 658.0], [86.7, 660.0], [86.8, 661.0], [86.9, 662.0], [87.0, 663.0], [87.1, 665.0], [87.2, 666.0], [87.3, 668.0], [87.4, 670.0], [87.5, 671.0], [87.6, 673.0], [87.7, 674.0], [87.8, 676.0], [87.9, 678.0], [88.0, 680.0], [88.1, 682.0], [88.2, 684.0], [88.3, 686.0], [88.4, 688.0], [88.5, 690.0], [88.6, 692.0], [88.7, 695.0], [88.8, 697.0], [88.9, 700.0], [89.0, 702.0], [89.1, 704.0], [89.2, 707.0], [89.3, 710.0], [89.4, 714.0], [89.5, 717.0], [89.6, 720.0], [89.7, 724.0], [89.8, 728.0], [89.9, 732.0], [90.0, 736.0], [90.1, 741.0], [90.2, 745.0], [90.3, 751.0], [90.4, 757.0], [90.5, 763.0], [90.6, 769.0], [90.7, 777.0], [90.8, 784.0], [90.9, 792.0], [91.0, 801.0], [91.1, 810.0], [91.2, 823.0], [91.3, 838.0], [91.4, 860.0], [91.5, 901.0], [91.6, 962.0], [91.7, 1141.0], [91.8, 1234.0], [91.9, 1291.0], [92.0, 1329.0], [92.1, 1368.0], [92.2, 1395.0], [92.3, 1419.0], [92.4, 1440.0], [92.5, 1458.0], [92.6, 1476.0], [92.7, 1490.0], [92.8, 1504.0], [92.9, 1516.0], [93.0, 1526.0], [93.1, 1535.0], [93.2, 1543.0], [93.3, 1553.0], [93.4, 1562.0], [93.5, 1571.0], [93.6, 1580.0], [93.7, 1589.0], [93.8, 1597.0], [93.9, 1607.0], [94.0, 1615.0], [94.1, 1622.0], [94.2, 1630.0], [94.3, 1638.0], [94.4, 1644.0], [94.5, 1650.0], [94.6, 1656.0], [94.7, 1662.0], [94.8, 1667.0], [94.9, 1674.0], [95.0, 1680.0], [95.1, 1685.0], [95.2, 1690.0], [95.3, 1696.0], [95.4, 1701.0], [95.5, 1708.0], [95.6, 1715.0], [95.7, 1721.0], [95.8, 1727.0], [95.9, 1734.0], [96.0, 1742.0], [96.1, 1747.0], [96.2, 1754.0], [96.3, 1759.0], [96.4, 1767.0], [96.5, 1773.0], [96.6, 1781.0], [96.7, 1786.0], [96.8, 1792.0], [96.9, 1799.0], [97.0, 1804.0], [97.1, 1811.0], [97.2, 1817.0], [97.3, 1825.0], [97.4, 1832.0], [97.5, 1841.0], [97.6, 1849.0], [97.7, 1858.0], [97.8, 1868.0], [97.9, 1879.0], [98.0, 1888.0], [98.1, 1899.0], [98.2, 1910.0], [98.3, 1921.0], [98.4, 1933.0], [98.5, 1947.0], [98.6, 1962.0], [98.7, 1979.0], [98.8, 1997.0], [98.9, 2016.0], [99.0, 2038.0], [99.1, 2061.0], [99.2, 2091.0], [99.3, 2123.0], [99.4, 2161.0], [99.5, 2205.0], [99.6, 2255.0], [99.7, 2313.0], [99.8, 2407.0], [99.9, 2515.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24962.0, "series": [{"data": [[0.0, 24962.0], [300.0, 4.0], [600.0, 4.0], [700.0, 1.0], [100.0, 14.0], [200.0, 4.0], [1000.0, 2.0], [500.0, 9.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[600.0, 5825.0], [700.0, 1656.0], [800.0, 416.0], [900.0, 103.0], [1000.0, 44.0], [1100.0, 68.0], [1200.0, 111.0], [1300.0, 238.0], [1400.0, 444.0], [1500.0, 847.0], [100.0, 223.0], [1600.0, 1232.0], [1700.0, 1221.0], [1800.0, 950.0], [1900.0, 560.0], [2000.0, 338.0], [2100.0, 199.0], [2200.0, 148.0], [2300.0, 97.0], [2400.0, 74.0], [2500.0, 38.0], [2600.0, 23.0], [2700.0, 9.0], [2800.0, 9.0], [2900.0, 4.0], [3000.0, 5.0], [3100.0, 1.0], [200.0, 4957.0], [300.0, 21798.0], [400.0, 20334.0], [500.0, 17572.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5751.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 72520.0, "series": [{"data": [[0.0, 72520.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 26273.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5751.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 46.119214845482695, "minX": 1.6487229E12, "maxY": 50.0, "series": [{"data": [[1.64872302E12, 50.0], [1.64872332E12, 50.0], [1.64872362E12, 50.0], [1.64872296E12, 50.0], [1.64872326E12, 50.0], [1.64872356E12, 50.0], [1.6487229E12, 46.119214845482695], [1.6487232E12, 50.0], [1.6487235E12, 50.0], [1.6487238E12, 49.62822458270105], [1.64872314E12, 50.0], [1.64872344E12, 50.0], [1.64872374E12, 50.0], [1.64872308E12, 50.0], [1.64872338E12, 50.0], [1.64872368E12, 50.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6487238E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 2013.0, "series": [{"data": [[2.0, 1.1025641025641029], [3.0, 1.351351351351351], [4.0, 1.5318352059925089], [5.0, 1.5641025641025643], [6.0, 9.222222222222221], [7.0, 20.73684210526316], [8.0, 5.393939393939394], [9.0, 5.263157894736843], [10.0, 2.762820512820513], [11.0, 8.555555555555555], [12.0, 5.382352941176473], [13.0, 5.064102564102564], [14.0, 4.0948275862068995], [15.0, 4.0174672489083], [16.0, 4.364963503649634], [17.0, 5.265306122448981], [18.0, 8.09615384615385], [19.0, 4.469696969696972], [20.0, 7.054054054054055], [21.0, 6.850000000000002], [22.0, 11.020000000000001], [23.0, 13.566666666666668], [24.0, 8.314285714285715], [25.0, 19.76], [26.0, 12.897435897435894], [27.0, 9.945454545454544], [28.0, 13.6], [29.0, 8.971428571428573], [30.0, 11.279329608938555], [31.0, 6.2303921568627505], [32.0, 10.482758620689653], [33.0, 11.573333333333334], [34.0, 8.343434343434343], [35.0, 10.391304347826086], [36.0, 11.852941176470594], [37.0, 8.588709677419354], [38.0, 8.061728395061728], [39.0, 8.455284552845534], [40.0, 8.371621621621635], [41.0, 9.730769230769228], [42.0, 9.25862068965517], [43.0, 9.124999999999996], [44.0, 6.876288659793822], [45.0, 14.085714285714282], [46.0, 12.707317073170735], [47.0, 19.43055555555555], [48.0, 11.845238095238095], [49.0, 8.128571428571421], [50.0, 7.794657595918141], [1.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[45.81587999999983, 7.816400000000069]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 914.0], [3.0, 1102.0], [4.0, 1171.0], [5.0, 1378.0], [6.0, 1180.0], [7.0, 1410.0], [8.0, 1647.0], [9.0, 2013.0], [10.0, 523.0], [11.0, 643.0], [12.0, 465.0], [13.0, 1373.0], [14.0, 558.0], [15.0, 519.0], [16.0, 1632.0], [17.0, 386.0], [18.0, 514.0], [19.0, 676.0], [20.0, 534.0], [21.0, 357.0], [22.0, 437.0], [23.0, 446.0], [24.0, 548.0], [25.0, 572.0], [26.0, 378.0], [27.0, 460.8571428571429], [28.0, 357.6], [29.0, 1642.0], [30.0, 513.0], [31.0, 400.0], [33.0, 271.0], [32.0, 680.0], [35.0, 330.5], [34.0, 308.0], [36.0, 403.5], [37.0, 515.5], [38.0, 406.5], [39.0, 457.5], [40.0, 347.5], [41.0, 1025.0], [42.0, 346.5], [43.0, 571.6666666666666], [45.0, 421.0], [44.0, 547.0], [46.0, 595.5], [47.0, 537.3333333333334], [48.0, 396.5], [49.0, 400.0], [50.0, 565.5223431699534], [1.0, 1092.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[49.979797344865304, 565.5640651714795]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6864.583333333333, "minX": 1.6487229E12, "maxY": 6.4152307266666666E7, "series": [{"data": [[1.64872302E12, 6.2304207333333336E7], [1.64872332E12, 5.7180433266666666E7], [1.64872362E12, 5.828707993333333E7], [1.64872296E12, 6.4152307266666666E7], [1.64872326E12, 5.661604346666667E7], [1.64872356E12, 5.83313458E7], [1.6487229E12, 2.27507045E7], [1.6487232E12, 5.825388053333333E7], [1.6487235E12, 5.83645452E7], [1.6487238E12, 3.6464007666666664E7], [1.64872314E12, 5.8187481733333334E7], [1.64872344E12, 5.7656291333333336E7], [1.64872374E12, 5.8375611666666664E7], [1.64872308E12, 5.8320279333333336E7], [1.64872338E12, 5.6682442266666666E7], [1.64872368E12, 5.838667813333333E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64872302E12, 11729.166666666666], [1.64872332E12, 10764.583333333334], [1.64872362E12, 10972.916666666666], [1.64872296E12, 12077.083333333334], [1.64872326E12, 10658.333333333334], [1.64872356E12, 10981.25], [1.6487229E12, 111358.33333333333], [1.6487232E12, 10966.666666666666], [1.6487235E12, 10987.5], [1.6487238E12, 6864.583333333333], [1.64872314E12, 10954.166666666666], [1.64872344E12, 10854.166666666666], [1.64872374E12, 10989.583333333334], [1.64872308E12, 10979.166666666666], [1.64872338E12, 10670.833333333334], [1.64872368E12, 10991.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6487238E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7.816400000000069, "minX": 1.6487229E12, "maxY": 586.3682564503522, "series": [{"data": [[1.6487229E12, 7.816400000000069]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64872302E12, 532.8648312611028], [1.64872332E12, 580.5492548867808], [1.64872362E12, 568.8314030757541], [1.64872296E12, 517.2482318440575], [1.64872326E12, 586.3682564503522], [1.64872356E12, 569.6184784670833], [1.6487229E12, 540.6739766081874], [1.6487232E12, 570.3107902735559], [1.6487235E12, 568.8777019340146], [1.6487238E12, 571.3298937784494], [1.64872314E12, 570.1886648915939], [1.64872344E12, 575.8781190019204], [1.64872374E12, 569.362085308057], [1.64872308E12, 568.935863377608], [1.64872338E12, 584.993557204218], [1.64872368E12, 568.5928733889326]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6487238E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7.813320000000051, "minX": 1.6487229E12, "maxY": 585.3709929632515, "series": [{"data": [[1.6487229E12, 7.813320000000051]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64872302E12, 532.0291296625213], [1.64872332E12, 579.5980259338093], [1.64872362E12, 567.9417125498408], [1.64872296E12, 516.4205623598422], [1.64872326E12, 585.3709929632515], [1.64872356E12, 568.719218364638], [1.6487229E12, 539.6632553606245], [1.6487232E12, 569.3932370820667], [1.6487235E12, 568.0199089874865], [1.6487238E12, 570.4959028831574], [1.64872314E12, 569.2278432864209], [1.64872344E12, 574.9587332053738], [1.64872374E12, 568.4792417061609], [1.64872308E12, 567.9874762808363], [1.64872338E12, 583.9697383834445], [1.64872368E12, 567.7122820318426]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6487238E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6487229E12, "maxY": 0.0034113060428849966, "series": [{"data": [[1.6487229E12, 2.4000000000000068E-4]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64872302E12, 0.0015985790408525747], [1.64872332E12, 0.0023224308109154263], [1.64872362E12, 0.002658059616479976], [1.64872296E12, 0.002242539244436779], [1.64872326E12, 9.773260359655991E-4], [1.64872356E12, 7.588692847656971E-4], [1.6487229E12, 0.0034113060428849966], [1.6487232E12, 0.0020896656534954393], [1.6487235E12, 5.688282138794093E-4], [1.6487238E12, 0.0], [1.64872314E12, 0.0017116774438950158], [1.64872344E12, 0.0013435700575815772], [1.64872374E12, 0.0011374407582938413], [1.64872308E12, 0.0013282732447817865], [1.64872338E12, 0.001952362358453729], [1.64872368E12, 9.476876421531463E-4]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6487238E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6487229E12, "maxY": 3114.0, "series": [{"data": [[1.64872302E12, 2937.0], [1.64872332E12, 3114.0], [1.64872362E12, 3005.0], [1.64872296E12, 2539.0], [1.64872326E12, 2943.0], [1.64872356E12, 3095.0], [1.6487229E12, 2587.0], [1.6487232E12, 2764.0], [1.6487235E12, 2693.0], [1.6487238E12, 2441.0], [1.64872314E12, 2742.0], [1.64872344E12, 2805.0], [1.64872374E12, 2664.0], [1.64872308E12, 2896.0], [1.64872338E12, 3076.0], [1.64872368E12, 3051.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64872302E12, 683.0], [1.64872332E12, 741.0], [1.64872362E12, 723.0], [1.64872296E12, 677.5999999999995], [1.64872326E12, 791.3000000000002], [1.64872356E12, 732.0], [1.6487229E12, 245.90000000000146], [1.6487232E12, 750.0], [1.6487235E12, 743.5], [1.6487238E12, 735.2000000000003], [1.64872314E12, 751.1000000000004], [1.64872344E12, 747.9000000000005], [1.64872374E12, 733.0], [1.64872308E12, 724.9000000000005], [1.64872338E12, 763.0999999999995], [1.64872368E12, 734.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64872302E12, 1865.0], [1.64872332E12, 2113.8799999999974], [1.64872362E12, 2055.3199999999997], [1.64872296E12, 1890.0], [1.64872326E12, 2108.66], [1.64872356E12, 2046.2799999999997], [1.6487229E12, 753.0], [1.6487232E12, 2051.2000000000044], [1.6487235E12, 1986.25], [1.6487238E12, 1985.12], [1.64872314E12, 1976.8199999999997], [1.64872344E12, 2095.7800000000007], [1.64872374E12, 1991.0], [1.64872308E12, 2035.4499999999998], [1.64872338E12, 2256.159999999996], [1.64872368E12, 2003.9199999999983]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64872302E12, 1589.0], [1.64872332E12, 1695.5999999999995], [1.64872362E12, 1692.0], [1.64872296E12, 1556.0], [1.64872326E12, 1737.1499999999996], [1.64872356E12, 1698.3999999999996], [1.6487229E12, 452.0], [1.6487232E12, 1715.5], [1.6487235E12, 1677.25], [1.6487238E12, 1724.1999999999998], [1.64872314E12, 1680.0], [1.64872344E12, 1731.4499999999998], [1.64872374E12, 1686.0], [1.64872308E12, 1682.4499999999998], [1.64872338E12, 1773.0], [1.64872368E12, 1706.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64872302E12, 119.0], [1.64872332E12, 138.0], [1.64872362E12, 122.0], [1.64872296E12, 115.0], [1.64872326E12, 136.0], [1.64872356E12, 132.0], [1.6487229E12, 1.0], [1.6487232E12, 129.0], [1.6487235E12, 127.0], [1.6487238E12, 135.0], [1.64872314E12, 126.0], [1.64872344E12, 129.0], [1.64872374E12, 127.0], [1.64872308E12, 127.0], [1.64872338E12, 129.0], [1.64872368E12, 131.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64872302E12, 413.0], [1.64872332E12, 458.0], [1.64872362E12, 450.0], [1.64872296E12, 406.0], [1.64872326E12, 474.0], [1.64872356E12, 450.0], [1.6487229E12, 6.0], [1.6487232E12, 449.0], [1.6487235E12, 448.0], [1.6487238E12, 456.0], [1.64872314E12, 450.0], [1.64872344E12, 452.0], [1.64872374E12, 447.0], [1.64872308E12, 454.5], [1.64872338E12, 462.0], [1.64872368E12, 449.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6487238E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 36.0, "maxY": 548.5, "series": [{"data": [[36.0, 401.5], [45.0, 528.0], [1109.0, 15.0], [73.0, 529.0], [75.0, 540.0], [74.0, 548.5], [76.0, 532.0], [78.0, 507.0], [79.0, 505.5], [77.0, 528.0], [81.0, 489.0], [83.0, 471.0], [82.0, 496.0], [80.0, 495.0], [85.0, 458.0], [84.0, 452.0], [86.0, 457.0], [87.0, 450.0], [91.0, 443.0], [90.0, 444.0], [89.0, 452.0], [88.0, 450.5], [93.0, 426.0], [94.0, 415.0], [92.0, 427.5], [95.0, 413.0], [97.0, 404.0], [98.0, 408.0], [99.0, 408.0], [96.0, 408.0], [100.0, 396.5], [101.0, 387.0], [4553.0, 9.0], [5556.0, 5.0], [6694.0, 6.0], [7088.0, 6.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7088.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 36.0, "maxY": 548.5, "series": [{"data": [[36.0, 400.5], [45.0, 528.0], [1109.0, 15.0], [73.0, 528.5], [75.0, 539.0], [74.0, 548.5], [76.0, 531.5], [78.0, 506.5], [79.0, 504.5], [77.0, 527.0], [81.0, 487.0], [83.0, 469.0], [82.0, 495.0], [80.0, 494.0], [85.0, 457.0], [84.0, 450.0], [86.0, 456.0], [87.0, 449.0], [91.0, 442.0], [90.0, 443.0], [89.0, 450.0], [88.0, 449.0], [93.0, 425.0], [94.0, 414.0], [92.0, 426.5], [95.0, 411.5], [97.0, 403.0], [98.0, 407.0], [99.0, 406.0], [96.0, 406.0], [100.0, 395.5], [101.0, 387.0], [4553.0, 9.0], [5556.0, 5.0], [6694.0, 6.0], [7088.0, 6.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7088.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 54.083333333333336, "minX": 1.6487229E12, "maxY": 451.7, "series": [{"data": [[1.64872302E12, 93.83333333333333], [1.64872332E12, 86.11666666666666], [1.64872362E12, 87.78333333333333], [1.64872296E12, 96.61666666666666], [1.64872326E12, 85.26666666666667], [1.64872356E12, 87.85], [1.6487229E12, 451.7], [1.6487232E12, 87.73333333333333], [1.6487235E12, 87.9], [1.6487238E12, 54.083333333333336], [1.64872314E12, 87.63333333333334], [1.64872344E12, 86.83333333333333], [1.64872374E12, 87.91666666666667], [1.64872308E12, 87.83333333333333], [1.64872338E12, 85.36666666666666], [1.64872368E12, 87.93333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6487238E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 34.2, "minX": 1.6487229E12, "maxY": 416.6666666666667, "series": [{"data": [[1.64872302E12, 93.83333333333333], [1.64872332E12, 86.11666666666666], [1.64872362E12, 87.78333333333333], [1.64872296E12, 96.61666666666666], [1.64872326E12, 85.26666666666667], [1.64872356E12, 87.85], [1.6487229E12, 34.2], [1.6487232E12, 87.73333333333333], [1.6487235E12, 87.9], [1.6487238E12, 54.916666666666664], [1.64872314E12, 87.63333333333334], [1.64872344E12, 86.83333333333333], [1.64872374E12, 87.91666666666667], [1.64872308E12, 87.83333333333333], [1.64872338E12, 85.36666666666666], [1.64872368E12, 87.93333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6487229E12, 416.6666666666667]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6487238E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 34.2, "minX": 1.6487229E12, "maxY": 416.6666666666667, "series": [{"data": [[1.64872302E12, 93.83333333333333], [1.64872332E12, 86.11666666666666], [1.64872362E12, 87.78333333333333], [1.64872296E12, 96.61666666666666], [1.64872326E12, 85.26666666666667], [1.64872356E12, 87.85], [1.6487229E12, 34.2], [1.6487232E12, 87.73333333333333], [1.6487235E12, 87.9], [1.6487238E12, 54.916666666666664], [1.64872314E12, 87.63333333333334], [1.64872344E12, 86.83333333333333], [1.64872374E12, 87.91666666666667], [1.64872308E12, 87.83333333333333], [1.64872338E12, 85.36666666666666], [1.64872368E12, 87.93333333333334]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.6487229E12, 416.6666666666667]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6487238E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 54.916666666666664, "minX": 1.6487229E12, "maxY": 450.8666666666667, "series": [{"data": [[1.64872302E12, 93.83333333333333], [1.64872332E12, 86.11666666666666], [1.64872362E12, 87.78333333333333], [1.64872296E12, 96.61666666666666], [1.64872326E12, 85.26666666666667], [1.64872356E12, 87.85], [1.6487229E12, 450.8666666666667], [1.6487232E12, 87.73333333333333], [1.6487235E12, 87.9], [1.6487238E12, 54.916666666666664], [1.64872314E12, 87.63333333333334], [1.64872344E12, 86.83333333333333], [1.64872374E12, 87.91666666666667], [1.64872308E12, 87.83333333333333], [1.64872338E12, 85.36666666666666], [1.64872368E12, 87.93333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6487238E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

