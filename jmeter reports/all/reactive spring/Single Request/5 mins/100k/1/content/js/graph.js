/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 20106.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 3.0], [23.4, 3.0], [23.5, 3.0], [23.6, 3.0], [23.7, 3.0], [23.8, 3.0], [23.9, 3.0], [24.0, 3.0], [24.1, 3.0], [24.2, 3.0], [24.3, 3.0], [24.4, 3.0], [24.5, 3.0], [24.6, 3.0], [24.7, 3.0], [24.8, 3.0], [24.9, 3.0], [25.0, 3.0], [25.1, 3.0], [25.2, 3.0], [25.3, 3.0], [25.4, 3.0], [25.5, 3.0], [25.6, 3.0], [25.7, 3.0], [25.8, 3.0], [25.9, 3.0], [26.0, 3.0], [26.1, 3.0], [26.2, 3.0], [26.3, 3.0], [26.4, 3.0], [26.5, 3.0], [26.6, 3.0], [26.7, 3.0], [26.8, 3.0], [26.9, 3.0], [27.0, 3.0], [27.1, 3.0], [27.2, 3.0], [27.3, 3.0], [27.4, 3.0], [27.5, 3.0], [27.6, 3.0], [27.7, 3.0], [27.8, 3.0], [27.9, 3.0], [28.0, 3.0], [28.1, 3.0], [28.2, 3.0], [28.3, 3.0], [28.4, 3.0], [28.5, 3.0], [28.6, 3.0], [28.7, 3.0], [28.8, 3.0], [28.9, 3.0], [29.0, 3.0], [29.1, 3.0], [29.2, 3.0], [29.3, 3.0], [29.4, 3.0], [29.5, 3.0], [29.6, 3.0], [29.7, 3.0], [29.8, 3.0], [29.9, 3.0], [30.0, 3.0], [30.1, 3.0], [30.2, 3.0], [30.3, 3.0], [30.4, 3.0], [30.5, 3.0], [30.6, 3.0], [30.7, 3.0], [30.8, 3.0], [30.9, 3.0], [31.0, 3.0], [31.1, 3.0], [31.2, 3.0], [31.3, 3.0], [31.4, 3.0], [31.5, 3.0], [31.6, 3.0], [31.7, 3.0], [31.8, 3.0], [31.9, 3.0], [32.0, 3.0], [32.1, 3.0], [32.2, 3.0], [32.3, 3.0], [32.4, 3.0], [32.5, 3.0], [32.6, 3.0], [32.7, 3.0], [32.8, 3.0], [32.9, 3.0], [33.0, 3.0], [33.1, 3.0], [33.2, 3.0], [33.3, 3.0], [33.4, 3.0], [33.5, 3.0], [33.6, 3.0], [33.7, 3.0], [33.8, 3.0], [33.9, 3.0], [34.0, 3.0], [34.1, 3.0], [34.2, 3.0], [34.3, 3.0], [34.4, 3.0], [34.5, 3.0], [34.6, 3.0], [34.7, 3.0], [34.8, 3.0], [34.9, 3.0], [35.0, 3.0], [35.1, 3.0], [35.2, 3.0], [35.3, 3.0], [35.4, 3.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 3.0], [36.6, 3.0], [36.7, 3.0], [36.8, 3.0], [36.9, 3.0], [37.0, 3.0], [37.1, 3.0], [37.2, 3.0], [37.3, 3.0], [37.4, 3.0], [37.5, 3.0], [37.6, 3.0], [37.7, 3.0], [37.8, 3.0], [37.9, 3.0], [38.0, 3.0], [38.1, 3.0], [38.2, 3.0], [38.3, 3.0], [38.4, 3.0], [38.5, 3.0], [38.6, 3.0], [38.7, 3.0], [38.8, 3.0], [38.9, 3.0], [39.0, 3.0], [39.1, 3.0], [39.2, 3.0], [39.3, 3.0], [39.4, 3.0], [39.5, 3.0], [39.6, 3.0], [39.7, 3.0], [39.8, 3.0], [39.9, 3.0], [40.0, 3.0], [40.1, 3.0], [40.2, 3.0], [40.3, 3.0], [40.4, 3.0], [40.5, 3.0], [40.6, 3.0], [40.7, 3.0], [40.8, 3.0], [40.9, 3.0], [41.0, 3.0], [41.1, 3.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 3.0], [41.7, 3.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 3.0], [42.8, 3.0], [42.9, 3.0], [43.0, 3.0], [43.1, 3.0], [43.2, 3.0], [43.3, 3.0], [43.4, 3.0], [43.5, 3.0], [43.6, 3.0], [43.7, 3.0], [43.8, 3.0], [43.9, 3.0], [44.0, 3.0], [44.1, 3.0], [44.2, 3.0], [44.3, 3.0], [44.4, 3.0], [44.5, 3.0], [44.6, 3.0], [44.7, 3.0], [44.8, 3.0], [44.9, 3.0], [45.0, 3.0], [45.1, 3.0], [45.2, 3.0], [45.3, 3.0], [45.4, 3.0], [45.5, 3.0], [45.6, 3.0], [45.7, 3.0], [45.8, 3.0], [45.9, 3.0], [46.0, 3.0], [46.1, 3.0], [46.2, 3.0], [46.3, 3.0], [46.4, 3.0], [46.5, 3.0], [46.6, 3.0], [46.7, 3.0], [46.8, 3.0], [46.9, 3.0], [47.0, 3.0], [47.1, 3.0], [47.2, 3.0], [47.3, 3.0], [47.4, 3.0], [47.5, 3.0], [47.6, 3.0], [47.7, 3.0], [47.8, 3.0], [47.9, 3.0], [48.0, 3.0], [48.1, 3.0], [48.2, 3.0], [48.3, 3.0], [48.4, 3.0], [48.5, 3.0], [48.6, 3.0], [48.7, 3.0], [48.8, 3.0], [48.9, 3.0], [49.0, 3.0], [49.1, 3.0], [49.2, 3.0], [49.3, 3.0], [49.4, 3.0], [49.5, 3.0], [49.6, 3.0], [49.7, 3.0], [49.8, 3.0], [49.9, 3.0], [50.0, 3.0], [50.1, 3.0], [50.2, 3.0], [50.3, 3.0], [50.4, 3.0], [50.5, 3.0], [50.6, 3.0], [50.7, 3.0], [50.8, 3.0], [50.9, 3.0], [51.0, 3.0], [51.1, 3.0], [51.2, 3.0], [51.3, 3.0], [51.4, 3.0], [51.5, 3.0], [51.6, 3.0], [51.7, 3.0], [51.8, 3.0], [51.9, 3.0], [52.0, 3.0], [52.1, 3.0], [52.2, 3.0], [52.3, 3.0], [52.4, 3.0], [52.5, 3.0], [52.6, 3.0], [52.7, 3.0], [52.8, 4.0], [52.9, 4.0], [53.0, 4.0], [53.1, 4.0], [53.2, 4.0], [53.3, 4.0], [53.4, 4.0], [53.5, 4.0], [53.6, 4.0], [53.7, 4.0], [53.8, 4.0], [53.9, 4.0], [54.0, 4.0], [54.1, 4.0], [54.2, 4.0], [54.3, 4.0], [54.4, 4.0], [54.5, 4.0], [54.6, 4.0], [54.7, 4.0], [54.8, 4.0], [54.9, 4.0], [55.0, 4.0], [55.1, 4.0], [55.2, 4.0], [55.3, 4.0], [55.4, 4.0], [55.5, 4.0], [55.6, 4.0], [55.7, 4.0], [55.8, 4.0], [55.9, 4.0], [56.0, 4.0], [56.1, 4.0], [56.2, 4.0], [56.3, 4.0], [56.4, 4.0], [56.5, 4.0], [56.6, 4.0], [56.7, 4.0], [56.8, 4.0], [56.9, 4.0], [57.0, 4.0], [57.1, 4.0], [57.2, 4.0], [57.3, 4.0], [57.4, 4.0], [57.5, 4.0], [57.6, 4.0], [57.7, 4.0], [57.8, 4.0], [57.9, 4.0], [58.0, 4.0], [58.1, 4.0], [58.2, 4.0], [58.3, 4.0], [58.4, 4.0], [58.5, 4.0], [58.6, 4.0], [58.7, 4.0], [58.8, 4.0], [58.9, 4.0], [59.0, 4.0], [59.1, 4.0], [59.2, 4.0], [59.3, 4.0], [59.4, 4.0], [59.5, 4.0], [59.6, 4.0], [59.7, 4.0], [59.8, 4.0], [59.9, 4.0], [60.0, 4.0], [60.1, 4.0], [60.2, 4.0], [60.3, 4.0], [60.4, 4.0], [60.5, 4.0], [60.6, 4.0], [60.7, 4.0], [60.8, 4.0], [60.9, 4.0], [61.0, 4.0], [61.1, 4.0], [61.2, 4.0], [61.3, 4.0], [61.4, 4.0], [61.5, 4.0], [61.6, 4.0], [61.7, 4.0], [61.8, 4.0], [61.9, 4.0], [62.0, 4.0], [62.1, 4.0], [62.2, 4.0], [62.3, 4.0], [62.4, 4.0], [62.5, 4.0], [62.6, 4.0], [62.7, 4.0], [62.8, 4.0], [62.9, 4.0], [63.0, 4.0], [63.1, 4.0], [63.2, 4.0], [63.3, 4.0], [63.4, 4.0], [63.5, 4.0], [63.6, 4.0], [63.7, 4.0], [63.8, 4.0], [63.9, 4.0], [64.0, 4.0], [64.1, 4.0], [64.2, 4.0], [64.3, 4.0], [64.4, 4.0], [64.5, 4.0], [64.6, 4.0], [64.7, 4.0], [64.8, 4.0], [64.9, 4.0], [65.0, 4.0], [65.1, 4.0], [65.2, 4.0], [65.3, 4.0], [65.4, 4.0], [65.5, 4.0], [65.6, 4.0], [65.7, 4.0], [65.8, 4.0], [65.9, 4.0], [66.0, 4.0], [66.1, 4.0], [66.2, 4.0], [66.3, 4.0], [66.4, 4.0], [66.5, 4.0], [66.6, 4.0], [66.7, 4.0], [66.8, 4.0], [66.9, 4.0], [67.0, 4.0], [67.1, 4.0], [67.2, 4.0], [67.3, 4.0], [67.4, 4.0], [67.5, 4.0], [67.6, 4.0], [67.7, 4.0], [67.8, 4.0], [67.9, 4.0], [68.0, 4.0], [68.1, 4.0], [68.2, 5.0], [68.3, 5.0], [68.4, 5.0], [68.5, 5.0], [68.6, 5.0], [68.7, 5.0], [68.8, 5.0], [68.9, 5.0], [69.0, 5.0], [69.1, 5.0], [69.2, 5.0], [69.3, 5.0], [69.4, 5.0], [69.5, 5.0], [69.6, 5.0], [69.7, 5.0], [69.8, 5.0], [69.9, 5.0], [70.0, 5.0], [70.1, 5.0], [70.2, 5.0], [70.3, 5.0], [70.4, 5.0], [70.5, 5.0], [70.6, 5.0], [70.7, 5.0], [70.8, 5.0], [70.9, 5.0], [71.0, 5.0], [71.1, 5.0], [71.2, 5.0], [71.3, 5.0], [71.4, 5.0], [71.5, 5.0], [71.6, 5.0], [71.7, 5.0], [71.8, 5.0], [71.9, 5.0], [72.0, 5.0], [72.1, 5.0], [72.2, 5.0], [72.3, 5.0], [72.4, 5.0], [72.5, 5.0], [72.6, 5.0], [72.7, 5.0], [72.8, 5.0], [72.9, 5.0], [73.0, 5.0], [73.1, 5.0], [73.2, 5.0], [73.3, 5.0], [73.4, 5.0], [73.5, 5.0], [73.6, 5.0], [73.7, 5.0], [73.8, 5.0], [73.9, 5.0], [74.0, 5.0], [74.1, 5.0], [74.2, 5.0], [74.3, 5.0], [74.4, 5.0], [74.5, 5.0], [74.6, 5.0], [74.7, 5.0], [74.8, 5.0], [74.9, 5.0], [75.0, 5.0], [75.1, 5.0], [75.2, 5.0], [75.3, 5.0], [75.4, 5.0], [75.5, 5.0], [75.6, 5.0], [75.7, 5.0], [75.8, 5.0], [75.9, 5.0], [76.0, 5.0], [76.1, 5.0], [76.2, 5.0], [76.3, 5.0], [76.4, 5.0], [76.5, 5.0], [76.6, 5.0], [76.7, 5.0], [76.8, 5.0], [76.9, 5.0], [77.0, 5.0], [77.1, 5.0], [77.2, 5.0], [77.3, 5.0], [77.4, 5.0], [77.5, 5.0], [77.6, 5.0], [77.7, 5.0], [77.8, 5.0], [77.9, 5.0], [78.0, 5.0], [78.1, 5.0], [78.2, 5.0], [78.3, 5.0], [78.4, 5.0], [78.5, 5.0], [78.6, 5.0], [78.7, 5.0], [78.8, 5.0], [78.9, 5.0], [79.0, 5.0], [79.1, 5.0], [79.2, 5.0], [79.3, 5.0], [79.4, 5.0], [79.5, 5.0], [79.6, 5.0], [79.7, 5.0], [79.8, 5.0], [79.9, 5.0], [80.0, 5.0], [80.1, 5.0], [80.2, 5.0], [80.3, 5.0], [80.4, 5.0], [80.5, 5.0], [80.6, 5.0], [80.7, 5.0], [80.8, 5.0], [80.9, 5.0], [81.0, 5.0], [81.1, 5.0], [81.2, 5.0], [81.3, 5.0], [81.4, 5.0], [81.5, 5.0], [81.6, 5.0], [81.7, 5.0], [81.8, 5.0], [81.9, 5.0], [82.0, 5.0], [82.1, 5.0], [82.2, 5.0], [82.3, 5.0], [82.4, 5.0], [82.5, 5.0], [82.6, 5.0], [82.7, 5.0], [82.8, 5.0], [82.9, 5.0], [83.0, 6.0], [83.1, 6.0], [83.2, 6.0], [83.3, 6.0], [83.4, 6.0], [83.5, 6.0], [83.6, 6.0], [83.7, 6.0], [83.8, 6.0], [83.9, 6.0], [84.0, 6.0], [84.1, 6.0], [84.2, 6.0], [84.3, 6.0], [84.4, 6.0], [84.5, 6.0], [84.6, 6.0], [84.7, 6.0], [84.8, 6.0], [84.9, 6.0], [85.0, 6.0], [85.1, 6.0], [85.2, 6.0], [85.3, 6.0], [85.4, 6.0], [85.5, 6.0], [85.6, 6.0], [85.7, 6.0], [85.8, 6.0], [85.9, 6.0], [86.0, 6.0], [86.1, 6.0], [86.2, 6.0], [86.3, 6.0], [86.4, 6.0], [86.5, 6.0], [86.6, 6.0], [86.7, 6.0], [86.8, 6.0], [86.9, 6.0], [87.0, 6.0], [87.1, 6.0], [87.2, 6.0], [87.3, 6.0], [87.4, 6.0], [87.5, 6.0], [87.6, 6.0], [87.7, 6.0], [87.8, 6.0], [87.9, 6.0], [88.0, 6.0], [88.1, 6.0], [88.2, 6.0], [88.3, 6.0], [88.4, 6.0], [88.5, 6.0], [88.6, 6.0], [88.7, 6.0], [88.8, 6.0], [88.9, 6.0], [89.0, 6.0], [89.1, 6.0], [89.2, 6.0], [89.3, 6.0], [89.4, 6.0], [89.5, 6.0], [89.6, 6.0], [89.7, 6.0], [89.8, 6.0], [89.9, 6.0], [90.0, 6.0], [90.1, 6.0], [90.2, 6.0], [90.3, 6.0], [90.4, 6.0], [90.5, 6.0], [90.6, 6.0], [90.7, 6.0], [90.8, 6.0], [90.9, 6.0], [91.0, 7.0], [91.1, 7.0], [91.2, 7.0], [91.3, 7.0], [91.4, 7.0], [91.5, 7.0], [91.6, 7.0], [91.7, 7.0], [91.8, 7.0], [91.9, 7.0], [92.0, 7.0], [92.1, 7.0], [92.2, 7.0], [92.3, 7.0], [92.4, 7.0], [92.5, 7.0], [92.6, 7.0], [92.7, 7.0], [92.8, 7.0], [92.9, 7.0], [93.0, 7.0], [93.1, 7.0], [93.2, 7.0], [93.3, 7.0], [93.4, 7.0], [93.5, 7.0], [93.6, 7.0], [93.7, 7.0], [93.8, 7.0], [93.9, 7.0], [94.0, 7.0], [94.1, 7.0], [94.2, 8.0], [94.3, 8.0], [94.4, 8.0], [94.5, 8.0], [94.6, 8.0], [94.7, 8.0], [94.8, 8.0], [94.9, 8.0], [95.0, 8.0], [95.1, 8.0], [95.2, 8.0], [95.3, 8.0], [95.4, 8.0], [95.5, 8.0], [95.6, 8.0], [95.7, 9.0], [95.8, 9.0], [95.9, 9.0], [96.0, 9.0], [96.1, 9.0], [96.2, 9.0], [96.3, 9.0], [96.4, 9.0], [96.5, 9.0], [96.6, 10.0], [96.7, 10.0], [96.8, 10.0], [96.9, 10.0], [97.0, 10.0], [97.1, 10.0], [97.2, 11.0], [97.3, 11.0], [97.4, 11.0], [97.5, 11.0], [97.6, 11.0], [97.7, 11.0], [97.8, 12.0], [97.9, 12.0], [98.0, 12.0], [98.1, 12.0], [98.2, 13.0], [98.3, 13.0], [98.4, 13.0], [98.5, 13.0], [98.6, 13.0], [98.7, 14.0], [98.8, 14.0], [98.9, 14.0], [99.0, 15.0], [99.1, 15.0], [99.2, 16.0], [99.3, 17.0], [99.4, 18.0], [99.5, 20.0], [99.6, 23.0], [99.7, 31.0], [99.8, 43.0], [99.9, 77.0], [100.0, 1424.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 630.0], [0.1, 694.0], [0.2, 734.0], [0.3, 761.0], [0.4, 771.0], [0.5, 787.0], [0.6, 833.0], [0.7, 870.0], [0.8, 914.0], [0.9, 928.0], [1.0, 943.0], [1.1, 950.0], [1.2, 961.0], [1.3, 966.0], [1.4, 972.0], [1.5, 978.0], [1.6, 982.0], [1.7, 984.0], [1.8, 987.0], [1.9, 991.0], [2.0, 993.0], [2.1, 994.0], [2.2, 1001.0], [2.3, 1004.0], [2.4, 1005.0], [2.5, 1008.0], [2.6, 1013.0], [2.7, 1016.0], [2.8, 1019.0], [2.9, 1021.0], [3.0, 1027.0], [3.1, 1030.0], [3.2, 1032.0], [3.3, 1036.0], [3.4, 1040.0], [3.5, 1042.0], [3.6, 1044.0], [3.7, 1048.0], [3.8, 1050.0], [3.9, 1052.0], [4.0, 1056.0], [4.1, 1058.0], [4.2, 1061.0], [4.3, 1064.0], [4.4, 1066.0], [4.5, 1070.0], [4.6, 1071.0], [4.7, 1073.0], [4.8, 1078.0], [4.9, 1080.0], [5.0, 1083.0], [5.1, 1084.0], [5.2, 1085.0], [5.3, 1088.0], [5.4, 1090.0], [5.5, 1092.0], [5.6, 1095.0], [5.7, 1097.0], [5.8, 1102.0], [5.9, 1104.0], [6.0, 1109.0], [6.1, 1114.0], [6.2, 1118.0], [6.3, 1122.0], [6.4, 1127.0], [6.5, 1131.0], [6.6, 1133.0], [6.7, 1133.0], [6.8, 1137.0], [6.9, 1141.0], [7.0, 1144.0], [7.1, 1147.0], [7.2, 1150.0], [7.3, 1155.0], [7.4, 1158.0], [7.5, 1161.0], [7.6, 1166.0], [7.7, 1169.0], [7.8, 1173.0], [7.9, 1175.0], [8.0, 1179.0], [8.1, 1185.0], [8.2, 1189.0], [8.3, 1196.0], [8.4, 1201.0], [8.5, 1205.0], [8.6, 1214.0], [8.7, 1222.0], [8.8, 1230.0], [8.9, 1239.0], [9.0, 1247.0], [9.1, 1260.0], [9.2, 1269.0], [9.3, 1279.0], [9.4, 1289.0], [9.5, 1299.0], [9.6, 1312.0], [9.7, 1326.0], [9.8, 1339.0], [9.9, 1355.0], [10.0, 1368.0], [10.1, 1376.0], [10.2, 1380.0], [10.3, 1385.0], [10.4, 1391.0], [10.5, 1397.0], [10.6, 1401.0], [10.7, 1404.0], [10.8, 1407.0], [10.9, 1411.0], [11.0, 1416.0], [11.1, 1421.0], [11.2, 1423.0], [11.3, 1425.0], [11.4, 1426.0], [11.5, 1428.0], [11.6, 1431.0], [11.7, 1433.0], [11.8, 1436.0], [11.9, 1439.0], [12.0, 1441.0], [12.1, 1443.0], [12.2, 1444.0], [12.3, 1446.0], [12.4, 1448.0], [12.5, 1451.0], [12.6, 1451.0], [12.7, 1453.0], [12.8, 1454.0], [12.9, 1455.0], [13.0, 1456.0], [13.1, 1459.0], [13.2, 1460.0], [13.3, 1462.0], [13.4, 1462.0], [13.5, 1463.0], [13.6, 1466.0], [13.7, 1467.0], [13.8, 1469.0], [13.9, 1471.0], [14.0, 1473.0], [14.1, 1475.0], [14.2, 1476.0], [14.3, 1477.0], [14.4, 1479.0], [14.5, 1480.0], [14.6, 1481.0], [14.7, 1481.0], [14.8, 1483.0], [14.9, 1485.0], [15.0, 1486.0], [15.1, 1487.0], [15.2, 1488.0], [15.3, 1490.0], [15.4, 1492.0], [15.5, 1493.0], [15.6, 1494.0], [15.7, 1495.0], [15.8, 1496.0], [15.9, 1497.0], [16.0, 1498.0], [16.1, 1499.0], [16.2, 1500.0], [16.3, 1501.0], [16.4, 1501.0], [16.5, 1502.0], [16.6, 1503.0], [16.7, 1505.0], [16.8, 1505.0], [16.9, 1507.0], [17.0, 1508.0], [17.1, 1509.0], [17.2, 1510.0], [17.3, 1511.0], [17.4, 1512.0], [17.5, 1512.0], [17.6, 1514.0], [17.7, 1515.0], [17.8, 1516.0], [17.9, 1518.0], [18.0, 1519.0], [18.1, 1519.0], [18.2, 1520.0], [18.3, 1521.0], [18.4, 1522.0], [18.5, 1523.0], [18.6, 1524.0], [18.7, 1525.0], [18.8, 1525.0], [18.9, 1526.0], [19.0, 1527.0], [19.1, 1528.0], [19.2, 1529.0], [19.3, 1530.0], [19.4, 1531.0], [19.5, 1532.0], [19.6, 1533.0], [19.7, 1534.0], [19.8, 1535.0], [19.9, 1535.0], [20.0, 1535.0], [20.1, 1537.0], [20.2, 1538.0], [20.3, 1539.0], [20.4, 1540.0], [20.5, 1540.0], [20.6, 1541.0], [20.7, 1542.0], [20.8, 1543.0], [20.9, 1544.0], [21.0, 1545.0], [21.1, 1546.0], [21.2, 1547.0], [21.3, 1548.0], [21.4, 1549.0], [21.5, 1550.0], [21.6, 1551.0], [21.7, 1551.0], [21.8, 1551.0], [21.9, 1553.0], [22.0, 1554.0], [22.1, 1555.0], [22.2, 1556.0], [22.3, 1557.0], [22.4, 1558.0], [22.5, 1559.0], [22.6, 1559.0], [22.7, 1560.0], [22.8, 1561.0], [22.9, 1562.0], [23.0, 1563.0], [23.1, 1563.0], [23.2, 1564.0], [23.3, 1564.0], [23.4, 1565.0], [23.5, 1566.0], [23.6, 1566.0], [23.7, 1567.0], [23.8, 1568.0], [23.9, 1569.0], [24.0, 1570.0], [24.1, 1570.0], [24.2, 1571.0], [24.3, 1572.0], [24.4, 1573.0], [24.5, 1574.0], [24.6, 1575.0], [24.7, 1575.0], [24.8, 1577.0], [24.9, 1577.0], [25.0, 1578.0], [25.1, 1579.0], [25.2, 1580.0], [25.3, 1581.0], [25.4, 1581.0], [25.5, 1582.0], [25.6, 1583.0], [25.7, 1584.0], [25.8, 1584.0], [25.9, 1585.0], [26.0, 1585.0], [26.1, 1586.0], [26.2, 1587.0], [26.3, 1588.0], [26.4, 1589.0], [26.5, 1589.0], [26.6, 1591.0], [26.7, 1591.0], [26.8, 1592.0], [26.9, 1592.0], [27.0, 1593.0], [27.1, 1593.0], [27.2, 1594.0], [27.3, 1594.0], [27.4, 1595.0], [27.5, 1595.0], [27.6, 1596.0], [27.7, 1596.0], [27.8, 1597.0], [27.9, 1598.0], [28.0, 1598.0], [28.1, 1599.0], [28.2, 1600.0], [28.3, 1600.0], [28.4, 1600.0], [28.5, 1601.0], [28.6, 1601.0], [28.7, 1601.0], [28.8, 1602.0], [28.9, 1603.0], [29.0, 1604.0], [29.1, 1604.0], [29.2, 1605.0], [29.3, 1606.0], [29.4, 1606.0], [29.5, 1606.0], [29.6, 1607.0], [29.7, 1608.0], [29.8, 1608.0], [29.9, 1609.0], [30.0, 1610.0], [30.1, 1611.0], [30.2, 1612.0], [30.3, 1613.0], [30.4, 1613.0], [30.5, 1614.0], [30.6, 1614.0], [30.7, 1615.0], [30.8, 1615.0], [30.9, 1616.0], [31.0, 1617.0], [31.1, 1618.0], [31.2, 1618.0], [31.3, 1619.0], [31.4, 1619.0], [31.5, 1620.0], [31.6, 1621.0], [31.7, 1622.0], [31.8, 1622.0], [31.9, 1623.0], [32.0, 1624.0], [32.1, 1625.0], [32.2, 1626.0], [32.3, 1626.0], [32.4, 1627.0], [32.5, 1628.0], [32.6, 1629.0], [32.7, 1630.0], [32.8, 1630.0], [32.9, 1631.0], [33.0, 1632.0], [33.1, 1632.0], [33.2, 1633.0], [33.3, 1634.0], [33.4, 1635.0], [33.5, 1635.0], [33.6, 1636.0], [33.7, 1637.0], [33.8, 1638.0], [33.9, 1638.0], [34.0, 1639.0], [34.1, 1640.0], [34.2, 1641.0], [34.3, 1642.0], [34.4, 1643.0], [34.5, 1643.0], [34.6, 1644.0], [34.7, 1644.0], [34.8, 1645.0], [34.9, 1645.0], [35.0, 1646.0], [35.1, 1647.0], [35.2, 1648.0], [35.3, 1649.0], [35.4, 1649.0], [35.5, 1651.0], [35.6, 1651.0], [35.7, 1652.0], [35.8, 1653.0], [35.9, 1654.0], [36.0, 1654.0], [36.1, 1655.0], [36.2, 1655.0], [36.3, 1656.0], [36.4, 1657.0], [36.5, 1657.0], [36.6, 1658.0], [36.7, 1659.0], [36.8, 1659.0], [36.9, 1660.0], [37.0, 1662.0], [37.1, 1663.0], [37.2, 1664.0], [37.3, 1664.0], [37.4, 1665.0], [37.5, 1666.0], [37.6, 1667.0], [37.7, 1668.0], [37.8, 1668.0], [37.9, 1670.0], [38.0, 1670.0], [38.1, 1671.0], [38.2, 1672.0], [38.3, 1673.0], [38.4, 1674.0], [38.5, 1675.0], [38.6, 1675.0], [38.7, 1677.0], [38.8, 1678.0], [38.9, 1679.0], [39.0, 1680.0], [39.1, 1680.0], [39.2, 1681.0], [39.3, 1682.0], [39.4, 1683.0], [39.5, 1683.0], [39.6, 1685.0], [39.7, 1685.0], [39.8, 1686.0], [39.9, 1687.0], [40.0, 1688.0], [40.1, 1690.0], [40.2, 1691.0], [40.3, 1692.0], [40.4, 1693.0], [40.5, 1694.0], [40.6, 1695.0], [40.7, 1696.0], [40.8, 1697.0], [40.9, 1698.0], [41.0, 1699.0], [41.1, 1700.0], [41.2, 1701.0], [41.3, 1702.0], [41.4, 1703.0], [41.5, 1704.0], [41.6, 1706.0], [41.7, 1707.0], [41.8, 1708.0], [41.9, 1709.0], [42.0, 1710.0], [42.1, 1712.0], [42.2, 1714.0], [42.3, 1717.0], [42.4, 1719.0], [42.5, 1721.0], [42.6, 1723.0], [42.7, 1724.0], [42.8, 1725.0], [42.9, 1727.0], [43.0, 1729.0], [43.1, 1731.0], [43.2, 1732.0], [43.3, 1733.0], [43.4, 1735.0], [43.5, 1736.0], [43.6, 1738.0], [43.7, 1741.0], [43.8, 1742.0], [43.9, 1744.0], [44.0, 1747.0], [44.1, 1748.0], [44.2, 1750.0], [44.3, 1752.0], [44.4, 1753.0], [44.5, 1755.0], [44.6, 1759.0], [44.7, 1762.0], [44.8, 1765.0], [44.9, 1767.0], [45.0, 1768.0], [45.1, 1771.0], [45.2, 1774.0], [45.3, 1779.0], [45.4, 1781.0], [45.5, 1784.0], [45.6, 1787.0], [45.7, 1789.0], [45.8, 1792.0], [45.9, 1797.0], [46.0, 1802.0], [46.1, 1806.0], [46.2, 1813.0], [46.3, 1820.0], [46.4, 1826.0], [46.5, 1834.0], [46.6, 1841.0], [46.7, 1850.0], [46.8, 1855.0], [46.9, 1857.0], [47.0, 1865.0], [47.1, 1868.0], [47.2, 1872.0], [47.3, 1875.0], [47.4, 1881.0], [47.5, 1887.0], [47.6, 1894.0], [47.7, 1896.0], [47.8, 1901.0], [47.9, 1909.0], [48.0, 1913.0], [48.1, 1915.0], [48.2, 1920.0], [48.3, 1922.0], [48.4, 1925.0], [48.5, 1930.0], [48.6, 1932.0], [48.7, 1934.0], [48.8, 1937.0], [48.9, 1939.0], [49.0, 1941.0], [49.1, 1943.0], [49.2, 1945.0], [49.3, 1947.0], [49.4, 1951.0], [49.5, 1953.0], [49.6, 1957.0], [49.7, 1959.0], [49.8, 1960.0], [49.9, 1962.0], [50.0, 1967.0], [50.1, 1967.0], [50.2, 1968.0], [50.3, 1971.0], [50.4, 1972.0], [50.5, 1974.0], [50.6, 1976.0], [50.7, 1977.0], [50.8, 1979.0], [50.9, 1981.0], [51.0, 1982.0], [51.1, 1983.0], [51.2, 1985.0], [51.3, 1987.0], [51.4, 1990.0], [51.5, 1992.0], [51.6, 1995.0], [51.7, 1997.0], [51.8, 2000.0], [51.9, 2001.0], [52.0, 2004.0], [52.1, 2007.0], [52.2, 2008.0], [52.3, 2009.0], [52.4, 2012.0], [52.5, 2013.0], [52.6, 2016.0], [52.7, 2016.0], [52.8, 2018.0], [52.9, 2019.0], [53.0, 2021.0], [53.1, 2022.0], [53.2, 2024.0], [53.3, 2028.0], [53.4, 2029.0], [53.5, 2031.0], [53.6, 2034.0], [53.7, 2036.0], [53.8, 2037.0], [53.9, 2039.0], [54.0, 2040.0], [54.1, 2042.0], [54.2, 2044.0], [54.3, 2045.0], [54.4, 2046.0], [54.5, 2048.0], [54.6, 2050.0], [54.7, 2051.0], [54.8, 2053.0], [54.9, 2054.0], [55.0, 2057.0], [55.1, 2060.0], [55.2, 2061.0], [55.3, 2062.0], [55.4, 2064.0], [55.5, 2066.0], [55.6, 2067.0], [55.7, 2068.0], [55.8, 2069.0], [55.9, 2070.0], [56.0, 2072.0], [56.1, 2074.0], [56.2, 2075.0], [56.3, 2076.0], [56.4, 2076.0], [56.5, 2078.0], [56.6, 2079.0], [56.7, 2080.0], [56.8, 2081.0], [56.9, 2082.0], [57.0, 2084.0], [57.1, 2084.0], [57.2, 2086.0], [57.3, 2087.0], [57.4, 2088.0], [57.5, 2091.0], [57.6, 2092.0], [57.7, 2093.0], [57.8, 2094.0], [57.9, 2096.0], [58.0, 2097.0], [58.1, 2098.0], [58.2, 2099.0], [58.3, 2100.0], [58.4, 2100.0], [58.5, 2101.0], [58.6, 2102.0], [58.7, 2103.0], [58.8, 2105.0], [58.9, 2109.0], [59.0, 2111.0], [59.1, 2112.0], [59.2, 2113.0], [59.3, 2114.0], [59.4, 2115.0], [59.5, 2117.0], [59.6, 2120.0], [59.7, 2120.0], [59.8, 2121.0], [59.9, 2124.0], [60.0, 2125.0], [60.1, 2126.0], [60.2, 2128.0], [60.3, 2130.0], [60.4, 2132.0], [60.5, 2133.0], [60.6, 2134.0], [60.7, 2137.0], [60.8, 2138.0], [60.9, 2139.0], [61.0, 2140.0], [61.1, 2140.0], [61.2, 2141.0], [61.3, 2143.0], [61.4, 2144.0], [61.5, 2145.0], [61.6, 2146.0], [61.7, 2148.0], [61.8, 2149.0], [61.9, 2151.0], [62.0, 2153.0], [62.1, 2155.0], [62.2, 2155.0], [62.3, 2157.0], [62.4, 2158.0], [62.5, 2160.0], [62.6, 2161.0], [62.7, 2162.0], [62.8, 2164.0], [62.9, 2165.0], [63.0, 2166.0], [63.1, 2167.0], [63.2, 2169.0], [63.3, 2171.0], [63.4, 2171.0], [63.5, 2174.0], [63.6, 2175.0], [63.7, 2176.0], [63.8, 2177.0], [63.9, 2179.0], [64.0, 2180.0], [64.1, 2182.0], [64.2, 2182.0], [64.3, 2183.0], [64.4, 2185.0], [64.5, 2186.0], [64.6, 2188.0], [64.7, 2188.0], [64.8, 2189.0], [64.9, 2191.0], [65.0, 2192.0], [65.1, 2195.0], [65.2, 2196.0], [65.3, 2197.0], [65.4, 2199.0], [65.5, 2200.0], [65.6, 2202.0], [65.7, 2203.0], [65.8, 2204.0], [65.9, 2206.0], [66.0, 2207.0], [66.1, 2209.0], [66.2, 2210.0], [66.3, 2211.0], [66.4, 2213.0], [66.5, 2213.0], [66.6, 2214.0], [66.7, 2217.0], [66.8, 2217.0], [66.9, 2219.0], [67.0, 2221.0], [67.1, 2222.0], [67.2, 2225.0], [67.3, 2228.0], [67.4, 2230.0], [67.5, 2232.0], [67.6, 2234.0], [67.7, 2237.0], [67.8, 2239.0], [67.9, 2240.0], [68.0, 2242.0], [68.1, 2244.0], [68.2, 2245.0], [68.3, 2248.0], [68.4, 2250.0], [68.5, 2252.0], [68.6, 2254.0], [68.7, 2255.0], [68.8, 2256.0], [68.9, 2259.0], [69.0, 2261.0], [69.1, 2264.0], [69.2, 2267.0], [69.3, 2268.0], [69.4, 2272.0], [69.5, 2275.0], [69.6, 2277.0], [69.7, 2279.0], [69.8, 2283.0], [69.9, 2285.0], [70.0, 2289.0], [70.1, 2291.0], [70.2, 2293.0], [70.3, 2297.0], [70.4, 2300.0], [70.5, 2303.0], [70.6, 2306.0], [70.7, 2308.0], [70.8, 2313.0], [70.9, 2315.0], [71.0, 2319.0], [71.1, 2320.0], [71.2, 2323.0], [71.3, 2325.0], [71.4, 2326.0], [71.5, 2329.0], [71.6, 2331.0], [71.7, 2335.0], [71.8, 2337.0], [71.9, 2343.0], [72.0, 2345.0], [72.1, 2352.0], [72.2, 2355.0], [72.3, 2364.0], [72.4, 2368.0], [72.5, 2373.0], [72.6, 2380.0], [72.7, 2385.0], [72.8, 2390.0], [72.9, 2393.0], [73.0, 2399.0], [73.1, 2408.0], [73.2, 2414.0], [73.3, 2419.0], [73.4, 2430.0], [73.5, 2437.0], [73.6, 2443.0], [73.7, 2450.0], [73.8, 2456.0], [73.9, 2462.0], [74.0, 2471.0], [74.1, 2479.0], [74.2, 2484.0], [74.3, 2492.0], [74.4, 2502.0], [74.5, 2512.0], [74.6, 2521.0], [74.7, 2526.0], [74.8, 2536.0], [74.9, 2552.0], [75.0, 2557.0], [75.1, 2566.0], [75.2, 2570.0], [75.3, 2582.0], [75.4, 2586.0], [75.5, 2593.0], [75.6, 2599.0], [75.7, 2605.0], [75.8, 2616.0], [75.9, 2632.0], [76.0, 2639.0], [76.1, 2642.0], [76.2, 2650.0], [76.3, 2652.0], [76.4, 2658.0], [76.5, 2664.0], [76.6, 2670.0], [76.7, 2677.0], [76.8, 2682.0], [76.9, 2689.0], [77.0, 2695.0], [77.1, 2705.0], [77.2, 2710.0], [77.3, 2717.0], [77.4, 2727.0], [77.5, 2734.0], [77.6, 2745.0], [77.7, 2749.0], [77.8, 2765.0], [77.9, 2777.0], [78.0, 2784.0], [78.1, 2790.0], [78.2, 2801.0], [78.3, 2805.0], [78.4, 2816.0], [78.5, 2824.0], [78.6, 2836.0], [78.7, 2874.0], [78.8, 2907.0], [78.9, 2969.0], [79.0, 3001.0], [79.1, 3019.0], [79.2, 3081.0], [79.3, 3101.0], [79.4, 3120.0], [79.5, 3135.0], [79.6, 3147.0], [79.7, 3149.0], [79.8, 3155.0], [79.9, 3164.0], [80.0, 3170.0], [80.1, 3173.0], [80.2, 3180.0], [80.3, 3184.0], [80.4, 3189.0], [80.5, 3192.0], [80.6, 3196.0], [80.7, 3201.0], [80.8, 3204.0], [80.9, 3208.0], [81.0, 3214.0], [81.1, 3217.0], [81.2, 3219.0], [81.3, 3223.0], [81.4, 3227.0], [81.5, 3230.0], [81.6, 3233.0], [81.7, 3235.0], [81.8, 3239.0], [81.9, 3241.0], [82.0, 3245.0], [82.1, 3248.0], [82.2, 3250.0], [82.3, 3252.0], [82.4, 3253.0], [82.5, 3257.0], [82.6, 3259.0], [82.7, 3261.0], [82.8, 3263.0], [82.9, 3267.0], [83.0, 3269.0], [83.1, 3274.0], [83.2, 3280.0], [83.3, 3281.0], [83.4, 3283.0], [83.5, 3284.0], [83.6, 3286.0], [83.7, 3289.0], [83.8, 3292.0], [83.9, 3295.0], [84.0, 3298.0], [84.1, 3300.0], [84.2, 3303.0], [84.3, 3305.0], [84.4, 3307.0], [84.5, 3310.0], [84.6, 3314.0], [84.7, 3316.0], [84.8, 3324.0], [84.9, 3327.0], [85.0, 3329.0], [85.1, 3332.0], [85.2, 3335.0], [85.3, 3338.0], [85.4, 3341.0], [85.5, 3344.0], [85.6, 3346.0], [85.7, 3350.0], [85.8, 3357.0], [85.9, 3362.0], [86.0, 3369.0], [86.1, 3377.0], [86.2, 3382.0], [86.3, 3386.0], [86.4, 3398.0], [86.5, 3406.0], [86.6, 3413.0], [86.7, 3420.0], [86.8, 3435.0], [86.9, 3448.0], [87.0, 3461.0], [87.1, 3489.0], [87.2, 3504.0], [87.3, 3520.0], [87.4, 3563.0], [87.5, 3586.0], [87.6, 3663.0], [87.7, 3791.0], [87.8, 4004.0], [87.9, 4100.0], [88.0, 4132.0], [88.1, 4148.0], [88.2, 4167.0], [88.3, 4180.0], [88.4, 4191.0], [88.5, 4199.0], [88.6, 4212.0], [88.7, 4225.0], [88.8, 4233.0], [88.9, 4238.0], [89.0, 4248.0], [89.1, 4254.0], [89.2, 4259.0], [89.3, 4265.0], [89.4, 4269.0], [89.5, 4273.0], [89.6, 4278.0], [89.7, 4283.0], [89.8, 4292.0], [89.9, 4302.0], [90.0, 4308.0], [90.1, 4312.0], [90.2, 4323.0], [90.3, 4330.0], [90.4, 4337.0], [90.5, 4342.0], [90.6, 4354.0], [90.7, 4364.0], [90.8, 4375.0], [90.9, 4386.0], [91.0, 4402.0], [91.1, 4413.0], [91.2, 4420.0], [91.3, 4426.0], [91.4, 4439.0], [91.5, 4449.0], [91.6, 4464.0], [91.7, 4472.0], [91.8, 4477.0], [91.9, 4501.0], [92.0, 4522.0], [92.1, 4552.0], [92.2, 4568.0], [92.3, 4594.0], [92.4, 4613.0], [92.5, 4674.0], [92.6, 4774.0], [92.7, 4879.0], [92.8, 4939.0], [92.9, 5023.0], [93.0, 5288.0], [93.1, 5447.0], [93.2, 5500.0], [93.3, 5546.0], [93.4, 5680.0], [93.5, 5925.0], [93.6, 6164.0], [93.7, 6215.0], [93.8, 6307.0], [93.9, 6395.0], [94.0, 6445.0], [94.1, 6503.0], [94.2, 6619.0], [94.3, 6744.0], [94.4, 6782.0], [94.5, 6946.0], [94.6, 7035.0], [94.7, 7069.0], [94.8, 7094.0], [94.9, 7187.0], [95.0, 7261.0], [95.1, 7326.0], [95.2, 7357.0], [95.3, 7390.0], [95.4, 7422.0], [95.5, 7435.0], [95.6, 7457.0], [95.7, 7494.0], [95.8, 7507.0], [95.9, 7519.0], [96.0, 7554.0], [96.1, 7596.0], [96.2, 7633.0], [96.3, 7671.0], [96.4, 7737.0], [96.5, 7774.0], [96.6, 7844.0], [96.7, 7872.0], [96.8, 7898.0], [96.9, 7927.0], [97.0, 7956.0], [97.1, 8033.0], [97.2, 8048.0], [97.3, 8104.0], [97.4, 8152.0], [97.5, 8210.0], [97.6, 8238.0], [97.7, 8278.0], [97.8, 8345.0], [97.9, 8412.0], [98.0, 8501.0], [98.1, 8597.0], [98.2, 8669.0], [98.3, 8743.0], [98.4, 8889.0], [98.5, 8979.0], [98.6, 9013.0], [98.7, 9213.0], [98.8, 9402.0], [98.9, 10115.0], [99.0, 10910.0], [99.1, 11581.0], [99.2, 12586.0], [99.3, 12928.0], [99.4, 14279.0], [99.5, 14382.0], [99.6, 14419.0], [99.7, 14782.0], [99.8, 16295.0], [99.9, 19217.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 99922.0, "series": [{"data": [[0.0, 99922.0], [300.0, 8.0], [1400.0, 4.0], [400.0, 9.0], [100.0, 39.0], [200.0, 14.0], [500.0, 4.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[600.0, 7.0], [700.0, 25.0], [800.0, 13.0], [900.0, 85.0], [1000.0, 213.0], [1100.0, 155.0], [1200.0, 67.0], [1300.0, 63.0], [1400.0, 334.0], [1500.0, 713.0], [1600.0, 766.0], [1700.0, 291.0], [1800.0, 106.0], [1900.0, 241.0], [2000.0, 386.0], [2100.0, 425.0], [2300.0, 155.0], [2200.0, 295.0], [2400.0, 83.0], [2500.0, 72.0], [2600.0, 85.0], [2800.0, 35.0], [2700.0, 68.0], [2900.0, 13.0], [3000.0, 18.0], [3100.0, 81.0], [3300.0, 143.0], [3200.0, 201.0], [3400.0, 43.0], [3500.0, 20.0], [3700.0, 6.0], [3600.0, 6.0], [3800.0, 2.0], [3900.0, 3.0], [4000.0, 6.0], [4100.0, 37.0], [4200.0, 81.0], [4300.0, 66.0], [4600.0, 11.0], [4400.0, 53.0], [4500.0, 28.0], [4700.0, 6.0], [4800.0, 5.0], [5000.0, 5.0], [4900.0, 9.0], [5300.0, 5.0], [5200.0, 3.0], [5500.0, 7.0], [5400.0, 6.0], [5600.0, 7.0], [5700.0, 4.0], [6100.0, 7.0], [6000.0, 3.0], [5900.0, 1.0], [6200.0, 7.0], [6300.0, 9.0], [6500.0, 6.0], [6400.0, 8.0], [6600.0, 6.0], [6900.0, 7.0], [6700.0, 8.0], [6800.0, 2.0], [7100.0, 7.0], [7000.0, 14.0], [7300.0, 15.0], [7400.0, 23.0], [7200.0, 10.0], [7500.0, 24.0], [7600.0, 13.0], [7800.0, 18.0], [7900.0, 14.0], [7700.0, 10.0], [8000.0, 13.0], [8100.0, 12.0], [8700.0, 4.0], [8300.0, 8.0], [8200.0, 15.0], [8400.0, 8.0], [8600.0, 9.0], [8500.0, 7.0], [8900.0, 10.0], [9100.0, 2.0], [9200.0, 5.0], [9000.0, 5.0], [8800.0, 4.0], [9400.0, 1.0], [9600.0, 1.0], [9300.0, 1.0], [9800.0, 1.0], [10100.0, 1.0], [10000.0, 3.0], [10600.0, 1.0], [10400.0, 1.0], [10700.0, 1.0], [10500.0, 1.0], [10900.0, 1.0], [10800.0, 1.0], [11600.0, 2.0], [11500.0, 3.0], [11300.0, 4.0], [12700.0, 2.0], [12600.0, 2.0], [12300.0, 2.0], [12500.0, 1.0], [12900.0, 1.0], [12800.0, 1.0], [13900.0, 1.0], [14200.0, 7.0], [14300.0, 5.0], [14000.0, 1.0], [14500.0, 3.0], [14800.0, 1.0], [14700.0, 2.0], [14400.0, 5.0], [14900.0, 1.0], [15300.0, 1.0], [15400.0, 2.0], [16300.0, 1.0], [16200.0, 1.0], [16700.0, 2.0], [19200.0, 4.0], [19700.0, 1.0], [19600.0, 1.0], [20100.0, 1.0], [19800.0, 1.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 976.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 99992.0, "series": [{"data": [[0.0, 99992.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 976.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4977.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 45.4194756554307, "minX": 1.64854848E12, "maxY": 50.0, "series": [{"data": [[1.64854854E12, 50.0], [1.64854848E12, 48.70246381396895], [1.64854866E12, 50.0], [1.6485486E12, 50.0], [1.64854878E12, 45.4194756554307], [1.64854872E12, 50.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64854878E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.7619047619047619, "minX": 1.0, "maxY": 8542.0, "series": [{"data": [[2.0, 0.7619047619047619], [3.0, 0.9436619718309861], [4.0, 1.0181818181818183], [5.0, 3.1777777777777767], [6.0, 4.5875], [7.0, 3.7999999999999994], [8.0, 5.375000000000001], [9.0, 2.7176470588235304], [10.0, 2.672131147540984], [11.0, 4.112903225806451], [12.0, 2.1459459459459462], [13.0, 5.000000000000001], [14.0, 6.70731707317073], [15.0, 3.0921985815602833], [16.0, 4.816901408450705], [17.0, 4.648648648648646], [18.0, 7.672413793103444], [19.0, 2.841463414634147], [20.0, 6.368421052631576], [21.0, 3.3862068965517254], [22.0, 2.3498168498168504], [23.0, 6.370370370370372], [24.0, 8.03448275862069], [25.0, 10.432432432432435], [26.0, 6.52941176470588], [27.0, 4.659863945578229], [28.0, 7.7397260273972615], [29.0, 2.247191011235955], [30.0, 5.812030075187967], [31.0, 3.9415204678362525], [32.0, 8.037383177570097], [33.0, 19.945945945945947], [34.0, 4.011538461538462], [35.0, 3.8546511627906983], [36.0, 8.010526315789475], [37.0, 7.958762886597935], [38.0, 6.137931034482759], [39.0, 7.256637168141594], [40.0, 9.310344827586206], [41.0, 5.562841530054642], [42.0, 45.62000000000001], [43.0, 7.4876033057851235], [44.0, 10.671052631578947], [45.0, 4.307001795332138], [46.0, 6.925531914893614], [47.0, 6.352040816326531], [48.0, 6.35238095238095], [49.0, 6.14516129032258], [50.0, 4.299747274635397], [1.0, 0.7647058823529411]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[48.687800000000486, 4.359029999999913]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 6347.0], [3.0, 6173.0], [4.0, 1902.0], [5.0, 8015.0], [6.0, 1926.0], [7.0, 1941.0], [8.0, 5925.0], [9.0, 8215.0], [10.0, 8542.0], [11.0, 1750.0], [12.0, 7918.0], [13.0, 1748.0], [14.0, 8179.0], [15.0, 1957.0], [17.0, 4947.5], [18.0, 2774.0], [19.0, 1992.0], [20.0, 8210.0], [21.0, 1635.0], [22.0, 1622.0], [23.0, 2876.0], [24.0, 8308.0], [25.0, 1786.0], [26.0, 1774.0], [27.0, 8312.0], [28.0, 1783.0], [29.0, 1808.0], [30.0, 1731.0], [31.0, 1748.0], [33.0, 2220.0], [32.0, 2326.0], [35.0, 2119.0], [34.0, 2373.0], [37.0, 1155.0], [36.0, 1665.0], [39.0, 2265.0], [38.0, 1668.0], [41.0, 2241.0], [40.0, 1646.0], [42.0, 787.0], [43.0, 1633.0], [45.0, 1572.0], [44.0, 1600.0], [47.0, 1177.0], [46.0, 2093.0], [49.0, 1649.0], [48.0, 1759.0], [50.0, 2522.6053971486713], [1.0, 6469.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[49.79108494533218, 2528.840874684595]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 547.35, "minX": 1.64854848E12, "maxY": 5.9785211E7, "series": [{"data": [[1.64854854E12, 3.9707419E7], [1.64854848E12, 5.1439890916666664E7], [1.64854866E12, 5.9785211E7], [1.6485486E12, 4.47716835E7], [1.64854878E12, 1.19660055E7], [1.64854872E12, 5.89336975E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64854854E12, 1816.3], [1.64854848E12, 427345.2], [1.64854866E12, 2734.7], [1.6485486E12, 2047.95], [1.64854878E12, 547.35], [1.64854872E12, 2695.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64854878E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4.359029999999913, "minX": 1.64854848E12, "maxY": 3259.6286681715583, "series": [{"data": [[1.64854848E12, 4.359029999999913]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64854854E12, 3259.6286681715583], [1.64854848E12, 2098.5096153846175], [1.64854866E12, 2240.2556221889035], [1.6485486E12, 3100.7237237237223], [1.64854878E12, 2459.868913857679], [1.64854872E12, 2283.136121672999]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64854878E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4.356349999999975, "minX": 1.64854848E12, "maxY": 3257.000000000001, "series": [{"data": [[1.64854848E12, 4.356349999999975]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64854854E12, 3257.000000000001], [1.64854848E12, 2094.7797202797155], [1.64854866E12, 2235.954272863569], [1.6485486E12, 3097.3043043043053], [1.64854878E12, 2455.516853932582], [1.64854872E12, 2279.018250950568]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64854878E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64854848E12, "maxY": 0.011406844106463886, "series": [{"data": [[1.64854848E12, 8.999999999999766E-5]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64854854E12, 0.005643340857787807], [1.64854848E12, 0.00611888111888113], [1.64854866E12, 0.005247376311844086], [1.6485486E12, 0.008008008008008027], [1.64854878E12, 0.0], [1.64854872E12, 0.011406844106463886]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64854878E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64854848E12, "maxY": 20106.0, "series": [{"data": [[1.64854854E12, 20106.0], [1.64854848E12, 9831.0], [1.64854866E12, 9304.0], [1.6485486E12, 19852.0], [1.64854878E12, 8542.0], [1.64854872E12, 8988.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64854854E12, 4462.8], [1.64854848E12, 4.0], [1.64854866E12, 2792.0], [1.6485486E12, 4477.0], [1.64854878E12, 3703.4000000000474], [1.64854872E12, 2790.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64854854E12, 14849.09], [1.64854848E12, 2209.9900000000016], [1.64854866E12, 8643.450000000006], [1.6485486E12, 14488.0], [1.64854878E12, 8309.28], [1.64854872E12, 8413.68]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64854854E12, 7966.75], [1.64854848E12, 1266.3500000000095], [1.64854866E12, 7191.5], [1.6485486E12, 7494.0], [1.64854878E12, 8098.4], [1.64854872E12, 7386.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64854854E12, 766.0], [1.64854848E12, 0.0], [1.64854866E12, 636.0], [1.6485486E12, 630.0], [1.64854878E12, 716.0], [1.64854872E12, 706.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64854854E12, 3158.5], [1.64854848E12, 3.0], [1.64854866E12, 1703.0], [1.6485486E12, 2201.0], [1.64854878E12, 1834.0], [1.64854872E12, 1749.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64854878E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 4.0, "maxY": 4355.5, "series": [{"data": [[32.0, 1930.5], [33.0, 2006.0], [8856.0, 5.0], [34.0, 2120.0], [9524.0, 5.0], [39.0, 9.0], [11090.0, 4.0], [16597.0, 3.0], [16520.0, 3.0], [16707.0, 3.0], [4.0, 3303.0], [5.0, 3315.0], [6.0, 4355.5], [7.0, 3340.0], [8.0, 3324.5], [2232.0, 12.0], [9.0, 3316.0], [10.0, 3370.5], [11.0, 3311.0], [12.0, 3306.5], [13.0, 3340.0], [14.0, 3326.5], [3781.0, 2.0], [15.0, 1981.0], [16.0, 2308.5], [17.0, 1661.0], [18.0, 1764.0], [19.0, 1683.0], [20.0, 1719.0], [21.0, 1709.0], [22.0, 1685.5], [23.0, 1694.5], [24.0, 1758.5], [6649.0, 6.0], [25.0, 1888.0], [26.0, 1833.5], [27.0, 1754.0], [28.0, 1790.0], [29.0, 1956.0], [30.0, 2049.0], [8005.0, 6.0], [31.0, 1898.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16707.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 4.0, "maxY": 4354.0, "series": [{"data": [[32.0, 1928.0], [33.0, 2004.0], [8856.0, 5.0], [34.0, 2118.0], [9524.0, 5.0], [39.0, 9.0], [11090.0, 4.0], [16597.0, 3.0], [16520.0, 3.0], [16707.0, 3.0], [4.0, 3301.5], [5.0, 3314.0], [6.0, 4354.0], [7.0, 3338.0], [8.0, 3323.5], [2232.0, 12.0], [9.0, 3315.0], [10.0, 3369.5], [11.0, 3309.0], [12.0, 3305.0], [13.0, 3339.0], [14.0, 3325.0], [3781.0, 2.0], [15.0, 1974.0], [16.0, 2307.0], [17.0, 1654.5], [18.0, 1741.5], [19.0, 1681.0], [20.0, 1715.0], [21.0, 1705.0], [22.0, 1681.0], [23.0, 1691.0], [24.0, 1750.0], [6649.0, 6.0], [25.0, 1886.0], [26.0, 1804.0], [27.0, 1751.5], [28.0, 1787.0], [29.0, 1945.5], [30.0, 2046.0], [8005.0, 6.0], [31.0, 1896.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16707.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.6166666666666667, "minX": 1.64854848E12, "maxY": 1686.5666666666666, "series": [{"data": [[1.64854854E12, 14.766666666666667], [1.64854848E12, 1686.5666666666666], [1.64854866E12, 22.233333333333334], [1.6485486E12, 16.65], [1.64854878E12, 3.6166666666666667], [1.64854872E12, 21.916666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64854878E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.45, "minX": 1.64854848E12, "maxY": 1666.6666666666667, "series": [{"data": [[1.64854854E12, 14.766666666666667], [1.64854848E12, 19.066666666666666], [1.64854866E12, 22.233333333333334], [1.6485486E12, 16.65], [1.64854878E12, 4.45], [1.64854872E12, 21.916666666666668]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.64854848E12, 1666.6666666666667]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64854878E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.45, "minX": 1.64854848E12, "maxY": 1666.6666666666667, "series": [{"data": [[1.64854854E12, 14.766666666666667], [1.64854848E12, 19.066666666666666], [1.64854866E12, 22.233333333333334], [1.6485486E12, 16.65], [1.64854878E12, 4.45], [1.64854872E12, 21.916666666666668]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.64854848E12, 1666.6666666666667]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64854878E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.45, "minX": 1.64854848E12, "maxY": 1685.7333333333333, "series": [{"data": [[1.64854854E12, 14.766666666666667], [1.64854848E12, 1685.7333333333333], [1.64854866E12, 22.233333333333334], [1.6485486E12, 16.65], [1.64854878E12, 4.45], [1.64854872E12, 21.916666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64854878E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

