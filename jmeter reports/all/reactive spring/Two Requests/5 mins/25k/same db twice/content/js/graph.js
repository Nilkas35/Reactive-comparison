/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 8334.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 3.0], [5.6, 3.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 3.0], [6.2, 3.0], [6.3, 3.0], [6.4, 3.0], [6.5, 3.0], [6.6, 3.0], [6.7, 3.0], [6.8, 3.0], [6.9, 3.0], [7.0, 3.0], [7.1, 3.0], [7.2, 3.0], [7.3, 3.0], [7.4, 3.0], [7.5, 3.0], [7.6, 3.0], [7.7, 3.0], [7.8, 3.0], [7.9, 3.0], [8.0, 3.0], [8.1, 3.0], [8.2, 3.0], [8.3, 3.0], [8.4, 3.0], [8.5, 3.0], [8.6, 3.0], [8.7, 4.0], [8.8, 4.0], [8.9, 4.0], [9.0, 4.0], [9.1, 4.0], [9.2, 4.0], [9.3, 4.0], [9.4, 4.0], [9.5, 4.0], [9.6, 4.0], [9.7, 4.0], [9.8, 4.0], [9.9, 4.0], [10.0, 4.0], [10.1, 4.0], [10.2, 4.0], [10.3, 4.0], [10.4, 4.0], [10.5, 4.0], [10.6, 4.0], [10.7, 4.0], [10.8, 4.0], [10.9, 4.0], [11.0, 4.0], [11.1, 4.0], [11.2, 4.0], [11.3, 4.0], [11.4, 4.0], [11.5, 4.0], [11.6, 4.0], [11.7, 4.0], [11.8, 4.0], [11.9, 4.0], [12.0, 4.0], [12.1, 4.0], [12.2, 4.0], [12.3, 4.0], [12.4, 4.0], [12.5, 4.0], [12.6, 4.0], [12.7, 4.0], [12.8, 4.0], [12.9, 4.0], [13.0, 4.0], [13.1, 4.0], [13.2, 4.0], [13.3, 4.0], [13.4, 4.0], [13.5, 4.0], [13.6, 4.0], [13.7, 4.0], [13.8, 4.0], [13.9, 4.0], [14.0, 4.0], [14.1, 4.0], [14.2, 4.0], [14.3, 4.0], [14.4, 4.0], [14.5, 4.0], [14.6, 4.0], [14.7, 4.0], [14.8, 4.0], [14.9, 4.0], [15.0, 4.0], [15.1, 4.0], [15.2, 4.0], [15.3, 4.0], [15.4, 4.0], [15.5, 4.0], [15.6, 4.0], [15.7, 4.0], [15.8, 4.0], [15.9, 4.0], [16.0, 4.0], [16.1, 4.0], [16.2, 4.0], [16.3, 4.0], [16.4, 4.0], [16.5, 4.0], [16.6, 4.0], [16.7, 4.0], [16.8, 4.0], [16.9, 4.0], [17.0, 4.0], [17.1, 4.0], [17.2, 4.0], [17.3, 4.0], [17.4, 4.0], [17.5, 4.0], [17.6, 4.0], [17.7, 4.0], [17.8, 4.0], [17.9, 4.0], [18.0, 4.0], [18.1, 4.0], [18.2, 4.0], [18.3, 4.0], [18.4, 4.0], [18.5, 4.0], [18.6, 4.0], [18.7, 4.0], [18.8, 4.0], [18.9, 4.0], [19.0, 4.0], [19.1, 4.0], [19.2, 5.0], [19.3, 5.0], [19.4, 5.0], [19.5, 5.0], [19.6, 5.0], [19.7, 5.0], [19.8, 5.0], [19.9, 5.0], [20.0, 5.0], [20.1, 5.0], [20.2, 5.0], [20.3, 5.0], [20.4, 5.0], [20.5, 5.0], [20.6, 5.0], [20.7, 5.0], [20.8, 5.0], [20.9, 5.0], [21.0, 5.0], [21.1, 5.0], [21.2, 5.0], [21.3, 5.0], [21.4, 5.0], [21.5, 5.0], [21.6, 5.0], [21.7, 5.0], [21.8, 5.0], [21.9, 5.0], [22.0, 5.0], [22.1, 5.0], [22.2, 5.0], [22.3, 5.0], [22.4, 5.0], [22.5, 5.0], [22.6, 5.0], [22.7, 5.0], [22.8, 5.0], [22.9, 5.0], [23.0, 5.0], [23.1, 5.0], [23.2, 5.0], [23.3, 5.0], [23.4, 5.0], [23.5, 5.0], [23.6, 5.0], [23.7, 5.0], [23.8, 5.0], [23.9, 5.0], [24.0, 5.0], [24.1, 5.0], [24.2, 5.0], [24.3, 5.0], [24.4, 5.0], [24.5, 5.0], [24.6, 5.0], [24.7, 5.0], [24.8, 5.0], [24.9, 5.0], [25.0, 5.0], [25.1, 5.0], [25.2, 5.0], [25.3, 5.0], [25.4, 5.0], [25.5, 5.0], [25.6, 5.0], [25.7, 5.0], [25.8, 5.0], [25.9, 5.0], [26.0, 5.0], [26.1, 5.0], [26.2, 5.0], [26.3, 5.0], [26.4, 5.0], [26.5, 5.0], [26.6, 5.0], [26.7, 5.0], [26.8, 5.0], [26.9, 5.0], [27.0, 5.0], [27.1, 5.0], [27.2, 5.0], [27.3, 5.0], [27.4, 5.0], [27.5, 5.0], [27.6, 5.0], [27.7, 5.0], [27.8, 5.0], [27.9, 5.0], [28.0, 5.0], [28.1, 5.0], [28.2, 5.0], [28.3, 5.0], [28.4, 5.0], [28.5, 5.0], [28.6, 5.0], [28.7, 5.0], [28.8, 5.0], [28.9, 5.0], [29.0, 5.0], [29.1, 5.0], [29.2, 5.0], [29.3, 5.0], [29.4, 5.0], [29.5, 5.0], [29.6, 5.0], [29.7, 5.0], [29.8, 5.0], [29.9, 5.0], [30.0, 5.0], [30.1, 5.0], [30.2, 5.0], [30.3, 5.0], [30.4, 5.0], [30.5, 5.0], [30.6, 5.0], [30.7, 5.0], [30.8, 5.0], [30.9, 5.0], [31.0, 5.0], [31.1, 5.0], [31.2, 5.0], [31.3, 5.0], [31.4, 5.0], [31.5, 5.0], [31.6, 5.0], [31.7, 5.0], [31.8, 5.0], [31.9, 5.0], [32.0, 5.0], [32.1, 5.0], [32.2, 5.0], [32.3, 5.0], [32.4, 5.0], [32.5, 5.0], [32.6, 5.0], [32.7, 5.0], [32.8, 5.0], [32.9, 5.0], [33.0, 5.0], [33.1, 5.0], [33.2, 5.0], [33.3, 5.0], [33.4, 5.0], [33.5, 5.0], [33.6, 5.0], [33.7, 5.0], [33.8, 5.0], [33.9, 5.0], [34.0, 5.0], [34.1, 5.0], [34.2, 5.0], [34.3, 5.0], [34.4, 5.0], [34.5, 5.0], [34.6, 5.0], [34.7, 5.0], [34.8, 5.0], [34.9, 5.0], [35.0, 5.0], [35.1, 5.0], [35.2, 5.0], [35.3, 5.0], [35.4, 5.0], [35.5, 5.0], [35.6, 5.0], [35.7, 5.0], [35.8, 5.0], [35.9, 5.0], [36.0, 5.0], [36.1, 5.0], [36.2, 5.0], [36.3, 5.0], [36.4, 5.0], [36.5, 5.0], [36.6, 5.0], [36.7, 5.0], [36.8, 5.0], [36.9, 5.0], [37.0, 5.0], [37.1, 5.0], [37.2, 5.0], [37.3, 5.0], [37.4, 5.0], [37.5, 5.0], [37.6, 5.0], [37.7, 5.0], [37.8, 5.0], [37.9, 5.0], [38.0, 5.0], [38.1, 5.0], [38.2, 5.0], [38.3, 5.0], [38.4, 5.0], [38.5, 5.0], [38.6, 5.0], [38.7, 5.0], [38.8, 5.0], [38.9, 5.0], [39.0, 5.0], [39.1, 5.0], [39.2, 5.0], [39.3, 5.0], [39.4, 5.0], [39.5, 5.0], [39.6, 5.0], [39.7, 5.0], [39.8, 5.0], [39.9, 5.0], [40.0, 5.0], [40.1, 5.0], [40.2, 5.0], [40.3, 5.0], [40.4, 5.0], [40.5, 5.0], [40.6, 5.0], [40.7, 5.0], [40.8, 5.0], [40.9, 5.0], [41.0, 5.0], [41.1, 5.0], [41.2, 5.0], [41.3, 5.0], [41.4, 5.0], [41.5, 5.0], [41.6, 5.0], [41.7, 5.0], [41.8, 5.0], [41.9, 5.0], [42.0, 5.0], [42.1, 5.0], [42.2, 5.0], [42.3, 5.0], [42.4, 5.0], [42.5, 5.0], [42.6, 5.0], [42.7, 5.0], [42.8, 5.0], [42.9, 5.0], [43.0, 5.0], [43.1, 5.0], [43.2, 5.0], [43.3, 5.0], [43.4, 5.0], [43.5, 5.0], [43.6, 5.0], [43.7, 5.0], [43.8, 5.0], [43.9, 5.0], [44.0, 5.0], [44.1, 5.0], [44.2, 6.0], [44.3, 6.0], [44.4, 6.0], [44.5, 6.0], [44.6, 6.0], [44.7, 6.0], [44.8, 6.0], [44.9, 6.0], [45.0, 6.0], [45.1, 6.0], [45.2, 6.0], [45.3, 6.0], [45.4, 6.0], [45.5, 6.0], [45.6, 6.0], [45.7, 6.0], [45.8, 6.0], [45.9, 6.0], [46.0, 6.0], [46.1, 6.0], [46.2, 6.0], [46.3, 6.0], [46.4, 6.0], [46.5, 6.0], [46.6, 6.0], [46.7, 6.0], [46.8, 6.0], [46.9, 6.0], [47.0, 6.0], [47.1, 6.0], [47.2, 6.0], [47.3, 6.0], [47.4, 6.0], [47.5, 6.0], [47.6, 6.0], [47.7, 6.0], [47.8, 6.0], [47.9, 6.0], [48.0, 6.0], [48.1, 6.0], [48.2, 6.0], [48.3, 6.0], [48.4, 6.0], [48.5, 6.0], [48.6, 6.0], [48.7, 6.0], [48.8, 6.0], [48.9, 6.0], [49.0, 6.0], [49.1, 6.0], [49.2, 6.0], [49.3, 6.0], [49.4, 6.0], [49.5, 6.0], [49.6, 6.0], [49.7, 6.0], [49.8, 6.0], [49.9, 6.0], [50.0, 6.0], [50.1, 6.0], [50.2, 6.0], [50.3, 6.0], [50.4, 6.0], [50.5, 6.0], [50.6, 6.0], [50.7, 6.0], [50.8, 6.0], [50.9, 6.0], [51.0, 6.0], [51.1, 6.0], [51.2, 6.0], [51.3, 6.0], [51.4, 6.0], [51.5, 6.0], [51.6, 6.0], [51.7, 6.0], [51.8, 6.0], [51.9, 6.0], [52.0, 6.0], [52.1, 6.0], [52.2, 6.0], [52.3, 6.0], [52.4, 6.0], [52.5, 6.0], [52.6, 6.0], [52.7, 6.0], [52.8, 6.0], [52.9, 6.0], [53.0, 6.0], [53.1, 6.0], [53.2, 6.0], [53.3, 6.0], [53.4, 6.0], [53.5, 6.0], [53.6, 6.0], [53.7, 6.0], [53.8, 6.0], [53.9, 6.0], [54.0, 6.0], [54.1, 6.0], [54.2, 6.0], [54.3, 6.0], [54.4, 6.0], [54.5, 6.0], [54.6, 6.0], [54.7, 6.0], [54.8, 6.0], [54.9, 6.0], [55.0, 6.0], [55.1, 6.0], [55.2, 6.0], [55.3, 6.0], [55.4, 6.0], [55.5, 6.0], [55.6, 6.0], [55.7, 6.0], [55.8, 6.0], [55.9, 6.0], [56.0, 6.0], [56.1, 6.0], [56.2, 6.0], [56.3, 6.0], [56.4, 6.0], [56.5, 6.0], [56.6, 6.0], [56.7, 6.0], [56.8, 6.0], [56.9, 6.0], [57.0, 6.0], [57.1, 6.0], [57.2, 6.0], [57.3, 6.0], [57.4, 6.0], [57.5, 6.0], [57.6, 6.0], [57.7, 6.0], [57.8, 6.0], [57.9, 6.0], [58.0, 6.0], [58.1, 6.0], [58.2, 6.0], [58.3, 6.0], [58.4, 6.0], [58.5, 6.0], [58.6, 6.0], [58.7, 6.0], [58.8, 6.0], [58.9, 6.0], [59.0, 6.0], [59.1, 6.0], [59.2, 6.0], [59.3, 6.0], [59.4, 6.0], [59.5, 6.0], [59.6, 6.0], [59.7, 6.0], [59.8, 6.0], [59.9, 6.0], [60.0, 6.0], [60.1, 6.0], [60.2, 6.0], [60.3, 6.0], [60.4, 6.0], [60.5, 6.0], [60.6, 6.0], [60.7, 6.0], [60.8, 6.0], [60.9, 6.0], [61.0, 6.0], [61.1, 6.0], [61.2, 6.0], [61.3, 6.0], [61.4, 6.0], [61.5, 6.0], [61.6, 6.0], [61.7, 6.0], [61.8, 6.0], [61.9, 6.0], [62.0, 6.0], [62.1, 6.0], [62.2, 6.0], [62.3, 6.0], [62.4, 6.0], [62.5, 6.0], [62.6, 6.0], [62.7, 6.0], [62.8, 6.0], [62.9, 6.0], [63.0, 6.0], [63.1, 6.0], [63.2, 6.0], [63.3, 6.0], [63.4, 6.0], [63.5, 6.0], [63.6, 6.0], [63.7, 6.0], [63.8, 6.0], [63.9, 6.0], [64.0, 6.0], [64.1, 6.0], [64.2, 6.0], [64.3, 6.0], [64.4, 6.0], [64.5, 6.0], [64.6, 6.0], [64.7, 6.0], [64.8, 6.0], [64.9, 6.0], [65.0, 6.0], [65.1, 6.0], [65.2, 6.0], [65.3, 6.0], [65.4, 6.0], [65.5, 6.0], [65.6, 6.0], [65.7, 6.0], [65.8, 6.0], [65.9, 6.0], [66.0, 6.0], [66.1, 6.0], [66.2, 6.0], [66.3, 6.0], [66.4, 6.0], [66.5, 6.0], [66.6, 6.0], [66.7, 6.0], [66.8, 6.0], [66.9, 6.0], [67.0, 6.0], [67.1, 6.0], [67.2, 6.0], [67.3, 6.0], [67.4, 7.0], [67.5, 7.0], [67.6, 7.0], [67.7, 7.0], [67.8, 7.0], [67.9, 7.0], [68.0, 7.0], [68.1, 7.0], [68.2, 7.0], [68.3, 7.0], [68.4, 7.0], [68.5, 7.0], [68.6, 7.0], [68.7, 7.0], [68.8, 7.0], [68.9, 7.0], [69.0, 7.0], [69.1, 7.0], [69.2, 7.0], [69.3, 7.0], [69.4, 7.0], [69.5, 7.0], [69.6, 7.0], [69.7, 7.0], [69.8, 7.0], [69.9, 7.0], [70.0, 7.0], [70.1, 7.0], [70.2, 7.0], [70.3, 7.0], [70.4, 7.0], [70.5, 7.0], [70.6, 7.0], [70.7, 7.0], [70.8, 7.0], [70.9, 7.0], [71.0, 7.0], [71.1, 7.0], [71.2, 7.0], [71.3, 7.0], [71.4, 7.0], [71.5, 7.0], [71.6, 7.0], [71.7, 7.0], [71.8, 7.0], [71.9, 7.0], [72.0, 7.0], [72.1, 7.0], [72.2, 7.0], [72.3, 7.0], [72.4, 7.0], [72.5, 7.0], [72.6, 7.0], [72.7, 7.0], [72.8, 7.0], [72.9, 7.0], [73.0, 7.0], [73.1, 7.0], [73.2, 7.0], [73.3, 7.0], [73.4, 7.0], [73.5, 7.0], [73.6, 7.0], [73.7, 7.0], [73.8, 7.0], [73.9, 7.0], [74.0, 7.0], [74.1, 7.0], [74.2, 7.0], [74.3, 7.0], [74.4, 7.0], [74.5, 7.0], [74.6, 7.0], [74.7, 7.0], [74.8, 7.0], [74.9, 7.0], [75.0, 7.0], [75.1, 7.0], [75.2, 7.0], [75.3, 7.0], [75.4, 7.0], [75.5, 7.0], [75.6, 7.0], [75.7, 7.0], [75.8, 7.0], [75.9, 7.0], [76.0, 7.0], [76.1, 7.0], [76.2, 7.0], [76.3, 7.0], [76.4, 7.0], [76.5, 7.0], [76.6, 7.0], [76.7, 7.0], [76.8, 7.0], [76.9, 7.0], [77.0, 7.0], [77.1, 7.0], [77.2, 7.0], [77.3, 7.0], [77.4, 7.0], [77.5, 7.0], [77.6, 7.0], [77.7, 7.0], [77.8, 7.0], [77.9, 7.0], [78.0, 7.0], [78.1, 7.0], [78.2, 7.0], [78.3, 7.0], [78.4, 7.0], [78.5, 7.0], [78.6, 7.0], [78.7, 7.0], [78.8, 7.0], [78.9, 7.0], [79.0, 7.0], [79.1, 7.0], [79.2, 7.0], [79.3, 7.0], [79.4, 7.0], [79.5, 7.0], [79.6, 7.0], [79.7, 7.0], [79.8, 7.0], [79.9, 7.0], [80.0, 7.0], [80.1, 8.0], [80.2, 8.0], [80.3, 8.0], [80.4, 8.0], [80.5, 8.0], [80.6, 8.0], [80.7, 8.0], [80.8, 8.0], [80.9, 8.0], [81.0, 8.0], [81.1, 8.0], [81.2, 8.0], [81.3, 8.0], [81.4, 8.0], [81.5, 8.0], [81.6, 8.0], [81.7, 8.0], [81.8, 8.0], [81.9, 8.0], [82.0, 8.0], [82.1, 8.0], [82.2, 8.0], [82.3, 8.0], [82.4, 8.0], [82.5, 8.0], [82.6, 8.0], [82.7, 8.0], [82.8, 8.0], [82.9, 8.0], [83.0, 8.0], [83.1, 8.0], [83.2, 8.0], [83.3, 8.0], [83.4, 8.0], [83.5, 8.0], [83.6, 8.0], [83.7, 8.0], [83.8, 8.0], [83.9, 8.0], [84.0, 8.0], [84.1, 8.0], [84.2, 8.0], [84.3, 8.0], [84.4, 8.0], [84.5, 8.0], [84.6, 8.0], [84.7, 8.0], [84.8, 8.0], [84.9, 8.0], [85.0, 8.0], [85.1, 8.0], [85.2, 8.0], [85.3, 8.0], [85.4, 8.0], [85.5, 9.0], [85.6, 9.0], [85.7, 9.0], [85.8, 9.0], [85.9, 9.0], [86.0, 9.0], [86.1, 9.0], [86.2, 9.0], [86.3, 9.0], [86.4, 9.0], [86.5, 9.0], [86.6, 9.0], [86.7, 9.0], [86.8, 9.0], [86.9, 9.0], [87.0, 9.0], [87.1, 9.0], [87.2, 9.0], [87.3, 9.0], [87.4, 9.0], [87.5, 9.0], [87.6, 9.0], [87.7, 9.0], [87.8, 9.0], [87.9, 9.0], [88.0, 10.0], [88.1, 10.0], [88.2, 10.0], [88.3, 10.0], [88.4, 10.0], [88.5, 10.0], [88.6, 10.0], [88.7, 10.0], [88.8, 10.0], [88.9, 10.0], [89.0, 10.0], [89.1, 10.0], [89.2, 10.0], [89.3, 10.0], [89.4, 10.0], [89.5, 10.0], [89.6, 10.0], [89.7, 10.0], [89.8, 10.0], [89.9, 10.0], [90.0, 10.0], [90.1, 11.0], [90.2, 11.0], [90.3, 11.0], [90.4, 11.0], [90.5, 11.0], [90.6, 11.0], [90.7, 11.0], [90.8, 11.0], [90.9, 11.0], [91.0, 11.0], [91.1, 11.0], [91.2, 11.0], [91.3, 11.0], [91.4, 11.0], [91.5, 11.0], [91.6, 11.0], [91.7, 11.0], [91.8, 11.0], [91.9, 12.0], [92.0, 12.0], [92.1, 12.0], [92.2, 12.0], [92.3, 12.0], [92.4, 12.0], [92.5, 12.0], [92.6, 12.0], [92.7, 12.0], [92.8, 12.0], [92.9, 12.0], [93.0, 12.0], [93.1, 12.0], [93.2, 12.0], [93.3, 12.0], [93.4, 12.0], [93.5, 12.0], [93.6, 12.0], [93.7, 13.0], [93.8, 13.0], [93.9, 13.0], [94.0, 13.0], [94.1, 13.0], [94.2, 13.0], [94.3, 13.0], [94.4, 13.0], [94.5, 13.0], [94.6, 13.0], [94.7, 13.0], [94.8, 13.0], [94.9, 13.0], [95.0, 13.0], [95.1, 13.0], [95.2, 13.0], [95.3, 13.0], [95.4, 14.0], [95.5, 14.0], [95.6, 14.0], [95.7, 14.0], [95.8, 14.0], [95.9, 14.0], [96.0, 14.0], [96.1, 14.0], [96.2, 14.0], [96.3, 14.0], [96.4, 14.0], [96.5, 14.0], [96.6, 14.0], [96.7, 15.0], [96.8, 15.0], [96.9, 15.0], [97.0, 15.0], [97.1, 15.0], [97.2, 15.0], [97.3, 15.0], [97.4, 15.0], [97.5, 15.0], [97.6, 15.0], [97.7, 16.0], [97.8, 16.0], [97.9, 16.0], [98.0, 16.0], [98.1, 16.0], [98.2, 16.0], [98.3, 17.0], [98.4, 17.0], [98.5, 17.0], [98.6, 17.0], [98.7, 18.0], [98.8, 18.0], [98.9, 18.0], [99.0, 19.0], [99.1, 19.0], [99.2, 20.0], [99.3, 21.0], [99.4, 23.0], [99.5, 25.0], [99.6, 27.0], [99.7, 32.0], [99.8, 52.0], [99.9, 170.0], [100.0, 877.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 444.0], [0.1, 610.0], [0.2, 628.0], [0.3, 638.0], [0.4, 645.0], [0.5, 650.0], [0.6, 653.0], [0.7, 657.0], [0.8, 660.0], [0.9, 662.0], [1.0, 664.0], [1.1, 667.0], [1.2, 669.0], [1.3, 670.0], [1.4, 672.0], [1.5, 674.0], [1.6, 675.0], [1.7, 677.0], [1.8, 678.0], [1.9, 679.0], [2.0, 680.0], [2.1, 681.0], [2.2, 682.0], [2.3, 684.0], [2.4, 685.0], [2.5, 687.0], [2.6, 687.0], [2.7, 688.0], [2.8, 690.0], [2.9, 691.0], [3.0, 691.0], [3.1, 692.0], [3.2, 693.0], [3.3, 694.0], [3.4, 695.0], [3.5, 696.0], [3.6, 697.0], [3.7, 698.0], [3.8, 699.0], [3.9, 699.0], [4.0, 700.0], [4.1, 701.0], [4.2, 702.0], [4.3, 703.0], [4.4, 704.0], [4.5, 704.0], [4.6, 705.0], [4.7, 705.0], [4.8, 706.0], [4.9, 707.0], [5.0, 707.0], [5.1, 708.0], [5.2, 708.0], [5.3, 709.0], [5.4, 709.0], [5.5, 710.0], [5.6, 711.0], [5.7, 711.0], [5.8, 711.0], [5.9, 712.0], [6.0, 713.0], [6.1, 714.0], [6.2, 714.0], [6.3, 714.0], [6.4, 715.0], [6.5, 715.0], [6.6, 716.0], [6.7, 717.0], [6.8, 717.0], [6.9, 718.0], [7.0, 718.0], [7.1, 719.0], [7.2, 719.0], [7.3, 720.0], [7.4, 720.0], [7.5, 721.0], [7.6, 721.0], [7.7, 721.0], [7.8, 722.0], [7.9, 723.0], [8.0, 723.0], [8.1, 724.0], [8.2, 725.0], [8.3, 725.0], [8.4, 726.0], [8.5, 726.0], [8.6, 727.0], [8.7, 727.0], [8.8, 728.0], [8.9, 728.0], [9.0, 729.0], [9.1, 729.0], [9.2, 730.0], [9.3, 730.0], [9.4, 730.0], [9.5, 731.0], [9.6, 731.0], [9.7, 732.0], [9.8, 732.0], [9.9, 733.0], [10.0, 733.0], [10.1, 734.0], [10.2, 734.0], [10.3, 735.0], [10.4, 735.0], [10.5, 736.0], [10.6, 736.0], [10.7, 736.0], [10.8, 737.0], [10.9, 737.0], [11.0, 738.0], [11.1, 738.0], [11.2, 739.0], [11.3, 739.0], [11.4, 739.0], [11.5, 740.0], [11.6, 740.0], [11.7, 740.0], [11.8, 741.0], [11.9, 741.0], [12.0, 741.0], [12.1, 742.0], [12.2, 742.0], [12.3, 743.0], [12.4, 743.0], [12.5, 743.0], [12.6, 744.0], [12.7, 744.0], [12.8, 745.0], [12.9, 745.0], [13.0, 746.0], [13.1, 746.0], [13.2, 746.0], [13.3, 747.0], [13.4, 747.0], [13.5, 747.0], [13.6, 748.0], [13.7, 748.0], [13.8, 749.0], [13.9, 749.0], [14.0, 750.0], [14.1, 750.0], [14.2, 750.0], [14.3, 751.0], [14.4, 751.0], [14.5, 752.0], [14.6, 752.0], [14.7, 752.0], [14.8, 753.0], [14.9, 753.0], [15.0, 753.0], [15.1, 754.0], [15.2, 754.0], [15.3, 754.0], [15.4, 755.0], [15.5, 755.0], [15.6, 756.0], [15.7, 756.0], [15.8, 757.0], [15.9, 757.0], [16.0, 757.0], [16.1, 758.0], [16.2, 758.0], [16.3, 759.0], [16.4, 759.0], [16.5, 759.0], [16.6, 760.0], [16.7, 760.0], [16.8, 760.0], [16.9, 761.0], [17.0, 761.0], [17.1, 761.0], [17.2, 762.0], [17.3, 762.0], [17.4, 762.0], [17.5, 763.0], [17.6, 763.0], [17.7, 763.0], [17.8, 763.0], [17.9, 764.0], [18.0, 764.0], [18.1, 764.0], [18.2, 765.0], [18.3, 765.0], [18.4, 766.0], [18.5, 766.0], [18.6, 766.0], [18.7, 767.0], [18.8, 767.0], [18.9, 768.0], [19.0, 768.0], [19.1, 769.0], [19.2, 769.0], [19.3, 769.0], [19.4, 770.0], [19.5, 770.0], [19.6, 770.0], [19.7, 771.0], [19.8, 771.0], [19.9, 772.0], [20.0, 772.0], [20.1, 772.0], [20.2, 773.0], [20.3, 773.0], [20.4, 773.0], [20.5, 774.0], [20.6, 774.0], [20.7, 775.0], [20.8, 775.0], [20.9, 775.0], [21.0, 776.0], [21.1, 776.0], [21.2, 776.0], [21.3, 777.0], [21.4, 777.0], [21.5, 777.0], [21.6, 778.0], [21.7, 778.0], [21.8, 778.0], [21.9, 779.0], [22.0, 779.0], [22.1, 779.0], [22.2, 780.0], [22.3, 780.0], [22.4, 780.0], [22.5, 781.0], [22.6, 781.0], [22.7, 782.0], [22.8, 782.0], [22.9, 782.0], [23.0, 783.0], [23.1, 783.0], [23.2, 783.0], [23.3, 784.0], [23.4, 784.0], [23.5, 784.0], [23.6, 785.0], [23.7, 785.0], [23.8, 785.0], [23.9, 786.0], [24.0, 786.0], [24.1, 787.0], [24.2, 787.0], [24.3, 787.0], [24.4, 788.0], [24.5, 788.0], [24.6, 789.0], [24.7, 789.0], [24.8, 789.0], [24.9, 790.0], [25.0, 790.0], [25.1, 791.0], [25.2, 791.0], [25.3, 791.0], [25.4, 792.0], [25.5, 792.0], [25.6, 792.0], [25.7, 793.0], [25.8, 793.0], [25.9, 793.0], [26.0, 794.0], [26.1, 794.0], [26.2, 794.0], [26.3, 795.0], [26.4, 795.0], [26.5, 795.0], [26.6, 796.0], [26.7, 796.0], [26.8, 797.0], [26.9, 797.0], [27.0, 797.0], [27.1, 798.0], [27.2, 798.0], [27.3, 798.0], [27.4, 799.0], [27.5, 799.0], [27.6, 800.0], [27.7, 800.0], [27.8, 801.0], [27.9, 801.0], [28.0, 801.0], [28.1, 802.0], [28.2, 802.0], [28.3, 802.0], [28.4, 803.0], [28.5, 803.0], [28.6, 804.0], [28.7, 804.0], [28.8, 804.0], [28.9, 805.0], [29.0, 805.0], [29.1, 805.0], [29.2, 806.0], [29.3, 806.0], [29.4, 806.0], [29.5, 807.0], [29.6, 807.0], [29.7, 807.0], [29.8, 808.0], [29.9, 808.0], [30.0, 808.0], [30.1, 809.0], [30.2, 809.0], [30.3, 809.0], [30.4, 810.0], [30.5, 810.0], [30.6, 811.0], [30.7, 811.0], [30.8, 812.0], [30.9, 812.0], [31.0, 812.0], [31.1, 813.0], [31.2, 813.0], [31.3, 813.0], [31.4, 814.0], [31.5, 814.0], [31.6, 815.0], [31.7, 815.0], [31.8, 815.0], [31.9, 816.0], [32.0, 816.0], [32.1, 816.0], [32.2, 817.0], [32.3, 817.0], [32.4, 818.0], [32.5, 818.0], [32.6, 818.0], [32.7, 819.0], [32.8, 819.0], [32.9, 819.0], [33.0, 820.0], [33.1, 820.0], [33.2, 821.0], [33.3, 821.0], [33.4, 821.0], [33.5, 822.0], [33.6, 822.0], [33.7, 822.0], [33.8, 823.0], [33.9, 824.0], [34.0, 824.0], [34.1, 824.0], [34.2, 825.0], [34.3, 825.0], [34.4, 825.0], [34.5, 826.0], [34.6, 826.0], [34.7, 827.0], [34.8, 827.0], [34.9, 827.0], [35.0, 828.0], [35.1, 828.0], [35.2, 828.0], [35.3, 829.0], [35.4, 829.0], [35.5, 830.0], [35.6, 830.0], [35.7, 831.0], [35.8, 831.0], [35.9, 831.0], [36.0, 832.0], [36.1, 832.0], [36.2, 833.0], [36.3, 833.0], [36.4, 834.0], [36.5, 834.0], [36.6, 835.0], [36.7, 835.0], [36.8, 836.0], [36.9, 836.0], [37.0, 837.0], [37.1, 837.0], [37.2, 837.0], [37.3, 838.0], [37.4, 839.0], [37.5, 839.0], [37.6, 839.0], [37.7, 840.0], [37.8, 840.0], [37.9, 840.0], [38.0, 841.0], [38.1, 841.0], [38.2, 842.0], [38.3, 842.0], [38.4, 842.0], [38.5, 843.0], [38.6, 844.0], [38.7, 844.0], [38.8, 845.0], [38.9, 845.0], [39.0, 845.0], [39.1, 846.0], [39.2, 846.0], [39.3, 847.0], [39.4, 847.0], [39.5, 847.0], [39.6, 848.0], [39.7, 848.0], [39.8, 849.0], [39.9, 849.0], [40.0, 850.0], [40.1, 850.0], [40.2, 851.0], [40.3, 851.0], [40.4, 851.0], [40.5, 852.0], [40.6, 852.0], [40.7, 852.0], [40.8, 853.0], [40.9, 853.0], [41.0, 854.0], [41.1, 854.0], [41.2, 855.0], [41.3, 855.0], [41.4, 856.0], [41.5, 856.0], [41.6, 857.0], [41.7, 857.0], [41.8, 858.0], [41.9, 858.0], [42.0, 858.0], [42.1, 859.0], [42.2, 859.0], [42.3, 860.0], [42.4, 861.0], [42.5, 861.0], [42.6, 861.0], [42.7, 862.0], [42.8, 862.0], [42.9, 862.0], [43.0, 863.0], [43.1, 863.0], [43.2, 864.0], [43.3, 864.0], [43.4, 865.0], [43.5, 866.0], [43.6, 866.0], [43.7, 867.0], [43.8, 867.0], [43.9, 867.0], [44.0, 868.0], [44.1, 868.0], [44.2, 869.0], [44.3, 870.0], [44.4, 870.0], [44.5, 871.0], [44.6, 871.0], [44.7, 871.0], [44.8, 872.0], [44.9, 872.0], [45.0, 873.0], [45.1, 874.0], [45.2, 874.0], [45.3, 875.0], [45.4, 875.0], [45.5, 876.0], [45.6, 876.0], [45.7, 877.0], [45.8, 877.0], [45.9, 878.0], [46.0, 878.0], [46.1, 879.0], [46.2, 879.0], [46.3, 880.0], [46.4, 880.0], [46.5, 881.0], [46.6, 882.0], [46.7, 882.0], [46.8, 883.0], [46.9, 883.0], [47.0, 884.0], [47.1, 885.0], [47.2, 885.0], [47.3, 886.0], [47.4, 886.0], [47.5, 886.0], [47.6, 887.0], [47.7, 887.0], [47.8, 888.0], [47.9, 889.0], [48.0, 889.0], [48.1, 890.0], [48.2, 890.0], [48.3, 891.0], [48.4, 892.0], [48.5, 892.0], [48.6, 892.0], [48.7, 893.0], [48.8, 894.0], [48.9, 894.0], [49.0, 895.0], [49.1, 895.0], [49.2, 896.0], [49.3, 896.0], [49.4, 897.0], [49.5, 898.0], [49.6, 898.0], [49.7, 899.0], [49.8, 899.0], [49.9, 900.0], [50.0, 900.0], [50.1, 901.0], [50.2, 901.0], [50.3, 901.0], [50.4, 902.0], [50.5, 902.0], [50.6, 903.0], [50.7, 904.0], [50.8, 904.0], [50.9, 905.0], [51.0, 905.0], [51.1, 906.0], [51.2, 906.0], [51.3, 907.0], [51.4, 907.0], [51.5, 908.0], [51.6, 909.0], [51.7, 909.0], [51.8, 910.0], [51.9, 910.0], [52.0, 911.0], [52.1, 911.0], [52.2, 912.0], [52.3, 912.0], [52.4, 913.0], [52.5, 914.0], [52.6, 914.0], [52.7, 915.0], [52.8, 915.0], [52.9, 916.0], [53.0, 916.0], [53.1, 916.0], [53.2, 917.0], [53.3, 917.0], [53.4, 918.0], [53.5, 918.0], [53.6, 919.0], [53.7, 919.0], [53.8, 920.0], [53.9, 921.0], [54.0, 921.0], [54.1, 922.0], [54.2, 923.0], [54.3, 923.0], [54.4, 924.0], [54.5, 925.0], [54.6, 925.0], [54.7, 926.0], [54.8, 927.0], [54.9, 927.0], [55.0, 928.0], [55.1, 928.0], [55.2, 929.0], [55.3, 930.0], [55.4, 930.0], [55.5, 931.0], [55.6, 931.0], [55.7, 932.0], [55.8, 933.0], [55.9, 934.0], [56.0, 935.0], [56.1, 935.0], [56.2, 936.0], [56.3, 937.0], [56.4, 937.0], [56.5, 938.0], [56.6, 938.0], [56.7, 939.0], [56.8, 939.0], [56.9, 940.0], [57.0, 941.0], [57.1, 942.0], [57.2, 942.0], [57.3, 943.0], [57.4, 944.0], [57.5, 944.0], [57.6, 945.0], [57.7, 946.0], [57.8, 947.0], [57.9, 947.0], [58.0, 948.0], [58.1, 949.0], [58.2, 949.0], [58.3, 950.0], [58.4, 951.0], [58.5, 951.0], [58.6, 952.0], [58.7, 953.0], [58.8, 954.0], [58.9, 955.0], [59.0, 956.0], [59.1, 956.0], [59.2, 957.0], [59.3, 958.0], [59.4, 959.0], [59.5, 960.0], [59.6, 961.0], [59.7, 962.0], [59.8, 962.0], [59.9, 963.0], [60.0, 964.0], [60.1, 965.0], [60.2, 966.0], [60.3, 967.0], [60.4, 968.0], [60.5, 968.0], [60.6, 969.0], [60.7, 970.0], [60.8, 970.0], [60.9, 971.0], [61.0, 972.0], [61.1, 973.0], [61.2, 974.0], [61.3, 974.0], [61.4, 975.0], [61.5, 976.0], [61.6, 977.0], [61.7, 977.0], [61.8, 978.0], [61.9, 979.0], [62.0, 980.0], [62.1, 981.0], [62.2, 981.0], [62.3, 982.0], [62.4, 983.0], [62.5, 983.0], [62.6, 984.0], [62.7, 985.0], [62.8, 986.0], [62.9, 987.0], [63.0, 988.0], [63.1, 989.0], [63.2, 989.0], [63.3, 990.0], [63.4, 991.0], [63.5, 992.0], [63.6, 993.0], [63.7, 994.0], [63.8, 995.0], [63.9, 995.0], [64.0, 996.0], [64.1, 997.0], [64.2, 998.0], [64.3, 999.0], [64.4, 1000.0], [64.5, 1001.0], [64.6, 1002.0], [64.7, 1002.0], [64.8, 1003.0], [64.9, 1005.0], [65.0, 1007.0], [65.1, 1008.0], [65.2, 1009.0], [65.3, 1010.0], [65.4, 1011.0], [65.5, 1012.0], [65.6, 1013.0], [65.7, 1014.0], [65.8, 1015.0], [65.9, 1016.0], [66.0, 1017.0], [66.1, 1018.0], [66.2, 1019.0], [66.3, 1020.0], [66.4, 1021.0], [66.5, 1021.0], [66.6, 1022.0], [66.7, 1023.0], [66.8, 1024.0], [66.9, 1025.0], [67.0, 1026.0], [67.1, 1027.0], [67.2, 1029.0], [67.3, 1029.0], [67.4, 1030.0], [67.5, 1031.0], [67.6, 1032.0], [67.7, 1034.0], [67.8, 1035.0], [67.9, 1037.0], [68.0, 1038.0], [68.1, 1039.0], [68.2, 1041.0], [68.3, 1042.0], [68.4, 1043.0], [68.5, 1045.0], [68.6, 1046.0], [68.7, 1047.0], [68.8, 1048.0], [68.9, 1049.0], [69.0, 1050.0], [69.1, 1051.0], [69.2, 1052.0], [69.3, 1053.0], [69.4, 1055.0], [69.5, 1056.0], [69.6, 1057.0], [69.7, 1058.0], [69.8, 1059.0], [69.9, 1061.0], [70.0, 1062.0], [70.1, 1063.0], [70.2, 1065.0], [70.3, 1066.0], [70.4, 1067.0], [70.5, 1069.0], [70.6, 1070.0], [70.7, 1072.0], [70.8, 1073.0], [70.9, 1075.0], [71.0, 1076.0], [71.1, 1077.0], [71.2, 1079.0], [71.3, 1080.0], [71.4, 1081.0], [71.5, 1082.0], [71.6, 1084.0], [71.7, 1085.0], [71.8, 1086.0], [71.9, 1088.0], [72.0, 1089.0], [72.1, 1091.0], [72.2, 1092.0], [72.3, 1094.0], [72.4, 1096.0], [72.5, 1098.0], [72.6, 1099.0], [72.7, 1101.0], [72.8, 1102.0], [72.9, 1104.0], [73.0, 1105.0], [73.1, 1106.0], [73.2, 1107.0], [73.3, 1110.0], [73.4, 1111.0], [73.5, 1112.0], [73.6, 1113.0], [73.7, 1115.0], [73.8, 1116.0], [73.9, 1118.0], [74.0, 1120.0], [74.1, 1121.0], [74.2, 1123.0], [74.3, 1126.0], [74.4, 1129.0], [74.5, 1131.0], [74.6, 1132.0], [74.7, 1134.0], [74.8, 1136.0], [74.9, 1139.0], [75.0, 1141.0], [75.1, 1142.0], [75.2, 1144.0], [75.3, 1145.0], [75.4, 1149.0], [75.5, 1151.0], [75.6, 1153.0], [75.7, 1154.0], [75.8, 1158.0], [75.9, 1161.0], [76.0, 1163.0], [76.1, 1167.0], [76.2, 1170.0], [76.3, 1172.0], [76.4, 1174.0], [76.5, 1175.0], [76.6, 1178.0], [76.7, 1181.0], [76.8, 1183.0], [76.9, 1186.0], [77.0, 1188.0], [77.1, 1192.0], [77.2, 1194.0], [77.3, 1197.0], [77.4, 1200.0], [77.5, 1202.0], [77.6, 1204.0], [77.7, 1207.0], [77.8, 1210.0], [77.9, 1214.0], [78.0, 1216.0], [78.1, 1219.0], [78.2, 1221.0], [78.3, 1224.0], [78.4, 1227.0], [78.5, 1230.0], [78.6, 1233.0], [78.7, 1237.0], [78.8, 1239.0], [78.9, 1242.0], [79.0, 1246.0], [79.1, 1248.0], [79.2, 1251.0], [79.3, 1253.0], [79.4, 1257.0], [79.5, 1260.0], [79.6, 1264.0], [79.7, 1266.0], [79.8, 1270.0], [79.9, 1274.0], [80.0, 1277.0], [80.1, 1280.0], [80.2, 1282.0], [80.3, 1285.0], [80.4, 1289.0], [80.5, 1293.0], [80.6, 1296.0], [80.7, 1301.0], [80.8, 1306.0], [80.9, 1308.0], [81.0, 1312.0], [81.1, 1316.0], [81.2, 1320.0], [81.3, 1323.0], [81.4, 1328.0], [81.5, 1332.0], [81.6, 1335.0], [81.7, 1340.0], [81.8, 1346.0], [81.9, 1351.0], [82.0, 1355.0], [82.1, 1360.0], [82.2, 1367.0], [82.3, 1374.0], [82.4, 1382.0], [82.5, 1388.0], [82.6, 1398.0], [82.7, 1405.0], [82.8, 1410.0], [82.9, 1413.0], [83.0, 1419.0], [83.1, 1424.0], [83.2, 1430.0], [83.3, 1438.0], [83.4, 1445.0], [83.5, 1450.0], [83.6, 1455.0], [83.7, 1461.0], [83.8, 1468.0], [83.9, 1477.0], [84.0, 1483.0], [84.1, 1490.0], [84.2, 1496.0], [84.3, 1506.0], [84.4, 1514.0], [84.5, 1521.0], [84.6, 1528.0], [84.7, 1540.0], [84.8, 1546.0], [84.9, 1556.0], [85.0, 1561.0], [85.1, 1569.0], [85.2, 1576.0], [85.3, 1585.0], [85.4, 1594.0], [85.5, 1601.0], [85.6, 1609.0], [85.7, 1616.0], [85.8, 1624.0], [85.9, 1635.0], [86.0, 1646.0], [86.1, 1657.0], [86.2, 1663.0], [86.3, 1680.0], [86.4, 1691.0], [86.5, 1695.0], [86.6, 1706.0], [86.7, 1713.0], [86.8, 1726.0], [86.9, 1737.0], [87.0, 1746.0], [87.1, 1760.0], [87.2, 1768.0], [87.3, 1783.0], [87.4, 1793.0], [87.5, 1804.0], [87.6, 1810.0], [87.7, 1820.0], [87.8, 1830.0], [87.9, 1842.0], [88.0, 1853.0], [88.1, 1860.0], [88.2, 1869.0], [88.3, 1882.0], [88.4, 1891.0], [88.5, 1899.0], [88.6, 1907.0], [88.7, 1921.0], [88.8, 1928.0], [88.9, 1938.0], [89.0, 1948.0], [89.1, 1956.0], [89.2, 1963.0], [89.3, 1972.0], [89.4, 1982.0], [89.5, 1995.0], [89.6, 2004.0], [89.7, 2020.0], [89.8, 2030.0], [89.9, 2041.0], [90.0, 2050.0], [90.1, 2062.0], [90.2, 2069.0], [90.3, 2077.0], [90.4, 2085.0], [90.5, 2094.0], [90.6, 2107.0], [90.7, 2120.0], [90.8, 2130.0], [90.9, 2141.0], [91.0, 2156.0], [91.1, 2171.0], [91.2, 2181.0], [91.3, 2193.0], [91.4, 2202.0], [91.5, 2212.0], [91.6, 2223.0], [91.7, 2234.0], [91.8, 2245.0], [91.9, 2262.0], [92.0, 2269.0], [92.1, 2285.0], [92.2, 2298.0], [92.3, 2311.0], [92.4, 2325.0], [92.5, 2334.0], [92.6, 2345.0], [92.7, 2364.0], [92.8, 2373.0], [92.9, 2384.0], [93.0, 2394.0], [93.1, 2410.0], [93.2, 2426.0], [93.3, 2443.0], [93.4, 2456.0], [93.5, 2478.0], [93.6, 2495.0], [93.7, 2510.0], [93.8, 2526.0], [93.9, 2541.0], [94.0, 2560.0], [94.1, 2572.0], [94.2, 2587.0], [94.3, 2605.0], [94.4, 2626.0], [94.5, 2645.0], [94.6, 2660.0], [94.7, 2683.0], [94.8, 2697.0], [94.9, 2722.0], [95.0, 2747.0], [95.1, 2772.0], [95.2, 2789.0], [95.3, 2816.0], [95.4, 2842.0], [95.5, 2864.0], [95.6, 2883.0], [95.7, 2906.0], [95.8, 2925.0], [95.9, 2937.0], [96.0, 2959.0], [96.1, 2987.0], [96.2, 3007.0], [96.3, 3035.0], [96.4, 3062.0], [96.5, 3079.0], [96.6, 3109.0], [96.7, 3130.0], [96.8, 3146.0], [96.9, 3177.0], [97.0, 3197.0], [97.1, 3220.0], [97.2, 3251.0], [97.3, 3284.0], [97.4, 3356.0], [97.5, 3394.0], [97.6, 3426.0], [97.7, 3470.0], [97.8, 3526.0], [97.9, 3611.0], [98.0, 3663.0], [98.1, 3727.0], [98.2, 3765.0], [98.3, 3803.0], [98.4, 3869.0], [98.5, 3923.0], [98.6, 4002.0], [98.7, 4103.0], [98.8, 4164.0], [98.9, 4242.0], [99.0, 4318.0], [99.1, 4406.0], [99.2, 4509.0], [99.3, 4623.0], [99.4, 4771.0], [99.5, 4892.0], [99.6, 5089.0], [99.7, 5283.0], [99.8, 5542.0], [99.9, 6347.0], [100.0, 8334.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24968.0, "series": [{"data": [[0.0, 24968.0], [300.0, 1.0], [700.0, 4.0], [100.0, 8.0], [400.0, 6.0], [800.0, 4.0], [200.0, 9.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[600.0, 501.0], [700.0, 3034.0], [800.0, 2883.0], [900.0, 1863.0], [1000.0, 1067.0], [1100.0, 613.0], [1200.0, 419.0], [1300.0, 255.0], [1400.0, 208.0], [1500.0, 157.0], [1600.0, 139.0], [1700.0, 118.0], [1800.0, 134.0], [1900.0, 137.0], [2000.0, 126.0], [2100.0, 107.0], [2200.0, 108.0], [2300.0, 106.0], [2400.0, 75.0], [2500.0, 82.0], [2600.0, 71.0], [2800.0, 57.0], [2700.0, 55.0], [2900.0, 63.0], [3000.0, 53.0], [3100.0, 57.0], [3200.0, 37.0], [3300.0, 26.0], [3400.0, 33.0], [3500.0, 17.0], [3700.0, 29.0], [3600.0, 22.0], [3800.0, 21.0], [3900.0, 17.0], [4000.0, 13.0], [4300.0, 15.0], [4100.0, 23.0], [4200.0, 15.0], [4500.0, 7.0], [4600.0, 16.0], [4400.0, 12.0], [4800.0, 10.0], [4700.0, 7.0], [4900.0, 8.0], [5000.0, 7.0], [5100.0, 4.0], [5300.0, 8.0], [5200.0, 7.0], [5600.0, 1.0], [5500.0, 3.0], [5400.0, 4.0], [5800.0, 2.0], [5700.0, 1.0], [5900.0, 4.0], [6300.0, 3.0], [6200.0, 1.0], [6400.0, 3.0], [6700.0, 4.0], [7100.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [8300.0, 1.0], [400.0, 2.0], [500.0, 6.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2028.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24994.0, "series": [{"data": [[0.0, 24994.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 10858.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2028.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 46.15463690432473, "minX": 1.64863908E12, "maxY": 50.0, "series": [{"data": [[1.64863932E12, 50.0], [1.64863914E12, 50.0], [1.64863926E12, 50.0], [1.64863908E12, 46.15463690432473], [1.64863938E12, 46.5], [1.6486392E12, 50.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64863938E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.1864406779661014, "minX": 1.0, "maxY": 4859.0, "series": [{"data": [[2.0, 1.4], [3.0, 1.1864406779661014], [4.0, 1.3361344537815125], [5.0, 1.261904761904762], [6.0, 1.4382716049382709], [7.0, 17.15625], [8.0, 2.9425287356321834], [9.0, 5.8529411764705905], [10.0, 4.833333333333332], [11.0, 4.981818181818181], [12.0, 3.9662921348314617], [13.0, 3.3013698630136994], [14.0, 8.514285714285712], [15.0, 4.601769911504428], [16.0, 6.414285714285716], [17.0, 8.77142857142857], [18.0, 3.4888888888888907], [19.0, 6.544117647058823], [20.0, 11.666666666666666], [21.0, 13.947368421052628], [22.0, 7.095744680851068], [23.0, 7.701754385964909], [24.0, 6.529411764705883], [25.0, 7.041237113402062], [26.0, 5.406896551724139], [27.0, 8.622950819672129], [28.0, 6.319018404907972], [29.0, 8.320512820512823], [30.0, 11.642857142857144], [31.0, 8.0921052631579], [32.0, 11.14516129032258], [33.0, 8.13978494623656], [34.0, 9.324324324324321], [35.0, 7.971962616822431], [36.0, 5.548042704626332], [37.0, 9.628865979381441], [38.0, 7.4583333333333295], [39.0, 8.774774774774778], [40.0, 7.751269035532995], [41.0, 8.265151515151516], [42.0, 13.506329113924044], [43.0, 8.5609756097561], [44.0, 7.890173410404626], [45.0, 7.834319526627217], [46.0, 6.013368983957219], [47.0, 8.559523809523812], [48.0, 9.000000000000004], [49.0, 13.609375], [50.0, 6.977561323881864], [1.0, 1.2]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[45.81219999999994, 6.9692799999999915]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 1699.0], [3.0, 1621.0], [4.0, 1809.0], [5.0, 1897.0], [6.0, 2710.0], [7.0, 3205.0], [8.0, 2697.0], [9.0, 2044.0], [10.0, 946.0], [11.0, 3638.0], [12.0, 989.0], [13.0, 1289.0], [14.0, 1018.0], [15.0, 1065.0], [16.0, 4859.0], [17.0, 1569.0], [18.0, 1231.0], [19.0, 814.0], [20.0, 1187.0], [21.0, 780.0], [22.0, 1129.0], [23.0, 988.0], [24.0, 1624.0], [25.0, 1200.0], [26.0, 849.0], [27.0, 806.0], [28.0, 826.0], [29.0, 4322.0], [30.0, 4406.0], [31.0, 1885.0], [33.0, 863.0], [32.0, 732.0], [35.0, 1137.0], [34.0, 726.0], [36.0, 976.5], [37.0, 1080.0], [39.0, 743.0], [38.0, 1467.0], [41.0, 814.5], [40.0, 846.0], [43.0, 636.5], [42.0, 1401.0], [44.0, 762.5], [45.0, 793.5], [46.0, 599.5], [47.0, 878.0], [49.0, 676.0], [48.0, 669.0], [50.0, 1164.0882651072127], [1.0, 1810.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[49.901397515528004, 1165.1186335403695]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 758.3333333333334, "minX": 1.64863908E12, "maxY": 2.89166774E7, "series": [{"data": [[1.64863932E12, 2.8053493E7], [1.64863914E12, 2.89166774E7], [1.64863926E12, 2.8175224133333333E7], [1.64863908E12, 2.48090673E7], [1.64863938E12, 3873263.3333333335], [1.6486392E12, 2.87506804E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64863932E12, 5492.5], [1.64863914E12, 5661.5], [1.64863926E12, 5516.333333333333], [1.64863908E12, 111932.33333333333], [1.64863938E12, 758.3333333333334], [1.6486392E12, 5629.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64863938E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6.9692799999999915, "minX": 1.64863908E12, "maxY": 1244.1800000000003, "series": [{"data": [[1.64863908E12, 6.9692799999999915]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64863932E12, 1181.3408284023658], [1.64863914E12, 1147.285112897052], [1.64863926E12, 1176.2989002356637], [1.64863908E12, 1154.8181411974967], [1.64863938E12, 1244.1800000000003], [1.6486392E12, 1154.4919168591239]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64863938E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6.965999999999961, "minX": 1.64863908E12, "maxY": 1243.4342857142867, "series": [{"data": [[1.64863908E12, 6.965999999999961]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64863932E12, 1180.6027613412216], [1.64863914E12, 1146.6253348641405], [1.64863926E12, 1175.602120974076], [1.64863908E12, 1154.0232350312767], [1.64863938E12, 1243.4342857142867], [1.6486392E12, 1153.8183217859912]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64863938E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64863908E12, "maxY": 0.005808757819481674, "series": [{"data": [[1.64863908E12, 4.4000000000000067E-4]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.64863932E12, 0.0035502958579881625], [1.64863914E12, 0.0026789131266743275], [1.64863926E12, 0.005498821681068352], [1.64863908E12, 0.005808757819481674], [1.64863938E12, 0.0], [1.6486392E12, 0.0030792917628945514]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64863938E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.64863908E12, "maxY": 8334.0, "series": [{"data": [[1.64863932E12, 6799.0], [1.64863914E12, 6475.0], [1.64863926E12, 7646.0], [1.64863908E12, 8334.0], [1.64863938E12, 5438.0], [1.6486392E12, 7127.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64863932E12, 2107.0], [1.64863914E12, 1995.6], [1.64863926E12, 2020.2000000000007], [1.64863908E12, 732.0], [1.64863938E12, 2236.6000000000035], [1.6486392E12, 2058.5999999999995]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64863932E12, 4604.199999999999], [1.64863914E12, 4102.72], [1.64863926E12, 4543.4500000000135], [1.64863908E12, 2129.9900000000016], [1.64863938E12, 4760.5700000000015], [1.6486392E12, 4106.779999999982]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64863932E12, 2772.7999999999993], [1.64863914E12, 2763.8999999999965], [1.64863926E12, 2760.1000000000013], [1.64863908E12, 935.0], [1.64863938E12, 3170.899999999999], [1.6486392E12, 2726.349999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64863932E12, 625.0], [1.64863914E12, 590.0], [1.64863926E12, 587.0], [1.64863908E12, 1.0], [1.64863938E12, 664.0], [1.6486392E12, 614.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64863932E12, 907.0], [1.64863914E12, 892.0], [1.64863926E12, 906.0], [1.64863908E12, 5.0], [1.64863938E12, 928.0], [1.6486392E12, 888.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64863938E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 9.0, "maxY": 1897.0, "series": [{"data": [[35.0, 908.0], [37.0, 980.0], [36.0, 1015.5], [9.0, 1897.0], [2463.0, 13.0], [39.0, 896.0], [38.0, 924.0], [40.0, 919.5], [41.0, 902.0], [42.0, 901.5], [43.0, 894.0], [44.0, 898.0], [45.0, 882.5], [47.0, 886.0], [46.0, 898.5], [48.0, 874.0], [87.0, 1.0], [6396.0, 7.0], [112.0, 9.0], [7801.0, 5.0], [8147.0, 5.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8147.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 9.0, "maxY": 1896.0, "series": [{"data": [[35.0, 908.0], [37.0, 979.0], [36.0, 1015.0], [9.0, 1896.0], [2463.0, 13.0], [39.0, 894.0], [38.0, 921.5], [40.0, 919.5], [41.0, 902.0], [42.0, 901.0], [43.0, 893.0], [44.0, 897.0], [45.0, 881.5], [47.0, 885.5], [46.0, 898.0], [48.0, 873.0], [87.0, 1.0], [6396.0, 7.0], [112.0, 9.0], [7801.0, 5.0], [8147.0, 5.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8147.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.64863908E12, "maxY": 454.8, "series": [{"data": [[1.64863932E12, 42.25], [1.64863914E12, 43.55], [1.64863926E12, 42.43333333333333], [1.64863908E12, 454.8], [1.64863938E12, 5.0], [1.6486392E12, 43.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64863938E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.833333333333333, "minX": 1.64863908E12, "maxY": 416.6666666666667, "series": [{"data": [[1.64863932E12, 42.25], [1.64863914E12, 43.55], [1.64863926E12, 42.43333333333333], [1.64863908E12, 37.3], [1.64863938E12, 5.833333333333333], [1.6486392E12, 43.3]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.64863908E12, 416.6666666666667]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64863938E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.833333333333333, "minX": 1.64863908E12, "maxY": 416.6666666666667, "series": [{"data": [[1.64863932E12, 42.25], [1.64863914E12, 43.55], [1.64863926E12, 42.43333333333333], [1.64863908E12, 37.3], [1.64863938E12, 5.833333333333333], [1.6486392E12, 43.3]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.64863908E12, 416.6666666666667]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64863938E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.833333333333333, "minX": 1.64863908E12, "maxY": 453.96666666666664, "series": [{"data": [[1.64863932E12, 42.25], [1.64863914E12, 43.55], [1.64863926E12, 42.43333333333333], [1.64863908E12, 453.96666666666664], [1.64863938E12, 5.833333333333333], [1.6486392E12, 43.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64863938E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

