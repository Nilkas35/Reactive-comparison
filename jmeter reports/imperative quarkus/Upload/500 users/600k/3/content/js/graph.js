/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1537.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 2.0], [0.3, 2.0], [0.4, 3.0], [0.5, 4.0], [0.6, 5.0], [0.7, 7.0], [0.8, 8.0], [0.9, 10.0], [1.0, 11.0], [1.1, 12.0], [1.2, 13.0], [1.3, 14.0], [1.4, 15.0], [1.5, 16.0], [1.6, 17.0], [1.7, 17.0], [1.8, 17.0], [1.9, 17.0], [2.0, 17.0], [2.1, 17.0], [2.2, 18.0], [2.3, 18.0], [2.4, 18.0], [2.5, 18.0], [2.6, 18.0], [2.7, 18.0], [2.8, 18.0], [2.9, 18.0], [3.0, 18.0], [3.1, 18.0], [3.2, 18.0], [3.3, 18.0], [3.4, 18.0], [3.5, 18.0], [3.6, 18.0], [3.7, 18.0], [3.8, 18.0], [3.9, 18.0], [4.0, 18.0], [4.1, 18.0], [4.2, 18.0], [4.3, 18.0], [4.4, 18.0], [4.5, 18.0], [4.6, 18.0], [4.7, 18.0], [4.8, 18.0], [4.9, 18.0], [5.0, 18.0], [5.1, 18.0], [5.2, 18.0], [5.3, 18.0], [5.4, 18.0], [5.5, 18.0], [5.6, 18.0], [5.7, 18.0], [5.8, 18.0], [5.9, 18.0], [6.0, 18.0], [6.1, 18.0], [6.2, 18.0], [6.3, 18.0], [6.4, 18.0], [6.5, 18.0], [6.6, 18.0], [6.7, 18.0], [6.8, 18.0], [6.9, 18.0], [7.0, 18.0], [7.1, 18.0], [7.2, 18.0], [7.3, 18.0], [7.4, 18.0], [7.5, 18.0], [7.6, 18.0], [7.7, 18.0], [7.8, 18.0], [7.9, 18.0], [8.0, 18.0], [8.1, 18.0], [8.2, 18.0], [8.3, 18.0], [8.4, 18.0], [8.5, 18.0], [8.6, 18.0], [8.7, 18.0], [8.8, 18.0], [8.9, 18.0], [9.0, 18.0], [9.1, 18.0], [9.2, 18.0], [9.3, 18.0], [9.4, 18.0], [9.5, 18.0], [9.6, 18.0], [9.7, 18.0], [9.8, 18.0], [9.9, 18.0], [10.0, 18.0], [10.1, 18.0], [10.2, 18.0], [10.3, 18.0], [10.4, 18.0], [10.5, 18.0], [10.6, 18.0], [10.7, 18.0], [10.8, 18.0], [10.9, 18.0], [11.0, 18.0], [11.1, 18.0], [11.2, 18.0], [11.3, 18.0], [11.4, 18.0], [11.5, 18.0], [11.6, 18.0], [11.7, 18.0], [11.8, 18.0], [11.9, 18.0], [12.0, 18.0], [12.1, 18.0], [12.2, 18.0], [12.3, 18.0], [12.4, 18.0], [12.5, 18.0], [12.6, 18.0], [12.7, 18.0], [12.8, 18.0], [12.9, 18.0], [13.0, 18.0], [13.1, 18.0], [13.2, 18.0], [13.3, 18.0], [13.4, 18.0], [13.5, 18.0], [13.6, 18.0], [13.7, 19.0], [13.8, 19.0], [13.9, 19.0], [14.0, 19.0], [14.1, 19.0], [14.2, 19.0], [14.3, 19.0], [14.4, 19.0], [14.5, 19.0], [14.6, 19.0], [14.7, 19.0], [14.8, 19.0], [14.9, 19.0], [15.0, 19.0], [15.1, 19.0], [15.2, 19.0], [15.3, 19.0], [15.4, 19.0], [15.5, 19.0], [15.6, 19.0], [15.7, 19.0], [15.8, 19.0], [15.9, 19.0], [16.0, 19.0], [16.1, 19.0], [16.2, 19.0], [16.3, 19.0], [16.4, 19.0], [16.5, 19.0], [16.6, 19.0], [16.7, 19.0], [16.8, 19.0], [16.9, 19.0], [17.0, 19.0], [17.1, 19.0], [17.2, 19.0], [17.3, 19.0], [17.4, 19.0], [17.5, 19.0], [17.6, 19.0], [17.7, 19.0], [17.8, 19.0], [17.9, 19.0], [18.0, 19.0], [18.1, 19.0], [18.2, 19.0], [18.3, 19.0], [18.4, 19.0], [18.5, 19.0], [18.6, 19.0], [18.7, 19.0], [18.8, 19.0], [18.9, 19.0], [19.0, 19.0], [19.1, 19.0], [19.2, 19.0], [19.3, 19.0], [19.4, 19.0], [19.5, 19.0], [19.6, 19.0], [19.7, 19.0], [19.8, 19.0], [19.9, 19.0], [20.0, 19.0], [20.1, 19.0], [20.2, 19.0], [20.3, 19.0], [20.4, 19.0], [20.5, 19.0], [20.6, 19.0], [20.7, 19.0], [20.8, 19.0], [20.9, 19.0], [21.0, 19.0], [21.1, 19.0], [21.2, 19.0], [21.3, 19.0], [21.4, 19.0], [21.5, 19.0], [21.6, 19.0], [21.7, 19.0], [21.8, 19.0], [21.9, 19.0], [22.0, 19.0], [22.1, 19.0], [22.2, 19.0], [22.3, 19.0], [22.4, 19.0], [22.5, 19.0], [22.6, 19.0], [22.7, 19.0], [22.8, 19.0], [22.9, 19.0], [23.0, 19.0], [23.1, 19.0], [23.2, 19.0], [23.3, 19.0], [23.4, 19.0], [23.5, 19.0], [23.6, 19.0], [23.7, 19.0], [23.8, 19.0], [23.9, 19.0], [24.0, 19.0], [24.1, 19.0], [24.2, 19.0], [24.3, 19.0], [24.4, 19.0], [24.5, 19.0], [24.6, 19.0], [24.7, 19.0], [24.8, 19.0], [24.9, 19.0], [25.0, 19.0], [25.1, 19.0], [25.2, 19.0], [25.3, 19.0], [25.4, 19.0], [25.5, 19.0], [25.6, 19.0], [25.7, 19.0], [25.8, 19.0], [25.9, 19.0], [26.0, 19.0], [26.1, 19.0], [26.2, 19.0], [26.3, 19.0], [26.4, 19.0], [26.5, 19.0], [26.6, 19.0], [26.7, 19.0], [26.8, 19.0], [26.9, 19.0], [27.0, 19.0], [27.1, 19.0], [27.2, 19.0], [27.3, 19.0], [27.4, 19.0], [27.5, 19.0], [27.6, 19.0], [27.7, 19.0], [27.8, 19.0], [27.9, 19.0], [28.0, 19.0], [28.1, 19.0], [28.2, 19.0], [28.3, 19.0], [28.4, 19.0], [28.5, 19.0], [28.6, 19.0], [28.7, 19.0], [28.8, 19.0], [28.9, 19.0], [29.0, 19.0], [29.1, 19.0], [29.2, 19.0], [29.3, 19.0], [29.4, 19.0], [29.5, 19.0], [29.6, 19.0], [29.7, 19.0], [29.8, 19.0], [29.9, 19.0], [30.0, 19.0], [30.1, 19.0], [30.2, 19.0], [30.3, 19.0], [30.4, 19.0], [30.5, 19.0], [30.6, 19.0], [30.7, 19.0], [30.8, 19.0], [30.9, 19.0], [31.0, 19.0], [31.1, 19.0], [31.2, 19.0], [31.3, 19.0], [31.4, 19.0], [31.5, 19.0], [31.6, 19.0], [31.7, 19.0], [31.8, 19.0], [31.9, 19.0], [32.0, 19.0], [32.1, 19.0], [32.2, 19.0], [32.3, 19.0], [32.4, 19.0], [32.5, 19.0], [32.6, 19.0], [32.7, 19.0], [32.8, 19.0], [32.9, 19.0], [33.0, 19.0], [33.1, 19.0], [33.2, 19.0], [33.3, 19.0], [33.4, 19.0], [33.5, 19.0], [33.6, 19.0], [33.7, 19.0], [33.8, 19.0], [33.9, 19.0], [34.0, 19.0], [34.1, 19.0], [34.2, 19.0], [34.3, 19.0], [34.4, 19.0], [34.5, 19.0], [34.6, 19.0], [34.7, 19.0], [34.8, 19.0], [34.9, 19.0], [35.0, 19.0], [35.1, 19.0], [35.2, 19.0], [35.3, 19.0], [35.4, 19.0], [35.5, 19.0], [35.6, 19.0], [35.7, 19.0], [35.8, 19.0], [35.9, 19.0], [36.0, 19.0], [36.1, 19.0], [36.2, 19.0], [36.3, 19.0], [36.4, 19.0], [36.5, 19.0], [36.6, 19.0], [36.7, 19.0], [36.8, 19.0], [36.9, 19.0], [37.0, 19.0], [37.1, 19.0], [37.2, 20.0], [37.3, 20.0], [37.4, 20.0], [37.5, 20.0], [37.6, 20.0], [37.7, 20.0], [37.8, 20.0], [37.9, 20.0], [38.0, 20.0], [38.1, 20.0], [38.2, 20.0], [38.3, 20.0], [38.4, 20.0], [38.5, 20.0], [38.6, 20.0], [38.7, 20.0], [38.8, 20.0], [38.9, 20.0], [39.0, 20.0], [39.1, 20.0], [39.2, 20.0], [39.3, 20.0], [39.4, 20.0], [39.5, 20.0], [39.6, 20.0], [39.7, 20.0], [39.8, 20.0], [39.9, 20.0], [40.0, 20.0], [40.1, 20.0], [40.2, 20.0], [40.3, 20.0], [40.4, 20.0], [40.5, 20.0], [40.6, 20.0], [40.7, 20.0], [40.8, 20.0], [40.9, 20.0], [41.0, 20.0], [41.1, 20.0], [41.2, 20.0], [41.3, 20.0], [41.4, 20.0], [41.5, 20.0], [41.6, 20.0], [41.7, 20.0], [41.8, 20.0], [41.9, 20.0], [42.0, 20.0], [42.1, 20.0], [42.2, 20.0], [42.3, 20.0], [42.4, 20.0], [42.5, 20.0], [42.6, 20.0], [42.7, 20.0], [42.8, 20.0], [42.9, 20.0], [43.0, 20.0], [43.1, 20.0], [43.2, 20.0], [43.3, 20.0], [43.4, 20.0], [43.5, 20.0], [43.6, 20.0], [43.7, 20.0], [43.8, 20.0], [43.9, 20.0], [44.0, 20.0], [44.1, 20.0], [44.2, 20.0], [44.3, 20.0], [44.4, 20.0], [44.5, 20.0], [44.6, 20.0], [44.7, 20.0], [44.8, 20.0], [44.9, 20.0], [45.0, 20.0], [45.1, 20.0], [45.2, 20.0], [45.3, 20.0], [45.4, 20.0], [45.5, 20.0], [45.6, 20.0], [45.7, 20.0], [45.8, 20.0], [45.9, 20.0], [46.0, 20.0], [46.1, 20.0], [46.2, 20.0], [46.3, 20.0], [46.4, 20.0], [46.5, 21.0], [46.6, 21.0], [46.7, 21.0], [46.8, 21.0], [46.9, 21.0], [47.0, 21.0], [47.1, 21.0], [47.2, 21.0], [47.3, 21.0], [47.4, 21.0], [47.5, 21.0], [47.6, 21.0], [47.7, 21.0], [47.8, 21.0], [47.9, 21.0], [48.0, 21.0], [48.1, 21.0], [48.2, 21.0], [48.3, 21.0], [48.4, 21.0], [48.5, 21.0], [48.6, 21.0], [48.7, 21.0], [48.8, 21.0], [48.9, 21.0], [49.0, 21.0], [49.1, 21.0], [49.2, 21.0], [49.3, 21.0], [49.4, 21.0], [49.5, 21.0], [49.6, 21.0], [49.7, 21.0], [49.8, 21.0], [49.9, 21.0], [50.0, 21.0], [50.1, 21.0], [50.2, 21.0], [50.3, 21.0], [50.4, 21.0], [50.5, 21.0], [50.6, 21.0], [50.7, 21.0], [50.8, 21.0], [50.9, 21.0], [51.0, 21.0], [51.1, 21.0], [51.2, 21.0], [51.3, 21.0], [51.4, 21.0], [51.5, 21.0], [51.6, 21.0], [51.7, 21.0], [51.8, 21.0], [51.9, 21.0], [52.0, 22.0], [52.1, 22.0], [52.2, 22.0], [52.3, 22.0], [52.4, 22.0], [52.5, 22.0], [52.6, 22.0], [52.7, 22.0], [52.8, 22.0], [52.9, 22.0], [53.0, 22.0], [53.1, 22.0], [53.2, 22.0], [53.3, 22.0], [53.4, 22.0], [53.5, 22.0], [53.6, 22.0], [53.7, 22.0], [53.8, 22.0], [53.9, 22.0], [54.0, 22.0], [54.1, 22.0], [54.2, 22.0], [54.3, 22.0], [54.4, 22.0], [54.5, 22.0], [54.6, 22.0], [54.7, 22.0], [54.8, 22.0], [54.9, 22.0], [55.0, 22.0], [55.1, 22.0], [55.2, 22.0], [55.3, 22.0], [55.4, 22.0], [55.5, 22.0], [55.6, 22.0], [55.7, 22.0], [55.8, 22.0], [55.9, 22.0], [56.0, 22.0], [56.1, 22.0], [56.2, 22.0], [56.3, 22.0], [56.4, 22.0], [56.5, 22.0], [56.6, 22.0], [56.7, 22.0], [56.8, 22.0], [56.9, 22.0], [57.0, 22.0], [57.1, 22.0], [57.2, 22.0], [57.3, 22.0], [57.4, 22.0], [57.5, 22.0], [57.6, 23.0], [57.7, 23.0], [57.8, 23.0], [57.9, 23.0], [58.0, 23.0], [58.1, 23.0], [58.2, 23.0], [58.3, 23.0], [58.4, 23.0], [58.5, 23.0], [58.6, 23.0], [58.7, 23.0], [58.8, 23.0], [58.9, 23.0], [59.0, 23.0], [59.1, 23.0], [59.2, 23.0], [59.3, 23.0], [59.4, 23.0], [59.5, 23.0], [59.6, 23.0], [59.7, 23.0], [59.8, 23.0], [59.9, 24.0], [60.0, 24.0], [60.1, 24.0], [60.2, 24.0], [60.3, 24.0], [60.4, 24.0], [60.5, 24.0], [60.6, 24.0], [60.7, 24.0], [60.8, 24.0], [60.9, 24.0], [61.0, 24.0], [61.1, 25.0], [61.2, 25.0], [61.3, 25.0], [61.4, 25.0], [61.5, 25.0], [61.6, 25.0], [61.7, 25.0], [61.8, 25.0], [61.9, 25.0], [62.0, 25.0], [62.1, 25.0], [62.2, 25.0], [62.3, 25.0], [62.4, 25.0], [62.5, 25.0], [62.6, 26.0], [62.7, 26.0], [62.8, 26.0], [62.9, 26.0], [63.0, 26.0], [63.1, 26.0], [63.2, 26.0], [63.3, 26.0], [63.4, 26.0], [63.5, 26.0], [63.6, 26.0], [63.7, 26.0], [63.8, 26.0], [63.9, 26.0], [64.0, 26.0], [64.1, 27.0], [64.2, 27.0], [64.3, 27.0], [64.4, 27.0], [64.5, 27.0], [64.6, 27.0], [64.7, 27.0], [64.8, 27.0], [64.9, 27.0], [65.0, 27.0], [65.1, 27.0], [65.2, 27.0], [65.3, 28.0], [65.4, 28.0], [65.5, 28.0], [65.6, 28.0], [65.7, 28.0], [65.8, 28.0], [65.9, 28.0], [66.0, 28.0], [66.1, 28.0], [66.2, 29.0], [66.3, 29.0], [66.4, 29.0], [66.5, 29.0], [66.6, 29.0], [66.7, 29.0], [66.8, 29.0], [66.9, 29.0], [67.0, 30.0], [67.1, 30.0], [67.2, 30.0], [67.3, 30.0], [67.4, 30.0], [67.5, 30.0], [67.6, 30.0], [67.7, 31.0], [67.8, 31.0], [67.9, 31.0], [68.0, 31.0], [68.1, 31.0], [68.2, 31.0], [68.3, 31.0], [68.4, 31.0], [68.5, 31.0], [68.6, 32.0], [68.7, 32.0], [68.8, 32.0], [68.9, 32.0], [69.0, 32.0], [69.1, 32.0], [69.2, 32.0], [69.3, 32.0], [69.4, 32.0], [69.5, 33.0], [69.6, 33.0], [69.7, 33.0], [69.8, 33.0], [69.9, 33.0], [70.0, 33.0], [70.1, 33.0], [70.2, 33.0], [70.3, 33.0], [70.4, 34.0], [70.5, 34.0], [70.6, 34.0], [70.7, 34.0], [70.8, 34.0], [70.9, 34.0], [71.0, 34.0], [71.1, 35.0], [71.2, 35.0], [71.3, 35.0], [71.4, 35.0], [71.5, 35.0], [71.6, 36.0], [71.7, 36.0], [71.8, 36.0], [71.9, 37.0], [72.0, 37.0], [72.1, 37.0], [72.2, 38.0], [72.3, 38.0], [72.4, 39.0], [72.5, 40.0], [72.6, 40.0], [72.7, 41.0], [72.8, 42.0], [72.9, 42.0], [73.0, 43.0], [73.1, 44.0], [73.2, 44.0], [73.3, 45.0], [73.4, 46.0], [73.5, 46.0], [73.6, 46.0], [73.7, 47.0], [73.8, 47.0], [73.9, 47.0], [74.0, 47.0], [74.1, 48.0], [74.2, 48.0], [74.3, 48.0], [74.4, 48.0], [74.5, 48.0], [74.6, 48.0], [74.7, 48.0], [74.8, 48.0], [74.9, 49.0], [75.0, 49.0], [75.1, 49.0], [75.2, 49.0], [75.3, 49.0], [75.4, 49.0], [75.5, 49.0], [75.6, 49.0], [75.7, 49.0], [75.8, 49.0], [75.9, 49.0], [76.0, 50.0], [76.1, 50.0], [76.2, 50.0], [76.3, 50.0], [76.4, 50.0], [76.5, 50.0], [76.6, 50.0], [76.7, 50.0], [76.8, 50.0], [76.9, 50.0], [77.0, 50.0], [77.1, 50.0], [77.2, 50.0], [77.3, 50.0], [77.4, 50.0], [77.5, 51.0], [77.6, 51.0], [77.7, 51.0], [77.8, 51.0], [77.9, 51.0], [78.0, 51.0], [78.1, 51.0], [78.2, 51.0], [78.3, 51.0], [78.4, 51.0], [78.5, 51.0], [78.6, 51.0], [78.7, 51.0], [78.8, 51.0], [78.9, 51.0], [79.0, 51.0], [79.1, 51.0], [79.2, 52.0], [79.3, 52.0], [79.4, 52.0], [79.5, 52.0], [79.6, 52.0], [79.7, 52.0], [79.8, 52.0], [79.9, 52.0], [80.0, 52.0], [80.1, 52.0], [80.2, 52.0], [80.3, 52.0], [80.4, 52.0], [80.5, 52.0], [80.6, 52.0], [80.7, 52.0], [80.8, 52.0], [80.9, 52.0], [81.0, 52.0], [81.1, 53.0], [81.2, 53.0], [81.3, 53.0], [81.4, 53.0], [81.5, 53.0], [81.6, 53.0], [81.7, 53.0], [81.8, 53.0], [81.9, 53.0], [82.0, 53.0], [82.1, 53.0], [82.2, 53.0], [82.3, 53.0], [82.4, 53.0], [82.5, 53.0], [82.6, 53.0], [82.7, 53.0], [82.8, 53.0], [82.9, 54.0], [83.0, 54.0], [83.1, 54.0], [83.2, 54.0], [83.3, 54.0], [83.4, 54.0], [83.5, 54.0], [83.6, 54.0], [83.7, 54.0], [83.8, 54.0], [83.9, 54.0], [84.0, 54.0], [84.1, 54.0], [84.2, 54.0], [84.3, 54.0], [84.4, 54.0], [84.5, 54.0], [84.6, 54.0], [84.7, 55.0], [84.8, 55.0], [84.9, 55.0], [85.0, 55.0], [85.1, 55.0], [85.2, 55.0], [85.3, 55.0], [85.4, 55.0], [85.5, 55.0], [85.6, 55.0], [85.7, 55.0], [85.8, 55.0], [85.9, 55.0], [86.0, 56.0], [86.1, 56.0], [86.2, 56.0], [86.3, 56.0], [86.4, 56.0], [86.5, 56.0], [86.6, 56.0], [86.7, 56.0], [86.8, 56.0], [86.9, 57.0], [87.0, 57.0], [87.1, 57.0], [87.2, 57.0], [87.3, 57.0], [87.4, 57.0], [87.5, 57.0], [87.6, 58.0], [87.7, 58.0], [87.8, 58.0], [87.9, 58.0], [88.0, 58.0], [88.1, 59.0], [88.2, 59.0], [88.3, 59.0], [88.4, 59.0], [88.5, 60.0], [88.6, 60.0], [88.7, 61.0], [88.8, 61.0], [88.9, 61.0], [89.0, 62.0], [89.1, 62.0], [89.2, 63.0], [89.3, 63.0], [89.4, 63.0], [89.5, 64.0], [89.6, 64.0], [89.7, 65.0], [89.8, 66.0], [89.9, 66.0], [90.0, 67.0], [90.1, 68.0], [90.2, 69.0], [90.3, 70.0], [90.4, 71.0], [90.5, 71.0], [90.6, 72.0], [90.7, 73.0], [90.8, 74.0], [90.9, 76.0], [91.0, 77.0], [91.1, 77.0], [91.2, 78.0], [91.3, 79.0], [91.4, 79.0], [91.5, 80.0], [91.6, 80.0], [91.7, 81.0], [91.8, 81.0], [91.9, 81.0], [92.0, 82.0], [92.1, 82.0], [92.2, 82.0], [92.3, 82.0], [92.4, 83.0], [92.5, 83.0], [92.6, 83.0], [92.7, 83.0], [92.8, 84.0], [92.9, 84.0], [93.0, 84.0], [93.1, 84.0], [93.2, 85.0], [93.3, 85.0], [93.4, 85.0], [93.5, 85.0], [93.6, 85.0], [93.7, 86.0], [93.8, 86.0], [93.9, 86.0], [94.0, 86.0], [94.1, 86.0], [94.2, 87.0], [94.3, 87.0], [94.4, 87.0], [94.5, 87.0], [94.6, 88.0], [94.7, 88.0], [94.8, 88.0], [94.9, 88.0], [95.0, 89.0], [95.1, 89.0], [95.2, 89.0], [95.3, 90.0], [95.4, 90.0], [95.5, 91.0], [95.6, 91.0], [95.7, 92.0], [95.8, 92.0], [95.9, 93.0], [96.0, 94.0], [96.1, 95.0], [96.2, 96.0], [96.3, 98.0], [96.4, 99.0], [96.5, 102.0], [96.6, 104.0], [96.7, 106.0], [96.8, 109.0], [96.9, 111.0], [97.0, 113.0], [97.1, 114.0], [97.2, 115.0], [97.3, 116.0], [97.4, 117.0], [97.5, 119.0], [97.6, 120.0], [97.7, 121.0], [97.8, 123.0], [97.9, 124.0], [98.0, 126.0], [98.1, 128.0], [98.2, 131.0], [98.3, 133.0], [98.4, 136.0], [98.5, 141.0], [98.6, 145.0], [98.7, 148.0], [98.8, 152.0], [98.9, 156.0], [99.0, 159.0], [99.1, 164.0], [99.2, 169.0], [99.3, 174.0], [99.4, 180.0], [99.5, 186.0], [99.6, 192.0], [99.7, 204.0], [99.8, 236.0], [99.9, 292.0], [100.0, 1537.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 578431.0, "series": [{"data": [[0.0, 578431.0], [600.0, 19.0], [700.0, 49.0], [200.0, 1443.0], [800.0, 39.0], [900.0, 39.0], [1000.0, 31.0], [1100.0, 3.0], [300.0, 258.0], [1200.0, 2.0], [1500.0, 1.0], [400.0, 65.0], [100.0, 19605.0], [500.0, 15.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 599803.0, "series": [{"data": [[0.0, 599803.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 196.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 494.3033749999974, "minX": 1.64932788E12, "maxY": 494.3033749999974, "series": [{"data": [[1.64932788E12, 494.3033749999974]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64932788E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.75, "minX": 1.0, "maxY": 132.83333333333334, "series": [{"data": [[2.0, 1.0], [3.0, 0.8999999999999999], [4.0, 1.0370370370370374], [5.0, 1.0454545454545456], [6.0, 1.0], [8.0, 1.130434782608696], [10.0, 1.1764705882352942], [11.0, 1.2083333333333337], [12.0, 3.3333333333333335], [13.0, 1.25], [14.0, 1.125], [15.0, 1.4999999999999998], [16.0, 1.75], [17.0, 1.0], [18.0, 1.3928571428571428], [19.0, 1.5714285714285714], [20.0, 1.6666666666666665], [21.0, 2.0], [22.0, 1.3333333333333333], [23.0, 1.7894736842105265], [24.0, 2.0], [25.0, 1.714285714285714], [26.0, 2.2], [27.0, 2.433333333333334], [28.0, 1.75], [29.0, 2.578947368421053], [30.0, 3.75], [31.0, 2.7777777777777777], [32.0, 2.3571428571428577], [35.0, 2.3333333333333335], [34.0, 2.5], [37.0, 1.0], [36.0, 2.800000000000001], [39.0, 3.599999999999999], [38.0, 2.0], [41.0, 9.25], [40.0, 3.6363636363636362], [43.0, 5.0], [42.0, 3.9], [45.0, 2.0], [44.0, 4.499999999999999], [47.0, 5.4], [46.0, 2.4285714285714284], [49.0, 5.0], [48.0, 3.8333333333333335], [51.0, 4.866666666666667], [50.0, 3.7], [53.0, 4.222222222222222], [52.0, 6.454545454545455], [55.0, 3.0], [54.0, 6.727272727272727], [56.0, 5.0], [58.0, 6.666666666666667], [60.0, 5.1000000000000005], [63.0, 7.433333333333332], [62.0, 7.666666666666667], [67.0, 8.290322580645165], [66.0, 10.666666666666666], [65.0, 6.333333333333333], [64.0, 6.333333333333333], [71.0, 2.1], [70.0, 2.0769230769230766], [69.0, 8.11111111111111], [75.0, 9.629629629629633], [74.0, 8.68421052631579], [73.0, 6.714285714285714], [72.0, 3.2820512820512815], [79.0, 2.5], [78.0, 9.666666666666668], [77.0, 8.4], [76.0, 6.9], [83.0, 8.066666666666666], [82.0, 15.116279069767444], [81.0, 10.916666666666668], [80.0, 16.26666666666667], [87.0, 11.0], [86.0, 15.8], [85.0, 6.523809523809524], [84.0, 8.766666666666667], [91.0, 11.124999999999998], [90.0, 7.864406779661017], [89.0, 3.0], [88.0, 11.666666666666668], [95.0, 6.142857142857142], [94.0, 10.031249999999998], [93.0, 6.152542372881356], [92.0, 7.592592592592595], [99.0, 7.7857142857142865], [98.0, 8.2], [97.0, 8.2], [96.0, 7.857142857142858], [103.0, 6.333333333333333], [102.0, 3.625], [101.0, 11.5], [100.0, 9.0], [107.0, 18.000000000000004], [106.0, 6.0], [105.0, 11.65], [104.0, 7.983870967741939], [111.0, 8.764705882352942], [110.0, 10.411764705882353], [109.0, 13.22222222222222], [108.0, 2.25], [115.0, 9.956521739130432], [114.0, 14.309090909090912], [113.0, 12.5], [112.0, 11.181818181818178], [118.0, 1.6], [117.0, 11.245901639344263], [116.0, 2.0], [123.0, 15.333333333333334], [122.0, 7.416666666666668], [120.0, 12.239999999999998], [127.0, 2.0], [126.0, 6.4], [125.0, 9.937500000000002], [124.0, 9.09090909090909], [135.0, 6.9], [134.0, 7.714285714285715], [133.0, 14.214285714285714], [132.0, 19.34782608695652], [131.0, 13.0], [130.0, 14.217391304347826], [129.0, 10.400000000000002], [128.0, 10.968750000000002], [143.0, 16.090909090909093], [142.0, 9.75], [141.0, 13.615384615384617], [140.0, 13.65909090909091], [139.0, 9.5], [138.0, 6.666666666666667], [137.0, 8.052631578947368], [136.0, 15.11111111111111], [151.0, 17.666666666666668], [150.0, 13.314814814814811], [149.0, 13.666666666666664], [148.0, 15.270270270270268], [147.0, 10.8], [146.0, 12.111111111111112], [145.0, 19.0], [144.0, 13.652173913043478], [159.0, 8.8], [158.0, 12.009803921568624], [157.0, 12.952380952380953], [156.0, 14.5], [155.0, 12.083333333333334], [154.0, 10.0], [153.0, 12.852713178294572], [152.0, 11.750000000000002], [167.0, 13.833333333333332], [166.0, 11.210526315789473], [165.0, 11.81081081081081], [164.0, 14.541666666666668], [163.0, 10.384615384615385], [162.0, 19.368421052631575], [161.0, 28.42857142857143], [160.0, 21.25], [175.0, 14.256410256410255], [174.0, 13.714285714285714], [172.0, 13.350000000000001], [171.0, 28.333333333333332], [170.0, 2.5], [169.0, 11.0], [168.0, 34.6], [183.0, 11.578947368421053], [182.0, 16.5], [181.0, 23.0], [180.0, 15.333333333333336], [179.0, 17.318181818181817], [178.0, 10.357142857142858], [177.0, 11.521739130434781], [176.0, 10.923076923076922], [191.0, 20.518518518518515], [190.0, 26.15], [189.0, 14.238095238095239], [188.0, 26.18181818181818], [187.0, 21.843749999999996], [186.0, 19.06666666666667], [185.0, 15.646341463414632], [184.0, 14.763157894736842], [199.0, 8.083333333333334], [198.0, 22.535714285714278], [197.0, 17.88235294117647], [196.0, 15.69230769230769], [195.0, 23.062500000000004], [194.0, 12.83783783783784], [193.0, 19.43181818181818], [192.0, 19.07142857142857], [207.0, 25.599999999999998], [206.0, 7.999999999999999], [205.0, 15.600000000000001], [204.0, 33.909090909090914], [203.0, 23.77272727272728], [202.0, 25.303571428571423], [201.0, 24.869565217391305], [200.0, 18.4], [215.0, 16.625], [214.0, 16.108695652173914], [213.0, 26.176470588235293], [212.0, 13.024390243902442], [211.0, 12.25], [210.0, 6.5555555555555545], [209.0, 12.999999999999998], [208.0, 20.636363636363637], [223.0, 3.4], [222.0, 29.105263157894736], [221.0, 20.766666666666666], [220.0, 16.454545454545457], [219.0, 15.125000000000004], [218.0, 11.166666666666666], [217.0, 7.655172413793103], [216.0, 21.25], [231.0, 14.549019607843137], [230.0, 14.882352941176471], [229.0, 19.112499999999997], [228.0, 16.764705882352942], [227.0, 11.100000000000001], [226.0, 22.400000000000002], [225.0, 43.0], [224.0, 17.090909090909093], [239.0, 15.512820512820515], [238.0, 19.38888888888889], [237.0, 22.53846153846154], [236.0, 15.75], [235.0, 18.08064516129032], [234.0, 17.0], [233.0, 4.333333333333334], [232.0, 15.214285714285714], [247.0, 19.35398230088495], [246.0, 20.03448275862069], [245.0, 13.984615384615385], [244.0, 15.558823529411757], [243.0, 11.647058823529411], [241.0, 28.121212121212128], [240.0, 9.63157894736842], [255.0, 17.25], [254.0, 13.2], [253.0, 21.818181818181817], [252.0, 17.666666666666668], [251.0, 12.476190476190476], [250.0, 15.250000000000002], [249.0, 17.03030303030303], [248.0, 16.780487804878042], [270.0, 25.962962962962965], [271.0, 35.22222222222222], [269.0, 42.42857142857142], [268.0, 7.0], [267.0, 6.0], [266.0, 29.125], [265.0, 17.37837837837838], [264.0, 14.89285714285714], [263.0, 25.375], [257.0, 24.807692307692314], [256.0, 24.863636363636363], [259.0, 13.923076923076922], [258.0, 28.333333333333332], [262.0, 17.727272727272727], [261.0, 19.799999999999997], [260.0, 19.703703703703702], [286.0, 20.39130434782608], [287.0, 20.9438202247191], [285.0, 21.999999999999996], [284.0, 10.9], [283.0, 20.384615384615383], [282.0, 22.474999999999994], [281.0, 14.55], [280.0, 7.0], [279.0, 14.0], [273.0, 20.708333333333332], [272.0, 20.11702127659575], [275.0, 17.238095238095237], [274.0, 27.56666666666667], [278.0, 27.999999999999996], [277.0, 21.159090909090907], [276.0, 22.150234741784036], [300.0, 39.1875], [288.0, 72.57142857142857], [289.0, 24.49655172413793], [290.0, 48.142857142857146], [291.0, 34.19148936170214], [293.0, 37.36], [292.0, 26.0], [294.0, 21.0], [295.0, 29.304347826086953], [296.0, 32.75641025641026], [297.0, 28.586206896551722], [299.0, 42.90000000000001], [298.0, 21.260273972602736], [302.0, 38.868421052631575], [301.0, 24.82051282051282], [303.0, 28.693181818181824], [305.0, 29.0], [304.0, 31.753623188405797], [306.0, 29.0232558139535], [307.0, 37.641025641025635], [308.0, 25.277777777777782], [309.0, 30.629032258064523], [311.0, 28.93137254901961], [312.0, 48.5], [316.0, 44.14285714285714], [318.0, 34.76470588235294], [317.0, 28.644444444444446], [319.0, 27.220588235294112], [313.0, 69.0], [314.0, 23.020833333333332], [315.0, 40.84444444444445], [321.0, 26.275862068965505], [320.0, 25.692307692307697], [322.0, 28.962962962962965], [323.0, 20.666666666666664], [324.0, 47.31818181818182], [325.0, 27.2125], [327.0, 37.087719298245624], [326.0, 30.666666666666668], [328.0, 35.0], [329.0, 23.897959183673475], [334.0, 49.12500000000001], [335.0, 35.599999999999994], [332.0, 64.11111111111111], [333.0, 41.45454545454545], [330.0, 23.98437500000001], [331.0, 31.294117647058822], [336.0, 31.999999999999993], [339.0, 51.0], [338.0, 30.692307692307693], [337.0, 25.35593220338983], [348.0, 27.7], [349.0, 36.357142857142854], [350.0, 39.99999999999999], [351.0, 32.06896551724139], [340.0, 30.319999999999997], [341.0, 103.66666666666667], [342.0, 27.44776119402984], [343.0, 34.68421052631579], [344.0, 53.75], [345.0, 24.628571428571426], [346.0, 22.565217391304344], [347.0, 28.071428571428573], [355.0, 32.202127659574494], [353.0, 33.64864864864864], [352.0, 29.26446280991735], [359.0, 25.0], [354.0, 71.14285714285714], [356.0, 46.91891891891892], [357.0, 29.590909090909093], [358.0, 67.25], [360.0, 25.047619047619044], [361.0, 26.43137254901961], [366.0, 29.261904761904763], [367.0, 25.620689655172423], [364.0, 75.00000000000001], [365.0, 100.33333333333333], [362.0, 29.64285714285714], [363.0, 67.53333333333335], [370.0, 120.87500000000001], [368.0, 35.90322580645162], [369.0, 25.075000000000003], [371.0, 33.12676056338027], [380.0, 30.90909090909091], [381.0, 35.2439024390244], [382.0, 132.83333333333334], [383.0, 41.75], [372.0, 78.625], [373.0, 35.925000000000004], [374.0, 76.59999999999998], [375.0, 32.23076923076924], [376.0, 46.416666666666664], [378.0, 32.44444444444445], [377.0, 27.62790697674419], [379.0, 21.863636363636363], [385.0, 26.648305084745747], [384.0, 54.33333333333333], [386.0, 34.10869565217392], [387.0, 31.54], [388.0, 38.34666666666668], [389.0, 34.26562500000001], [390.0, 29.46666666666666], [391.0, 51.300000000000004], [392.0, 31.918032786885252], [398.0, 50.77272727272727], [397.0, 32.384], [396.0, 32.115384615384606], [399.0, 83.69230769230771], [393.0, 32.25396825396826], [395.0, 31.9375], [394.0, 24.57142857142857], [401.0, 34.50406504065041], [400.0, 34.115789473684195], [402.0, 51.39999999999999], [403.0, 42.86363636363635], [404.0, 42.35632183908046], [405.0, 38.7037037037037], [407.0, 42.80952380952381], [406.0, 35.20454545454545], [408.0, 32.43003412969285], [414.0, 34.382550335570464], [415.0, 38.242718446601934], [412.0, 39.13749999999999], [413.0, 37.736263736263744], [409.0, 38.60784313725491], [410.0, 34.06779661016949], [411.0, 38.27027027027027], [417.0, 34.36752136752137], [416.0, 41.818181818181806], [418.0, 52.25], [419.0, 40.027027027027046], [420.0, 42.03448275862069], [421.0, 43.730769230769226], [422.0, 39.72413793103448], [423.0, 36.10526315789472], [424.0, 36.573333333333345], [431.0, 38.67692307692305], [429.0, 44.96153846153846], [428.0, 32.506849315068514], [430.0, 36.05434782608697], [425.0, 36.67391304347825], [426.0, 86.69999999999999], [427.0, 59.99999999999998], [434.0, 38.67567567567568], [433.0, 38.04918032786886], [435.0, 33.34814814814815], [444.0, 65.49999999999999], [445.0, 94.26315789473685], [446.0, 33.59701492537309], [447.0, 36.35398230088496], [436.0, 56.87499999999999], [437.0, 30.53571428571429], [438.0, 32.79411764705882], [439.0, 41.03999999999999], [432.0, 30.392156862745107], [440.0, 36.29113924050634], [441.0, 32.65492957746478], [442.0, 33.31932773109243], [443.0, 28.46774193548388], [450.0, 31.761702127659575], [448.0, 44.909090909090914], [449.0, 30.428571428571423], [451.0, 36.428571428571445], [461.0, 30.307159353348727], [460.0, 27.080645161290324], [463.0, 31.460317460317462], [462.0, 30.044502617801058], [452.0, 39.26126126126124], [453.0, 34.47904191616767], [454.0, 53.04166666666667], [455.0, 41.54838709677419], [456.0, 31.060317460317453], [457.0, 30.589147286821714], [459.0, 34.29629629629628], [458.0, 35.3013698630137], [478.0, 30.282534246575352], [479.0, 32.381818181818176], [477.0, 34.46666666666667], [476.0, 32.348387096774225], [475.0, 43.0], [474.0, 30.803278688524596], [473.0, 31.883116883116884], [472.0, 30.853571428571435], [471.0, 35.228571428571435], [465.0, 29.171428571428567], [464.0, 30.1767441860465], [467.0, 28.879807692307683], [466.0, 32.68269230769232], [470.0, 31.64516129032258], [469.0, 33.05747126436779], [468.0, 33.09178743961351], [492.0, 43.069767441860485], [480.0, 34.622580645161314], [482.0, 38.09677419354839], [481.0, 32.77955271565492], [483.0, 30.269406392694055], [487.0, 34.15301724137936], [486.0, 32.86247544204322], [485.0, 33.33333333333333], [484.0, 33.68932038834952], [488.0, 49.773913043478245], [489.0, 76.046875], [490.0, 98.0909090909091], [491.0, 41.78666666666665], [493.0, 32.76493633692453], [494.0, 38.64383561643835], [495.0, 41.49717514124292], [496.0, 35.772200772200776], [497.0, 37.43445692883898], [498.0, 37.50292397660824], [499.0, 33.94624100082614], [500.0, 35.653530174255806], [1.0, 0.75]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[494.3033699999963, 35.33314833333354]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 898148.25, "minX": 1.64932788E12, "maxY": 2570000.0, "series": [{"data": [[1.64932788E12, 898148.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64932788E12, 2570000.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64932788E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 35.33314833333354, "minX": 1.64932788E12, "maxY": 35.33314833333354, "series": [{"data": [[1.64932788E12, 35.33314833333354]], "isOverall": false, "label": "HTTP Request POST", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64932788E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 35.33295833333532, "minX": 1.64932788E12, "maxY": 35.33295833333532, "series": [{"data": [[1.64932788E12, 35.33295833333532]], "isOverall": false, "label": "HTTP Request POST", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64932788E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.2499999999999472E-4, "minX": 1.64932788E12, "maxY": 1.2499999999999472E-4, "series": [{"data": [[1.64932788E12, 1.2499999999999472E-4]], "isOverall": false, "label": "HTTP Request POST", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64932788E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64932788E12, "maxY": 1537.0, "series": [{"data": [[1.64932788E12, 1537.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64932788E12, 54.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64932788E12, 123.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64932788E12, 82.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64932788E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64932788E12, 18.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64932788E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 23.0, "maxY": 101.0, "series": [{"data": [[8944.0, 36.0], [9367.0, 35.0], [9887.0, 33.0], [10531.0, 31.0], [10962.0, 30.0], [11756.0, 27.0], [12443.0, 26.0], [12767.0, 13.0], [13621.0, 25.0], [14617.0, 20.0], [14541.0, 21.0], [14811.0, 21.0], [14963.0, 20.0], [15824.0, 20.0], [15818.0, 20.0], [15870.0, 20.0], [15802.0, 21.0], [16284.0, 19.0], [16213.0, 20.0], [16130.0, 20.0], [16373.0, 20.0], [16327.0, 20.0], [16335.0, 20.0], [16098.0, 20.0], [16180.0, 20.0], [16196.0, 20.0], [16148.0, 20.0], [16160.0, 20.0], [16066.0, 20.0], [16115.0, 20.0], [15932.0, 20.0], [15951.0, 20.0], [15952.0, 20.0], [16278.0, 20.0], [16214.0, 20.0], [16077.0, 20.0], [16082.0, 20.0], [16804.0, 19.0], [16516.0, 19.0], [2584.0, 101.0], [5085.0, 72.0], [5967.0, 55.0], [23.0, 1.0], [7386.0, 45.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16804.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 23.0, "maxY": 101.0, "series": [{"data": [[8944.0, 36.0], [9367.0, 35.0], [9887.0, 33.0], [10531.0, 31.0], [10962.0, 30.0], [11756.0, 27.0], [12443.0, 26.0], [12767.0, 13.0], [13621.0, 25.0], [14617.0, 20.0], [14541.0, 21.0], [14811.0, 21.0], [14963.0, 20.0], [15824.0, 20.0], [15818.0, 20.0], [15870.0, 20.0], [15802.0, 21.0], [16284.0, 19.0], [16213.0, 20.0], [16130.0, 20.0], [16373.0, 20.0], [16327.0, 20.0], [16335.0, 20.0], [16098.0, 20.0], [16180.0, 20.0], [16196.0, 20.0], [16148.0, 20.0], [16160.0, 20.0], [16066.0, 20.0], [16115.0, 20.0], [15932.0, 20.0], [15951.0, 20.0], [15952.0, 20.0], [16278.0, 20.0], [16214.0, 20.0], [16077.0, 20.0], [16082.0, 20.0], [16804.0, 19.0], [16516.0, 19.0], [2584.0, 101.0], [5085.0, 72.0], [5967.0, 55.0], [23.0, 1.0], [7386.0, 45.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16804.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10000.0, "minX": 1.64932788E12, "maxY": 10000.0, "series": [{"data": [[1.64932788E12, 10000.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64932788E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10000.0, "minX": 1.64932788E12, "maxY": 10000.0, "series": [{"data": [[1.64932788E12, 10000.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64932788E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10000.0, "minX": 1.64932788E12, "maxY": 10000.0, "series": [{"data": [[1.64932788E12, 10000.0]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64932788E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10000.0, "minX": 1.64932788E12, "maxY": 10000.0, "series": [{"data": [[1.64932788E12, 10000.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64932788E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

