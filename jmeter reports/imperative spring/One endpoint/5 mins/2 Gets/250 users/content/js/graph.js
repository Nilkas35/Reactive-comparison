/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 312.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 3.0], [0.9, 3.0], [1.0, 4.0], [1.1, 5.0], [1.2, 6.0], [1.3, 7.0], [1.4, 7.0], [1.5, 8.0], [1.6, 9.0], [1.7, 10.0], [1.8, 10.0], [1.9, 11.0], [2.0, 11.0], [2.1, 12.0], [2.2, 12.0], [2.3, 12.0], [2.4, 13.0], [2.5, 13.0], [2.6, 14.0], [2.7, 14.0], [2.8, 14.0], [2.9, 14.0], [3.0, 14.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 15.0], [3.5, 15.0], [3.6, 15.0], [3.7, 15.0], [3.8, 15.0], [3.9, 15.0], [4.0, 15.0], [4.1, 15.0], [4.2, 15.0], [4.3, 15.0], [4.4, 15.0], [4.5, 15.0], [4.6, 15.0], [4.7, 15.0], [4.8, 15.0], [4.9, 15.0], [5.0, 15.0], [5.1, 15.0], [5.2, 15.0], [5.3, 15.0], [5.4, 15.0], [5.5, 15.0], [5.6, 15.0], [5.7, 15.0], [5.8, 15.0], [5.9, 15.0], [6.0, 15.0], [6.1, 15.0], [6.2, 15.0], [6.3, 15.0], [6.4, 15.0], [6.5, 15.0], [6.6, 15.0], [6.7, 15.0], [6.8, 15.0], [6.9, 15.0], [7.0, 15.0], [7.1, 15.0], [7.2, 15.0], [7.3, 15.0], [7.4, 15.0], [7.5, 15.0], [7.6, 15.0], [7.7, 15.0], [7.8, 15.0], [7.9, 15.0], [8.0, 15.0], [8.1, 15.0], [8.2, 15.0], [8.3, 15.0], [8.4, 15.0], [8.5, 15.0], [8.6, 15.0], [8.7, 15.0], [8.8, 15.0], [8.9, 15.0], [9.0, 15.0], [9.1, 15.0], [9.2, 15.0], [9.3, 15.0], [9.4, 15.0], [9.5, 15.0], [9.6, 15.0], [9.7, 15.0], [9.8, 15.0], [9.9, 15.0], [10.0, 15.0], [10.1, 15.0], [10.2, 15.0], [10.3, 15.0], [10.4, 15.0], [10.5, 15.0], [10.6, 15.0], [10.7, 15.0], [10.8, 15.0], [10.9, 15.0], [11.0, 15.0], [11.1, 15.0], [11.2, 15.0], [11.3, 15.0], [11.4, 15.0], [11.5, 15.0], [11.6, 15.0], [11.7, 15.0], [11.8, 15.0], [11.9, 15.0], [12.0, 15.0], [12.1, 15.0], [12.2, 15.0], [12.3, 15.0], [12.4, 15.0], [12.5, 15.0], [12.6, 15.0], [12.7, 15.0], [12.8, 15.0], [12.9, 15.0], [13.0, 15.0], [13.1, 15.0], [13.2, 15.0], [13.3, 15.0], [13.4, 15.0], [13.5, 15.0], [13.6, 15.0], [13.7, 15.0], [13.8, 15.0], [13.9, 15.0], [14.0, 15.0], [14.1, 15.0], [14.2, 15.0], [14.3, 15.0], [14.4, 15.0], [14.5, 15.0], [14.6, 15.0], [14.7, 15.0], [14.8, 15.0], [14.9, 15.0], [15.0, 15.0], [15.1, 15.0], [15.2, 15.0], [15.3, 15.0], [15.4, 15.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 15.0], [16.8, 15.0], [16.9, 15.0], [17.0, 15.0], [17.1, 15.0], [17.2, 15.0], [17.3, 15.0], [17.4, 15.0], [17.5, 15.0], [17.6, 15.0], [17.7, 15.0], [17.8, 15.0], [17.9, 15.0], [18.0, 15.0], [18.1, 15.0], [18.2, 15.0], [18.3, 15.0], [18.4, 15.0], [18.5, 15.0], [18.6, 15.0], [18.7, 15.0], [18.8, 15.0], [18.9, 15.0], [19.0, 15.0], [19.1, 15.0], [19.2, 15.0], [19.3, 15.0], [19.4, 15.0], [19.5, 15.0], [19.6, 15.0], [19.7, 15.0], [19.8, 15.0], [19.9, 15.0], [20.0, 15.0], [20.1, 15.0], [20.2, 15.0], [20.3, 15.0], [20.4, 15.0], [20.5, 15.0], [20.6, 15.0], [20.7, 15.0], [20.8, 15.0], [20.9, 15.0], [21.0, 15.0], [21.1, 15.0], [21.2, 15.0], [21.3, 15.0], [21.4, 15.0], [21.5, 15.0], [21.6, 15.0], [21.7, 15.0], [21.8, 15.0], [21.9, 15.0], [22.0, 15.0], [22.1, 15.0], [22.2, 15.0], [22.3, 15.0], [22.4, 15.0], [22.5, 15.0], [22.6, 15.0], [22.7, 15.0], [22.8, 15.0], [22.9, 15.0], [23.0, 15.0], [23.1, 15.0], [23.2, 15.0], [23.3, 15.0], [23.4, 16.0], [23.5, 16.0], [23.6, 16.0], [23.7, 16.0], [23.8, 16.0], [23.9, 16.0], [24.0, 16.0], [24.1, 16.0], [24.2, 16.0], [24.3, 16.0], [24.4, 16.0], [24.5, 16.0], [24.6, 16.0], [24.7, 16.0], [24.8, 16.0], [24.9, 16.0], [25.0, 16.0], [25.1, 16.0], [25.2, 16.0], [25.3, 16.0], [25.4, 16.0], [25.5, 16.0], [25.6, 16.0], [25.7, 16.0], [25.8, 16.0], [25.9, 16.0], [26.0, 16.0], [26.1, 16.0], [26.2, 16.0], [26.3, 16.0], [26.4, 16.0], [26.5, 16.0], [26.6, 16.0], [26.7, 16.0], [26.8, 16.0], [26.9, 16.0], [27.0, 16.0], [27.1, 16.0], [27.2, 16.0], [27.3, 16.0], [27.4, 16.0], [27.5, 16.0], [27.6, 16.0], [27.7, 16.0], [27.8, 16.0], [27.9, 16.0], [28.0, 16.0], [28.1, 16.0], [28.2, 16.0], [28.3, 16.0], [28.4, 16.0], [28.5, 16.0], [28.6, 16.0], [28.7, 16.0], [28.8, 16.0], [28.9, 16.0], [29.0, 16.0], [29.1, 16.0], [29.2, 16.0], [29.3, 16.0], [29.4, 16.0], [29.5, 16.0], [29.6, 16.0], [29.7, 16.0], [29.8, 16.0], [29.9, 16.0], [30.0, 16.0], [30.1, 16.0], [30.2, 16.0], [30.3, 16.0], [30.4, 16.0], [30.5, 16.0], [30.6, 16.0], [30.7, 16.0], [30.8, 16.0], [30.9, 16.0], [31.0, 16.0], [31.1, 16.0], [31.2, 16.0], [31.3, 16.0], [31.4, 16.0], [31.5, 16.0], [31.6, 16.0], [31.7, 16.0], [31.8, 16.0], [31.9, 16.0], [32.0, 16.0], [32.1, 16.0], [32.2, 16.0], [32.3, 16.0], [32.4, 16.0], [32.5, 16.0], [32.6, 16.0], [32.7, 16.0], [32.8, 16.0], [32.9, 16.0], [33.0, 16.0], [33.1, 16.0], [33.2, 16.0], [33.3, 16.0], [33.4, 16.0], [33.5, 16.0], [33.6, 16.0], [33.7, 16.0], [33.8, 16.0], [33.9, 16.0], [34.0, 16.0], [34.1, 16.0], [34.2, 16.0], [34.3, 16.0], [34.4, 16.0], [34.5, 16.0], [34.6, 16.0], [34.7, 16.0], [34.8, 16.0], [34.9, 16.0], [35.0, 16.0], [35.1, 16.0], [35.2, 16.0], [35.3, 16.0], [35.4, 16.0], [35.5, 16.0], [35.6, 16.0], [35.7, 16.0], [35.8, 16.0], [35.9, 16.0], [36.0, 16.0], [36.1, 16.0], [36.2, 16.0], [36.3, 16.0], [36.4, 16.0], [36.5, 16.0], [36.6, 16.0], [36.7, 16.0], [36.8, 16.0], [36.9, 16.0], [37.0, 16.0], [37.1, 16.0], [37.2, 16.0], [37.3, 16.0], [37.4, 16.0], [37.5, 16.0], [37.6, 16.0], [37.7, 16.0], [37.8, 16.0], [37.9, 16.0], [38.0, 16.0], [38.1, 16.0], [38.2, 16.0], [38.3, 16.0], [38.4, 16.0], [38.5, 16.0], [38.6, 16.0], [38.7, 16.0], [38.8, 16.0], [38.9, 16.0], [39.0, 16.0], [39.1, 16.0], [39.2, 16.0], [39.3, 16.0], [39.4, 16.0], [39.5, 16.0], [39.6, 16.0], [39.7, 16.0], [39.8, 16.0], [39.9, 16.0], [40.0, 16.0], [40.1, 16.0], [40.2, 16.0], [40.3, 16.0], [40.4, 16.0], [40.5, 16.0], [40.6, 16.0], [40.7, 16.0], [40.8, 16.0], [40.9, 16.0], [41.0, 16.0], [41.1, 16.0], [41.2, 16.0], [41.3, 16.0], [41.4, 16.0], [41.5, 16.0], [41.6, 16.0], [41.7, 16.0], [41.8, 16.0], [41.9, 16.0], [42.0, 16.0], [42.1, 16.0], [42.2, 16.0], [42.3, 16.0], [42.4, 16.0], [42.5, 16.0], [42.6, 16.0], [42.7, 16.0], [42.8, 16.0], [42.9, 16.0], [43.0, 16.0], [43.1, 16.0], [43.2, 16.0], [43.3, 16.0], [43.4, 16.0], [43.5, 16.0], [43.6, 16.0], [43.7, 16.0], [43.8, 16.0], [43.9, 16.0], [44.0, 16.0], [44.1, 16.0], [44.2, 16.0], [44.3, 16.0], [44.4, 16.0], [44.5, 16.0], [44.6, 16.0], [44.7, 16.0], [44.8, 16.0], [44.9, 16.0], [45.0, 16.0], [45.1, 16.0], [45.2, 16.0], [45.3, 16.0], [45.4, 16.0], [45.5, 16.0], [45.6, 16.0], [45.7, 16.0], [45.8, 16.0], [45.9, 16.0], [46.0, 16.0], [46.1, 16.0], [46.2, 16.0], [46.3, 16.0], [46.4, 16.0], [46.5, 16.0], [46.6, 16.0], [46.7, 16.0], [46.8, 16.0], [46.9, 16.0], [47.0, 16.0], [47.1, 16.0], [47.2, 16.0], [47.3, 16.0], [47.4, 16.0], [47.5, 16.0], [47.6, 16.0], [47.7, 16.0], [47.8, 16.0], [47.9, 16.0], [48.0, 16.0], [48.1, 16.0], [48.2, 16.0], [48.3, 16.0], [48.4, 16.0], [48.5, 16.0], [48.6, 16.0], [48.7, 16.0], [48.8, 16.0], [48.9, 16.0], [49.0, 16.0], [49.1, 16.0], [49.2, 16.0], [49.3, 16.0], [49.4, 16.0], [49.5, 16.0], [49.6, 16.0], [49.7, 16.0], [49.8, 16.0], [49.9, 16.0], [50.0, 16.0], [50.1, 16.0], [50.2, 16.0], [50.3, 16.0], [50.4, 16.0], [50.5, 16.0], [50.6, 16.0], [50.7, 16.0], [50.8, 16.0], [50.9, 16.0], [51.0, 16.0], [51.1, 16.0], [51.2, 16.0], [51.3, 16.0], [51.4, 16.0], [51.5, 16.0], [51.6, 16.0], [51.7, 16.0], [51.8, 16.0], [51.9, 16.0], [52.0, 16.0], [52.1, 16.0], [52.2, 16.0], [52.3, 16.0], [52.4, 16.0], [52.5, 16.0], [52.6, 16.0], [52.7, 16.0], [52.8, 16.0], [52.9, 16.0], [53.0, 16.0], [53.1, 16.0], [53.2, 16.0], [53.3, 16.0], [53.4, 16.0], [53.5, 16.0], [53.6, 16.0], [53.7, 16.0], [53.8, 16.0], [53.9, 16.0], [54.0, 16.0], [54.1, 17.0], [54.2, 17.0], [54.3, 17.0], [54.4, 17.0], [54.5, 17.0], [54.6, 17.0], [54.7, 17.0], [54.8, 17.0], [54.9, 17.0], [55.0, 17.0], [55.1, 17.0], [55.2, 17.0], [55.3, 17.0], [55.4, 17.0], [55.5, 17.0], [55.6, 17.0], [55.7, 17.0], [55.8, 17.0], [55.9, 17.0], [56.0, 17.0], [56.1, 17.0], [56.2, 17.0], [56.3, 17.0], [56.4, 17.0], [56.5, 17.0], [56.6, 17.0], [56.7, 17.0], [56.8, 17.0], [56.9, 17.0], [57.0, 17.0], [57.1, 17.0], [57.2, 17.0], [57.3, 17.0], [57.4, 17.0], [57.5, 17.0], [57.6, 17.0], [57.7, 17.0], [57.8, 17.0], [57.9, 17.0], [58.0, 17.0], [58.1, 17.0], [58.2, 17.0], [58.3, 17.0], [58.4, 17.0], [58.5, 17.0], [58.6, 17.0], [58.7, 17.0], [58.8, 17.0], [58.9, 17.0], [59.0, 17.0], [59.1, 17.0], [59.2, 17.0], [59.3, 17.0], [59.4, 17.0], [59.5, 17.0], [59.6, 17.0], [59.7, 17.0], [59.8, 17.0], [59.9, 17.0], [60.0, 17.0], [60.1, 17.0], [60.2, 17.0], [60.3, 17.0], [60.4, 17.0], [60.5, 17.0], [60.6, 17.0], [60.7, 17.0], [60.8, 17.0], [60.9, 17.0], [61.0, 17.0], [61.1, 17.0], [61.2, 17.0], [61.3, 17.0], [61.4, 17.0], [61.5, 17.0], [61.6, 17.0], [61.7, 17.0], [61.8, 17.0], [61.9, 17.0], [62.0, 17.0], [62.1, 17.0], [62.2, 17.0], [62.3, 17.0], [62.4, 17.0], [62.5, 17.0], [62.6, 17.0], [62.7, 17.0], [62.8, 17.0], [62.9, 17.0], [63.0, 18.0], [63.1, 18.0], [63.2, 18.0], [63.3, 18.0], [63.4, 18.0], [63.5, 18.0], [63.6, 18.0], [63.7, 18.0], [63.8, 18.0], [63.9, 18.0], [64.0, 18.0], [64.1, 18.0], [64.2, 18.0], [64.3, 18.0], [64.4, 18.0], [64.5, 18.0], [64.6, 18.0], [64.7, 18.0], [64.8, 18.0], [64.9, 18.0], [65.0, 18.0], [65.1, 18.0], [65.2, 19.0], [65.3, 19.0], [65.4, 19.0], [65.5, 19.0], [65.6, 19.0], [65.7, 20.0], [65.8, 20.0], [65.9, 21.0], [66.0, 22.0], [66.1, 23.0], [66.2, 23.0], [66.3, 24.0], [66.4, 24.0], [66.5, 24.0], [66.6, 24.0], [66.7, 24.0], [66.8, 24.0], [66.9, 24.0], [67.0, 24.0], [67.1, 24.0], [67.2, 24.0], [67.3, 24.0], [67.4, 24.0], [67.5, 24.0], [67.6, 24.0], [67.7, 24.0], [67.8, 24.0], [67.9, 24.0], [68.0, 24.0], [68.1, 24.0], [68.2, 24.0], [68.3, 24.0], [68.4, 25.0], [68.5, 25.0], [68.6, 25.0], [68.7, 25.0], [68.8, 25.0], [68.9, 25.0], [69.0, 25.0], [69.1, 25.0], [69.2, 25.0], [69.3, 25.0], [69.4, 25.0], [69.5, 25.0], [69.6, 25.0], [69.7, 25.0], [69.8, 25.0], [69.9, 25.0], [70.0, 25.0], [70.1, 25.0], [70.2, 25.0], [70.3, 25.0], [70.4, 25.0], [70.5, 25.0], [70.6, 25.0], [70.7, 25.0], [70.8, 25.0], [70.9, 25.0], [71.0, 25.0], [71.1, 25.0], [71.2, 25.0], [71.3, 25.0], [71.4, 25.0], [71.5, 25.0], [71.6, 25.0], [71.7, 25.0], [71.8, 25.0], [71.9, 25.0], [72.0, 25.0], [72.1, 25.0], [72.2, 25.0], [72.3, 25.0], [72.4, 25.0], [72.5, 25.0], [72.6, 25.0], [72.7, 25.0], [72.8, 25.0], [72.9, 26.0], [73.0, 26.0], [73.1, 26.0], [73.2, 26.0], [73.3, 26.0], [73.4, 26.0], [73.5, 26.0], [73.6, 26.0], [73.7, 26.0], [73.8, 26.0], [73.9, 26.0], [74.0, 26.0], [74.1, 26.0], [74.2, 26.0], [74.3, 26.0], [74.4, 26.0], [74.5, 26.0], [74.6, 26.0], [74.7, 26.0], [74.8, 26.0], [74.9, 26.0], [75.0, 26.0], [75.1, 26.0], [75.2, 26.0], [75.3, 26.0], [75.4, 26.0], [75.5, 27.0], [75.6, 27.0], [75.7, 27.0], [75.8, 27.0], [75.9, 27.0], [76.0, 27.0], [76.1, 27.0], [76.2, 27.0], [76.3, 27.0], [76.4, 27.0], [76.5, 28.0], [76.6, 28.0], [76.7, 28.0], [76.8, 29.0], [76.9, 29.0], [77.0, 30.0], [77.1, 32.0], [77.2, 33.0], [77.3, 33.0], [77.4, 33.0], [77.5, 33.0], [77.6, 33.0], [77.7, 33.0], [77.8, 33.0], [77.9, 33.0], [78.0, 34.0], [78.1, 34.0], [78.2, 34.0], [78.3, 34.0], [78.4, 34.0], [78.5, 34.0], [78.6, 34.0], [78.7, 34.0], [78.8, 34.0], [78.9, 34.0], [79.0, 34.0], [79.1, 34.0], [79.2, 34.0], [79.3, 34.0], [79.4, 34.0], [79.5, 34.0], [79.6, 34.0], [79.7, 34.0], [79.8, 34.0], [79.9, 34.0], [80.0, 34.0], [80.1, 34.0], [80.2, 34.0], [80.3, 34.0], [80.4, 35.0], [80.5, 35.0], [80.6, 35.0], [80.7, 35.0], [80.8, 35.0], [80.9, 35.0], [81.0, 35.0], [81.1, 35.0], [81.2, 35.0], [81.3, 35.0], [81.4, 35.0], [81.5, 35.0], [81.6, 35.0], [81.7, 35.0], [81.8, 35.0], [81.9, 35.0], [82.0, 35.0], [82.1, 35.0], [82.2, 35.0], [82.3, 35.0], [82.4, 35.0], [82.5, 35.0], [82.6, 36.0], [82.7, 36.0], [82.8, 36.0], [82.9, 36.0], [83.0, 36.0], [83.1, 36.0], [83.2, 36.0], [83.3, 36.0], [83.4, 36.0], [83.5, 36.0], [83.6, 36.0], [83.7, 36.0], [83.8, 37.0], [83.9, 37.0], [84.0, 37.0], [84.1, 37.0], [84.2, 37.0], [84.3, 37.0], [84.4, 38.0], [84.5, 38.0], [84.6, 39.0], [84.7, 40.0], [84.8, 42.0], [84.9, 42.0], [85.0, 42.0], [85.1, 42.0], [85.2, 43.0], [85.3, 43.0], [85.4, 43.0], [85.5, 43.0], [85.6, 43.0], [85.7, 43.0], [85.8, 43.0], [85.9, 43.0], [86.0, 43.0], [86.1, 43.0], [86.2, 43.0], [86.3, 43.0], [86.4, 44.0], [86.5, 44.0], [86.6, 44.0], [86.7, 44.0], [86.8, 44.0], [86.9, 44.0], [87.0, 44.0], [87.1, 44.0], [87.2, 44.0], [87.3, 44.0], [87.4, 44.0], [87.5, 44.0], [87.6, 44.0], [87.7, 45.0], [87.8, 45.0], [87.9, 45.0], [88.0, 45.0], [88.1, 45.0], [88.2, 45.0], [88.3, 45.0], [88.4, 45.0], [88.5, 45.0], [88.6, 45.0], [88.7, 46.0], [88.8, 46.0], [88.9, 46.0], [89.0, 46.0], [89.1, 46.0], [89.2, 46.0], [89.3, 46.0], [89.4, 47.0], [89.5, 47.0], [89.6, 47.0], [89.7, 48.0], [89.8, 49.0], [89.9, 50.0], [90.0, 51.0], [90.1, 52.0], [90.2, 52.0], [90.3, 52.0], [90.4, 52.0], [90.5, 52.0], [90.6, 52.0], [90.7, 53.0], [90.8, 53.0], [90.9, 53.0], [91.0, 53.0], [91.1, 53.0], [91.2, 53.0], [91.3, 53.0], [91.4, 53.0], [91.5, 54.0], [91.6, 54.0], [91.7, 54.0], [91.8, 54.0], [91.9, 54.0], [92.0, 54.0], [92.1, 54.0], [92.2, 55.0], [92.3, 55.0], [92.4, 55.0], [92.5, 55.0], [92.6, 55.0], [92.7, 56.0], [92.8, 56.0], [92.9, 56.0], [93.0, 57.0], [93.1, 57.0], [93.2, 58.0], [93.3, 59.0], [93.4, 61.0], [93.5, 61.0], [93.6, 61.0], [93.7, 62.0], [93.8, 62.0], [93.9, 62.0], [94.0, 62.0], [94.1, 62.0], [94.2, 63.0], [94.3, 63.0], [94.4, 63.0], [94.5, 63.0], [94.6, 64.0], [94.7, 64.0], [94.8, 64.0], [94.9, 64.0], [95.0, 65.0], [95.1, 65.0], [95.2, 65.0], [95.3, 66.0], [95.4, 67.0], [95.5, 68.0], [95.6, 70.0], [95.7, 70.0], [95.8, 71.0], [95.9, 71.0], [96.0, 72.0], [96.1, 72.0], [96.2, 72.0], [96.3, 73.0], [96.4, 73.0], [96.5, 73.0], [96.6, 74.0], [96.7, 74.0], [96.8, 75.0], [96.9, 76.0], [97.0, 77.0], [97.1, 79.0], [97.2, 80.0], [97.3, 81.0], [97.4, 81.0], [97.5, 82.0], [97.6, 82.0], [97.7, 83.0], [97.8, 84.0], [97.9, 85.0], [98.0, 86.0], [98.1, 88.0], [98.2, 90.0], [98.3, 91.0], [98.4, 92.0], [98.5, 93.0], [98.6, 94.0], [98.7, 96.0], [98.8, 99.0], [98.9, 100.0], [99.0, 102.0], [99.1, 104.0], [99.2, 108.0], [99.3, 110.0], [99.4, 113.0], [99.5, 118.0], [99.6, 122.0], [99.7, 129.0], [99.8, 138.0], [99.9, 153.0]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 3.0], [0.9, 3.0], [1.0, 4.0], [1.1, 5.0], [1.2, 6.0], [1.3, 7.0], [1.4, 7.0], [1.5, 8.0], [1.6, 9.0], [1.7, 10.0], [1.8, 10.0], [1.9, 11.0], [2.0, 11.0], [2.1, 11.0], [2.2, 12.0], [2.3, 12.0], [2.4, 13.0], [2.5, 13.0], [2.6, 14.0], [2.7, 14.0], [2.8, 14.0], [2.9, 14.0], [3.0, 14.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 15.0], [3.5, 15.0], [3.6, 15.0], [3.7, 15.0], [3.8, 15.0], [3.9, 15.0], [4.0, 15.0], [4.1, 15.0], [4.2, 15.0], [4.3, 15.0], [4.4, 15.0], [4.5, 15.0], [4.6, 15.0], [4.7, 15.0], [4.8, 15.0], [4.9, 15.0], [5.0, 15.0], [5.1, 15.0], [5.2, 15.0], [5.3, 15.0], [5.4, 15.0], [5.5, 15.0], [5.6, 15.0], [5.7, 15.0], [5.8, 15.0], [5.9, 15.0], [6.0, 15.0], [6.1, 15.0], [6.2, 15.0], [6.3, 15.0], [6.4, 15.0], [6.5, 15.0], [6.6, 15.0], [6.7, 15.0], [6.8, 15.0], [6.9, 15.0], [7.0, 15.0], [7.1, 15.0], [7.2, 15.0], [7.3, 15.0], [7.4, 15.0], [7.5, 15.0], [7.6, 15.0], [7.7, 15.0], [7.8, 15.0], [7.9, 15.0], [8.0, 15.0], [8.1, 15.0], [8.2, 15.0], [8.3, 15.0], [8.4, 15.0], [8.5, 15.0], [8.6, 15.0], [8.7, 15.0], [8.8, 15.0], [8.9, 15.0], [9.0, 15.0], [9.1, 15.0], [9.2, 15.0], [9.3, 15.0], [9.4, 15.0], [9.5, 15.0], [9.6, 15.0], [9.7, 15.0], [9.8, 15.0], [9.9, 15.0], [10.0, 15.0], [10.1, 15.0], [10.2, 15.0], [10.3, 15.0], [10.4, 15.0], [10.5, 15.0], [10.6, 15.0], [10.7, 15.0], [10.8, 15.0], [10.9, 15.0], [11.0, 15.0], [11.1, 15.0], [11.2, 15.0], [11.3, 15.0], [11.4, 15.0], [11.5, 15.0], [11.6, 15.0], [11.7, 15.0], [11.8, 15.0], [11.9, 15.0], [12.0, 15.0], [12.1, 15.0], [12.2, 15.0], [12.3, 15.0], [12.4, 15.0], [12.5, 15.0], [12.6, 15.0], [12.7, 15.0], [12.8, 15.0], [12.9, 15.0], [13.0, 15.0], [13.1, 15.0], [13.2, 15.0], [13.3, 15.0], [13.4, 15.0], [13.5, 15.0], [13.6, 15.0], [13.7, 15.0], [13.8, 15.0], [13.9, 15.0], [14.0, 15.0], [14.1, 15.0], [14.2, 15.0], [14.3, 15.0], [14.4, 15.0], [14.5, 15.0], [14.6, 15.0], [14.7, 15.0], [14.8, 15.0], [14.9, 15.0], [15.0, 15.0], [15.1, 15.0], [15.2, 15.0], [15.3, 15.0], [15.4, 15.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 15.0], [16.8, 15.0], [16.9, 15.0], [17.0, 15.0], [17.1, 15.0], [17.2, 15.0], [17.3, 15.0], [17.4, 15.0], [17.5, 15.0], [17.6, 15.0], [17.7, 15.0], [17.8, 15.0], [17.9, 15.0], [18.0, 15.0], [18.1, 15.0], [18.2, 15.0], [18.3, 15.0], [18.4, 15.0], [18.5, 15.0], [18.6, 15.0], [18.7, 15.0], [18.8, 15.0], [18.9, 15.0], [19.0, 15.0], [19.1, 15.0], [19.2, 15.0], [19.3, 15.0], [19.4, 15.0], [19.5, 15.0], [19.6, 15.0], [19.7, 15.0], [19.8, 15.0], [19.9, 15.0], [20.0, 15.0], [20.1, 15.0], [20.2, 15.0], [20.3, 15.0], [20.4, 15.0], [20.5, 15.0], [20.6, 15.0], [20.7, 15.0], [20.8, 15.0], [20.9, 15.0], [21.0, 15.0], [21.1, 15.0], [21.2, 15.0], [21.3, 15.0], [21.4, 15.0], [21.5, 15.0], [21.6, 15.0], [21.7, 15.0], [21.8, 15.0], [21.9, 15.0], [22.0, 15.0], [22.1, 15.0], [22.2, 15.0], [22.3, 15.0], [22.4, 15.0], [22.5, 15.0], [22.6, 15.0], [22.7, 15.0], [22.8, 15.0], [22.9, 15.0], [23.0, 15.0], [23.1, 15.0], [23.2, 15.0], [23.3, 15.0], [23.4, 16.0], [23.5, 16.0], [23.6, 16.0], [23.7, 16.0], [23.8, 16.0], [23.9, 16.0], [24.0, 16.0], [24.1, 16.0], [24.2, 16.0], [24.3, 16.0], [24.4, 16.0], [24.5, 16.0], [24.6, 16.0], [24.7, 16.0], [24.8, 16.0], [24.9, 16.0], [25.0, 16.0], [25.1, 16.0], [25.2, 16.0], [25.3, 16.0], [25.4, 16.0], [25.5, 16.0], [25.6, 16.0], [25.7, 16.0], [25.8, 16.0], [25.9, 16.0], [26.0, 16.0], [26.1, 16.0], [26.2, 16.0], [26.3, 16.0], [26.4, 16.0], [26.5, 16.0], [26.6, 16.0], [26.7, 16.0], [26.8, 16.0], [26.9, 16.0], [27.0, 16.0], [27.1, 16.0], [27.2, 16.0], [27.3, 16.0], [27.4, 16.0], [27.5, 16.0], [27.6, 16.0], [27.7, 16.0], [27.8, 16.0], [27.9, 16.0], [28.0, 16.0], [28.1, 16.0], [28.2, 16.0], [28.3, 16.0], [28.4, 16.0], [28.5, 16.0], [28.6, 16.0], [28.7, 16.0], [28.8, 16.0], [28.9, 16.0], [29.0, 16.0], [29.1, 16.0], [29.2, 16.0], [29.3, 16.0], [29.4, 16.0], [29.5, 16.0], [29.6, 16.0], [29.7, 16.0], [29.8, 16.0], [29.9, 16.0], [30.0, 16.0], [30.1, 16.0], [30.2, 16.0], [30.3, 16.0], [30.4, 16.0], [30.5, 16.0], [30.6, 16.0], [30.7, 16.0], [30.8, 16.0], [30.9, 16.0], [31.0, 16.0], [31.1, 16.0], [31.2, 16.0], [31.3, 16.0], [31.4, 16.0], [31.5, 16.0], [31.6, 16.0], [31.7, 16.0], [31.8, 16.0], [31.9, 16.0], [32.0, 16.0], [32.1, 16.0], [32.2, 16.0], [32.3, 16.0], [32.4, 16.0], [32.5, 16.0], [32.6, 16.0], [32.7, 16.0], [32.8, 16.0], [32.9, 16.0], [33.0, 16.0], [33.1, 16.0], [33.2, 16.0], [33.3, 16.0], [33.4, 16.0], [33.5, 16.0], [33.6, 16.0], [33.7, 16.0], [33.8, 16.0], [33.9, 16.0], [34.0, 16.0], [34.1, 16.0], [34.2, 16.0], [34.3, 16.0], [34.4, 16.0], [34.5, 16.0], [34.6, 16.0], [34.7, 16.0], [34.8, 16.0], [34.9, 16.0], [35.0, 16.0], [35.1, 16.0], [35.2, 16.0], [35.3, 16.0], [35.4, 16.0], [35.5, 16.0], [35.6, 16.0], [35.7, 16.0], [35.8, 16.0], [35.9, 16.0], [36.0, 16.0], [36.1, 16.0], [36.2, 16.0], [36.3, 16.0], [36.4, 16.0], [36.5, 16.0], [36.6, 16.0], [36.7, 16.0], [36.8, 16.0], [36.9, 16.0], [37.0, 16.0], [37.1, 16.0], [37.2, 16.0], [37.3, 16.0], [37.4, 16.0], [37.5, 16.0], [37.6, 16.0], [37.7, 16.0], [37.8, 16.0], [37.9, 16.0], [38.0, 16.0], [38.1, 16.0], [38.2, 16.0], [38.3, 16.0], [38.4, 16.0], [38.5, 16.0], [38.6, 16.0], [38.7, 16.0], [38.8, 16.0], [38.9, 16.0], [39.0, 16.0], [39.1, 16.0], [39.2, 16.0], [39.3, 16.0], [39.4, 16.0], [39.5, 16.0], [39.6, 16.0], [39.7, 16.0], [39.8, 16.0], [39.9, 16.0], [40.0, 16.0], [40.1, 16.0], [40.2, 16.0], [40.3, 16.0], [40.4, 16.0], [40.5, 16.0], [40.6, 16.0], [40.7, 16.0], [40.8, 16.0], [40.9, 16.0], [41.0, 16.0], [41.1, 16.0], [41.2, 16.0], [41.3, 16.0], [41.4, 16.0], [41.5, 16.0], [41.6, 16.0], [41.7, 16.0], [41.8, 16.0], [41.9, 16.0], [42.0, 16.0], [42.1, 16.0], [42.2, 16.0], [42.3, 16.0], [42.4, 16.0], [42.5, 16.0], [42.6, 16.0], [42.7, 16.0], [42.8, 16.0], [42.9, 16.0], [43.0, 16.0], [43.1, 16.0], [43.2, 16.0], [43.3, 16.0], [43.4, 16.0], [43.5, 16.0], [43.6, 16.0], [43.7, 16.0], [43.8, 16.0], [43.9, 16.0], [44.0, 16.0], [44.1, 16.0], [44.2, 16.0], [44.3, 16.0], [44.4, 16.0], [44.5, 16.0], [44.6, 16.0], [44.7, 16.0], [44.8, 16.0], [44.9, 16.0], [45.0, 16.0], [45.1, 16.0], [45.2, 16.0], [45.3, 16.0], [45.4, 16.0], [45.5, 16.0], [45.6, 16.0], [45.7, 16.0], [45.8, 16.0], [45.9, 16.0], [46.0, 16.0], [46.1, 16.0], [46.2, 16.0], [46.3, 16.0], [46.4, 16.0], [46.5, 16.0], [46.6, 16.0], [46.7, 16.0], [46.8, 16.0], [46.9, 16.0], [47.0, 16.0], [47.1, 16.0], [47.2, 16.0], [47.3, 16.0], [47.4, 16.0], [47.5, 16.0], [47.6, 16.0], [47.7, 16.0], [47.8, 16.0], [47.9, 16.0], [48.0, 16.0], [48.1, 16.0], [48.2, 16.0], [48.3, 16.0], [48.4, 16.0], [48.5, 16.0], [48.6, 16.0], [48.7, 16.0], [48.8, 16.0], [48.9, 16.0], [49.0, 16.0], [49.1, 16.0], [49.2, 16.0], [49.3, 16.0], [49.4, 16.0], [49.5, 16.0], [49.6, 16.0], [49.7, 16.0], [49.8, 16.0], [49.9, 16.0], [50.0, 16.0], [50.1, 16.0], [50.2, 16.0], [50.3, 16.0], [50.4, 16.0], [50.5, 16.0], [50.6, 16.0], [50.7, 16.0], [50.8, 16.0], [50.9, 16.0], [51.0, 16.0], [51.1, 16.0], [51.2, 16.0], [51.3, 16.0], [51.4, 16.0], [51.5, 16.0], [51.6, 16.0], [51.7, 16.0], [51.8, 16.0], [51.9, 16.0], [52.0, 16.0], [52.1, 16.0], [52.2, 16.0], [52.3, 16.0], [52.4, 16.0], [52.5, 16.0], [52.6, 16.0], [52.7, 16.0], [52.8, 16.0], [52.9, 16.0], [53.0, 16.0], [53.1, 16.0], [53.2, 16.0], [53.3, 16.0], [53.4, 16.0], [53.5, 16.0], [53.6, 16.0], [53.7, 16.0], [53.8, 16.0], [53.9, 16.0], [54.0, 16.0], [54.1, 17.0], [54.2, 17.0], [54.3, 17.0], [54.4, 17.0], [54.5, 17.0], [54.6, 17.0], [54.7, 17.0], [54.8, 17.0], [54.9, 17.0], [55.0, 17.0], [55.1, 17.0], [55.2, 17.0], [55.3, 17.0], [55.4, 17.0], [55.5, 17.0], [55.6, 17.0], [55.7, 17.0], [55.8, 17.0], [55.9, 17.0], [56.0, 17.0], [56.1, 17.0], [56.2, 17.0], [56.3, 17.0], [56.4, 17.0], [56.5, 17.0], [56.6, 17.0], [56.7, 17.0], [56.8, 17.0], [56.9, 17.0], [57.0, 17.0], [57.1, 17.0], [57.2, 17.0], [57.3, 17.0], [57.4, 17.0], [57.5, 17.0], [57.6, 17.0], [57.7, 17.0], [57.8, 17.0], [57.9, 17.0], [58.0, 17.0], [58.1, 17.0], [58.2, 17.0], [58.3, 17.0], [58.4, 17.0], [58.5, 17.0], [58.6, 17.0], [58.7, 17.0], [58.8, 17.0], [58.9, 17.0], [59.0, 17.0], [59.1, 17.0], [59.2, 17.0], [59.3, 17.0], [59.4, 17.0], [59.5, 17.0], [59.6, 17.0], [59.7, 17.0], [59.8, 17.0], [59.9, 17.0], [60.0, 17.0], [60.1, 17.0], [60.2, 17.0], [60.3, 17.0], [60.4, 17.0], [60.5, 17.0], [60.6, 17.0], [60.7, 17.0], [60.8, 17.0], [60.9, 17.0], [61.0, 17.0], [61.1, 17.0], [61.2, 17.0], [61.3, 17.0], [61.4, 17.0], [61.5, 17.0], [61.6, 17.0], [61.7, 17.0], [61.8, 17.0], [61.9, 17.0], [62.0, 17.0], [62.1, 17.0], [62.2, 17.0], [62.3, 17.0], [62.4, 17.0], [62.5, 17.0], [62.6, 17.0], [62.7, 17.0], [62.8, 17.0], [62.9, 17.0], [63.0, 18.0], [63.1, 18.0], [63.2, 18.0], [63.3, 18.0], [63.4, 18.0], [63.5, 18.0], [63.6, 18.0], [63.7, 18.0], [63.8, 18.0], [63.9, 18.0], [64.0, 18.0], [64.1, 18.0], [64.2, 18.0], [64.3, 18.0], [64.4, 18.0], [64.5, 18.0], [64.6, 18.0], [64.7, 18.0], [64.8, 18.0], [64.9, 18.0], [65.0, 18.0], [65.1, 18.0], [65.2, 19.0], [65.3, 19.0], [65.4, 19.0], [65.5, 19.0], [65.6, 19.0], [65.7, 20.0], [65.8, 20.0], [65.9, 21.0], [66.0, 22.0], [66.1, 23.0], [66.2, 23.0], [66.3, 24.0], [66.4, 24.0], [66.5, 24.0], [66.6, 24.0], [66.7, 24.0], [66.8, 24.0], [66.9, 24.0], [67.0, 24.0], [67.1, 24.0], [67.2, 24.0], [67.3, 24.0], [67.4, 24.0], [67.5, 24.0], [67.6, 24.0], [67.7, 24.0], [67.8, 24.0], [67.9, 24.0], [68.0, 24.0], [68.1, 24.0], [68.2, 24.0], [68.3, 24.0], [68.4, 25.0], [68.5, 25.0], [68.6, 25.0], [68.7, 25.0], [68.8, 25.0], [68.9, 25.0], [69.0, 25.0], [69.1, 25.0], [69.2, 25.0], [69.3, 25.0], [69.4, 25.0], [69.5, 25.0], [69.6, 25.0], [69.7, 25.0], [69.8, 25.0], [69.9, 25.0], [70.0, 25.0], [70.1, 25.0], [70.2, 25.0], [70.3, 25.0], [70.4, 25.0], [70.5, 25.0], [70.6, 25.0], [70.7, 25.0], [70.8, 25.0], [70.9, 25.0], [71.0, 25.0], [71.1, 25.0], [71.2, 25.0], [71.3, 25.0], [71.4, 25.0], [71.5, 25.0], [71.6, 25.0], [71.7, 25.0], [71.8, 25.0], [71.9, 25.0], [72.0, 25.0], [72.1, 25.0], [72.2, 25.0], [72.3, 25.0], [72.4, 25.0], [72.5, 25.0], [72.6, 25.0], [72.7, 25.0], [72.8, 25.0], [72.9, 26.0], [73.0, 26.0], [73.1, 26.0], [73.2, 26.0], [73.3, 26.0], [73.4, 26.0], [73.5, 26.0], [73.6, 26.0], [73.7, 26.0], [73.8, 26.0], [73.9, 26.0], [74.0, 26.0], [74.1, 26.0], [74.2, 26.0], [74.3, 26.0], [74.4, 26.0], [74.5, 26.0], [74.6, 26.0], [74.7, 26.0], [74.8, 26.0], [74.9, 26.0], [75.0, 26.0], [75.1, 26.0], [75.2, 26.0], [75.3, 26.0], [75.4, 26.0], [75.5, 27.0], [75.6, 27.0], [75.7, 27.0], [75.8, 27.0], [75.9, 27.0], [76.0, 27.0], [76.1, 27.0], [76.2, 27.0], [76.3, 27.0], [76.4, 27.0], [76.5, 28.0], [76.6, 28.0], [76.7, 28.0], [76.8, 29.0], [76.9, 29.0], [77.0, 30.0], [77.1, 32.0], [77.2, 33.0], [77.3, 33.0], [77.4, 33.0], [77.5, 33.0], [77.6, 33.0], [77.7, 33.0], [77.8, 33.0], [77.9, 33.0], [78.0, 34.0], [78.1, 34.0], [78.2, 34.0], [78.3, 34.0], [78.4, 34.0], [78.5, 34.0], [78.6, 34.0], [78.7, 34.0], [78.8, 34.0], [78.9, 34.0], [79.0, 34.0], [79.1, 34.0], [79.2, 34.0], [79.3, 34.0], [79.4, 34.0], [79.5, 34.0], [79.6, 34.0], [79.7, 34.0], [79.8, 34.0], [79.9, 34.0], [80.0, 34.0], [80.1, 34.0], [80.2, 34.0], [80.3, 34.0], [80.4, 35.0], [80.5, 35.0], [80.6, 35.0], [80.7, 35.0], [80.8, 35.0], [80.9, 35.0], [81.0, 35.0], [81.1, 35.0], [81.2, 35.0], [81.3, 35.0], [81.4, 35.0], [81.5, 35.0], [81.6, 35.0], [81.7, 35.0], [81.8, 35.0], [81.9, 35.0], [82.0, 35.0], [82.1, 35.0], [82.2, 35.0], [82.3, 35.0], [82.4, 35.0], [82.5, 35.0], [82.6, 36.0], [82.7, 36.0], [82.8, 36.0], [82.9, 36.0], [83.0, 36.0], [83.1, 36.0], [83.2, 36.0], [83.3, 36.0], [83.4, 36.0], [83.5, 36.0], [83.6, 36.0], [83.7, 36.0], [83.8, 37.0], [83.9, 37.0], [84.0, 37.0], [84.1, 37.0], [84.2, 37.0], [84.3, 37.0], [84.4, 38.0], [84.5, 38.0], [84.6, 39.0], [84.7, 40.0], [84.8, 42.0], [84.9, 42.0], [85.0, 42.0], [85.1, 42.0], [85.2, 43.0], [85.3, 43.0], [85.4, 43.0], [85.5, 43.0], [85.6, 43.0], [85.7, 43.0], [85.8, 43.0], [85.9, 43.0], [86.0, 43.0], [86.1, 43.0], [86.2, 43.0], [86.3, 43.0], [86.4, 44.0], [86.5, 44.0], [86.6, 44.0], [86.7, 44.0], [86.8, 44.0], [86.9, 44.0], [87.0, 44.0], [87.1, 44.0], [87.2, 44.0], [87.3, 44.0], [87.4, 44.0], [87.5, 44.0], [87.6, 44.0], [87.7, 45.0], [87.8, 45.0], [87.9, 45.0], [88.0, 45.0], [88.1, 45.0], [88.2, 45.0], [88.3, 45.0], [88.4, 45.0], [88.5, 45.0], [88.6, 45.0], [88.7, 46.0], [88.8, 46.0], [88.9, 46.0], [89.0, 46.0], [89.1, 46.0], [89.2, 46.0], [89.3, 46.0], [89.4, 47.0], [89.5, 47.0], [89.6, 47.0], [89.7, 48.0], [89.8, 49.0], [89.9, 50.0], [90.0, 51.0], [90.1, 52.0], [90.2, 52.0], [90.3, 52.0], [90.4, 52.0], [90.5, 52.0], [90.6, 52.0], [90.7, 53.0], [90.8, 53.0], [90.9, 53.0], [91.0, 53.0], [91.1, 53.0], [91.2, 53.0], [91.3, 53.0], [91.4, 53.0], [91.5, 54.0], [91.6, 54.0], [91.7, 54.0], [91.8, 54.0], [91.9, 54.0], [92.0, 54.0], [92.1, 54.0], [92.2, 55.0], [92.3, 55.0], [92.4, 55.0], [92.5, 55.0], [92.6, 55.0], [92.7, 56.0], [92.8, 56.0], [92.9, 56.0], [93.0, 57.0], [93.1, 57.0], [93.2, 58.0], [93.3, 59.0], [93.4, 61.0], [93.5, 61.0], [93.6, 61.0], [93.7, 62.0], [93.8, 62.0], [93.9, 62.0], [94.0, 62.0], [94.1, 62.0], [94.2, 63.0], [94.3, 63.0], [94.4, 63.0], [94.5, 63.0], [94.6, 64.0], [94.7, 64.0], [94.8, 64.0], [94.9, 64.0], [95.0, 65.0], [95.1, 65.0], [95.2, 65.0], [95.3, 66.0], [95.4, 66.0], [95.5, 67.0], [95.6, 69.0], [95.7, 70.0], [95.8, 71.0], [95.9, 71.0], [96.0, 71.0], [96.1, 72.0], [96.2, 72.0], [96.3, 73.0], [96.4, 73.0], [96.5, 73.0], [96.6, 74.0], [96.7, 74.0], [96.8, 75.0], [96.9, 76.0], [97.0, 77.0], [97.1, 79.0], [97.2, 80.0], [97.3, 80.0], [97.4, 81.0], [97.5, 82.0], [97.6, 82.0], [97.7, 83.0], [97.8, 84.0], [97.9, 85.0], [98.0, 86.0], [98.1, 88.0], [98.2, 89.0], [98.3, 90.0], [98.4, 91.0], [98.5, 92.0], [98.6, 94.0], [98.7, 96.0], [98.8, 99.0], [98.9, 100.0], [99.0, 102.0], [99.1, 104.0], [99.2, 108.0], [99.3, 110.0], [99.4, 113.0], [99.5, 118.0], [99.6, 122.0], [99.7, 129.0], [99.8, 138.0], [99.9, 153.0]], "isOverall": false, "label": "Get Employee 1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2910223.0, "series": [{"data": [[0.0, 2909133.0], [300.0, 1.0], [100.0, 33392.0], [200.0, 317.0]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[0.0, 2910223.0], [100.0, 33197.0], [200.0, 309.0]], "isOverall": false, "label": "Get Employee 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5886572.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5886572.0, "series": [{"data": [[0.0, 5886572.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 247.49996981157838, "minX": 1.64976828E12, "maxY": 250.0, "series": [{"data": [[1.64976852E12, 250.0], [1.64976834E12, 250.0], [1.64976828E12, 247.49996981157838], [1.64976846E12, 250.0], [1.6497684E12, 250.0], [1.64976858E12, 249.7150808763821]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64976858E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.0, "maxY": 108.0, "series": [{"data": [[5.0, 2.0], [8.0, 1.0], [9.0, 0.5], [10.0, 1.0], [11.0, 1.1428571428571428], [12.0, 1.0], [13.0, 1.1428571428571428], [14.0, 1.375], [15.0, 1.25], [16.0, 2.0], [17.0, 1.0], [18.0, 1.6666666666666667], [19.0, 2.4], [20.0, 1.7142857142857142], [21.0, 2.3636363636363638], [22.0, 2.1666666666666665], [23.0, 1.95], [24.0, 2.4545454545454546], [25.0, 1.625], [26.0, 2.625], [27.0, 1.0], [28.0, 2.3703703703703707], [29.0, 2.5555555555555554], [30.0, 1.8289473684210527], [31.0, 1.7428571428571433], [32.0, 2.9], [33.0, 1.7093023255813953], [34.0, 3.4382022471910108], [35.0, 5.214285714285715], [36.0, 3.769230769230769], [37.0, 4.500000000000001], [38.0, 3.727272727272728], [39.0, 4.0], [40.0, 7.9444444444444455], [41.0, 12.5625], [42.0, 8.5], [43.0, 4.0], [44.0, 3.4090909090909096], [45.0, 3.0], [46.0, 3.5384615384615383], [47.0, 6.904761904761903], [48.0, 4.384615384615384], [49.0, 5.888888888888889], [51.0, 5.217391304347827], [52.0, 8.333333333333334], [53.0, 8.0], [54.0, 8.4], [57.0, 8.357142857142858], [56.0, 6.333333333333333], [58.0, 13.235294117647058], [59.0, 8.562499999999998], [60.0, 11.714285714285714], [61.0, 7.5], [62.0, 5.117647058823529], [63.0, 5.625], [64.0, 6.5], [65.0, 5.75], [66.0, 7.666666666666666], [67.0, 15.333333333333334], [70.0, 13.227272727272727], [71.0, 11.444444444444445], [69.0, 7.333333333333333], [72.0, 8.4], [73.0, 5.666666666666667], [74.0, 9.703703703703704], [75.0, 6.413793103448277], [76.0, 6.0], [77.0, 7.266666666666667], [78.0, 13.5], [79.0, 12.1], [81.0, 10.777777777777777], [82.0, 10.384615384615385], [83.0, 26.5], [80.0, 10.0], [84.0, 10.055555555555557], [85.0, 7.75], [86.0, 9.272727272727273], [87.0, 8.863636363636363], [90.0, 11.0], [91.0, 10.937500000000002], [89.0, 4.333333333333333], [93.0, 12.133333333333333], [95.0, 41.4], [94.0, 61.0], [92.0, 16.0], [96.0, 11.0], [97.0, 13.0], [98.0, 10.0], [99.0, 8.812499999999998], [100.0, 16.076923076923077], [102.0, 10.275862068965518], [103.0, 8.714285714285715], [101.0, 38.0], [104.0, 17.8], [106.0, 13.0], [107.0, 26.5], [105.0, 15.42857142857143], [108.0, 18.444444444444443], [109.0, 13.75], [110.0, 17.846153846153847], [111.0, 14.285714285714286], [112.0, 14.0], [113.0, 28.0], [114.0, 18.25], [115.0, 16.75], [116.0, 14.625], [117.0, 17.444444444444446], [118.0, 17.444444444444443], [119.0, 21.90909090909091], [121.0, 16.333333333333332], [122.0, 12.272727272727273], [123.0, 14.0], [124.0, 17.428571428571427], [125.0, 19.0], [126.0, 17.176470588235297], [127.0, 21.307692307692307], [128.0, 16.90909090909091], [129.0, 46.16666666666667], [130.0, 12.249999999999998], [131.0, 18.375], [132.0, 14.041666666666666], [133.0, 23.333333333333336], [135.0, 37.75], [136.0, 16.8125], [137.0, 15.416666666666666], [138.0, 17.166666666666664], [139.0, 14.631578947368425], [140.0, 22.266666666666666], [141.0, 26.22222222222222], [142.0, 16.46153846153846], [143.0, 30.833333333333332], [144.0, 15.72], [146.0, 12.741935483870968], [147.0, 15.666666666666666], [150.0, 12.666666666666668], [151.0, 16.0], [149.0, 20.666666666666668], [148.0, 10.0], [145.0, 17.0], [152.0, 28.0], [153.0, 18.47826086956522], [154.0, 18.22222222222222], [155.0, 18.333333333333332], [156.0, 19.71428571428571], [157.0, 24.833333333333336], [158.0, 21.611111111111118], [159.0, 15.999999999999998], [160.0, 19.193548387096776], [161.0, 16.823529411764707], [162.0, 12.85], [164.0, 10.352941176470589], [165.0, 40.33333333333333], [166.0, 14.800000000000002], [167.0, 27.75], [163.0, 34.5], [168.0, 20.11764705882353], [169.0, 18.0], [170.0, 16.0], [171.0, 12.500000000000002], [172.0, 13.230769230769232], [173.0, 20.416666666666668], [174.0, 17.166666666666668], [175.0, 15.0], [176.0, 19.86363636363636], [177.0, 30.25], [178.0, 12.899999999999999], [179.0, 11.0], [180.0, 19.549999999999997], [181.0, 19.0], [182.0, 22.099999999999998], [183.0, 33.0], [184.0, 17.57142857142857], [185.0, 13.571428571428571], [186.0, 19.695652173913047], [187.0, 19.666666666666668], [188.0, 17.0], [189.0, 24.71428571428571], [190.0, 22.416666666666668], [191.0, 22.0], [192.0, 19.846153846153847], [193.0, 13.0], [194.0, 15.19047619047619], [195.0, 43.66666666666667], [196.0, 15.100000000000001], [197.0, 38.75], [198.0, 32.416666666666664], [200.0, 24.206896551724142], [201.0, 42.0], [202.0, 13.423076923076923], [203.0, 10.2], [204.0, 19.166666666666668], [205.0, 15.444444444444441], [206.0, 17.625], [207.0, 18.875], [208.0, 12.454545454545455], [209.0, 6.142857142857143], [210.0, 18.416666666666668], [211.0, 8.5], [212.0, 18.000000000000004], [213.0, 13.941176470588236], [214.0, 15.545454545454545], [215.0, 36.875], [216.0, 21.96774193548387], [217.0, 8.714285714285714], [218.0, 23.173913043478265], [219.0, 23.599999999999998], [220.0, 15.666666666666668], [222.0, 17.444444444444443], [223.0, 31.285714285714285], [224.0, 22.18181818181818], [225.0, 17.736842105263158], [226.0, 21.900000000000002], [227.0, 21.235294117647054], [228.0, 19.736842105263154], [229.0, 19.0], [230.0, 23.842105263157894], [231.0, 23.0], [233.0, 22.875], [234.0, 19.7], [235.0, 19.0], [236.0, 18.88], [237.0, 18.416666666666668], [238.0, 29.200000000000006], [239.0, 27.0], [232.0, 32.0], [240.0, 24.476190476190474], [241.0, 33.0625], [242.0, 21.714285714285715], [243.0, 22.333333333333332], [244.0, 15.153846153846157], [245.0, 12.562500000000002], [246.0, 17.727272727272727], [247.0, 17.333333333333332], [248.0, 21.058823529411764], [249.0, 36.25], [250.0, 27.666666666666668], [252.0, 24.291666666666664], [253.0, 22.034482758620694], [254.0, 20.5], [255.0, 29.142857142857142], [251.0, 17.333333333333332], [259.0, 16.5], [257.0, 14.11111111111111], [256.0, 21.095238095238095], [258.0, 18.000000000000004], [262.0, 22.83333333333333], [261.0, 11.0], [260.0, 40.0], [263.0, 23.190476190476186], [264.0, 16.181818181818176], [271.0, 21.600000000000005], [268.0, 18.6], [269.0, 12.0], [270.0, 22.0], [265.0, 29.6], [266.0, 15.157894736842106], [267.0, 16.461538461538463], [273.0, 35.89473684210526], [272.0, 26.599999999999998], [274.0, 41.285714285714285], [275.0, 35.4], [276.0, 25.304347826086964], [277.0, 21.571428571428573], [278.0, 24.0], [280.0, 26.25], [286.0, 28.666666666666668], [287.0, 28.857142857142854], [284.0, 23.277777777777775], [285.0, 26.333333333333336], [281.0, 32.0], [282.0, 25.916666666666664], [283.0, 17.3], [289.0, 28.545454545454543], [288.0, 30.8], [290.0, 34.53846153846153], [291.0, 34.2], [292.0, 34.85714285714286], [293.0, 24.90909090909091], [294.0, 22.0], [295.0, 27.0], [296.0, 24.727272727272727], [302.0, 33.333333333333336], [303.0, 19.0], [300.0, 20.480000000000004], [301.0, 19.28], [297.0, 28.000000000000004], [298.0, 25.454545454545453], [299.0, 31.0], [304.0, 30.823529411764707], [305.0, 26.5], [316.0, 27.727272727272723], [317.0, 37.142857142857146], [318.0, 24.53846153846154], [319.0, 22.374999999999996], [308.0, 26.77272727272727], [309.0, 23.964285714285715], [310.0, 17.608695652173914], [311.0, 18.333333333333332], [312.0, 27.000000000000004], [314.0, 28.789473684210527], [315.0, 12.8], [322.0, 27.3], [320.0, 25.54545454545454], [323.0, 24.71428571428571], [332.0, 18.77777777777778], [333.0, 30.142857142857146], [334.0, 26.250000000000004], [335.0, 16.18181818181818], [324.0, 22.0625], [325.0, 23.22222222222222], [326.0, 25.75], [327.0, 23.6], [328.0, 20.53846153846154], [329.0, 37.0], [330.0, 28.41666666666667], [331.0, 33.0], [337.0, 14.0], [336.0, 36.75], [338.0, 24.4], [339.0, 21.77272727272727], [340.0, 41.666666666666664], [341.0, 39.857142857142854], [342.0, 28.4375], [343.0, 32.514285714285705], [344.0, 23.5], [350.0, 36.16666666666668], [351.0, 30.272727272727277], [348.0, 12.4], [349.0, 30.333333333333332], [345.0, 20.555555555555557], [346.0, 22.294117647058822], [347.0, 27.27272727272727], [364.0, 26.944444444444443], [354.0, 21.166666666666668], [353.0, 22.0], [352.0, 34.0], [355.0, 35.4], [365.0, 28.400000000000002], [366.0, 30.375000000000007], [367.0, 19.785714285714285], [356.0, 24.9047619047619], [357.0, 33.333333333333336], [360.0, 40.0], [361.0, 27.972972972972975], [362.0, 24.575757575757574], [363.0, 14.833333333333334], [370.0, 31.95454545454545], [368.0, 26.375000000000004], [369.0, 24.0], [371.0, 39.590909090909086], [380.0, 29.062499999999996], [381.0, 43.214285714285715], [382.0, 23.0], [383.0, 28.76923076923077], [372.0, 32.49999999999999], [373.0, 16.8], [374.0, 21.07407407407408], [375.0, 19.0], [376.0, 30.0], [377.0, 23.375], [378.0, 38.0], [379.0, 29.2], [385.0, 42.25], [384.0, 18.25], [386.0, 19.307692307692307], [387.0, 30.700000000000003], [388.0, 24.411764705882348], [389.0, 50.5], [390.0, 28.3], [391.0, 17.0], [392.0, 34.70967741935484], [396.0, 27.8], [397.0, 39.958333333333336], [393.0, 33.956521739130444], [395.0, 20.0], [394.0, 29.75], [401.0, 39.37837837837837], [400.0, 44.45833333333333], [402.0, 32.333333333333336], [403.0, 24.666666666666668], [404.0, 36.714285714285715], [405.0, 22.9], [406.0, 23.20689655172414], [407.0, 27.333333333333332], [408.0, 26.333333333333336], [414.0, 37.8695652173913], [415.0, 31.666666666666664], [412.0, 33.199999999999996], [413.0, 44.833333333333336], [409.0, 28.625], [410.0, 35.8421052631579], [411.0, 39.166666666666664], [417.0, 30.333333333333332], [416.0, 27.421052631578952], [418.0, 28.357142857142854], [419.0, 27.375], [420.0, 38.07692307692308], [421.0, 29.555555555555557], [422.0, 36.111111111111114], [423.0, 49.25], [424.0, 36.14999999999999], [430.0, 26.833333333333336], [431.0, 44.333333333333336], [428.0, 42.59259259259259], [429.0, 31.375000000000007], [425.0, 36.83333333333333], [426.0, 30.266666666666662], [427.0, 40.0], [433.0, 32.0], [432.0, 39.2], [434.0, 28.365853658536583], [435.0, 38.0], [436.0, 26.5], [437.0, 41.666666666666664], [438.0, 27.727272727272727], [439.0, 28.42857142857143], [440.0, 37.45454545454546], [446.0, 20.5], [447.0, 47.25], [444.0, 37.72222222222222], [445.0, 23.5], [441.0, 42.00000000000001], [442.0, 57.5], [443.0, 30.931034482758616], [449.0, 23.4], [448.0, 22.9], [450.0, 32.8421052631579], [451.0, 45.38095238095239], [452.0, 22.0], [453.0, 21.4], [454.0, 23.125], [455.0, 20.333333333333332], [456.0, 36.33333333333333], [462.0, 46.583333333333336], [463.0, 22.0], [460.0, 37.666666666666664], [461.0, 41.142857142857146], [457.0, 22.333333333333332], [458.0, 34.65384615384616], [459.0, 27.375], [465.0, 21.5], [464.0, 36.368421052631575], [466.0, 34.24137931034483], [467.0, 39.92307692307692], [468.0, 31.210526315789476], [469.0, 46.4], [470.0, 25.384615384615387], [471.0, 20.8], [472.0, 37.94736842105264], [478.0, 32.09090909090909], [479.0, 29.27272727272727], [476.0, 36.1764705882353], [477.0, 35.285714285714285], [473.0, 65.125], [474.0, 35.96], [475.0, 51.3], [481.0, 39.5909090909091], [480.0, 27.733333333333338], [482.0, 26.5], [483.0, 29.666666666666668], [492.0, 31.68181818181819], [493.0, 60.6], [494.0, 31.454545454545457], [495.0, 44.911764705882355], [484.0, 34.81818181818183], [485.0, 17.0], [486.0, 43.10344827586206], [487.0, 39.0], [488.0, 42.173913043478265], [489.0, 26.541666666666668], [490.0, 37.62499999999999], [491.0, 45.72727272727272], [496.0, 48.52380952380952], [497.0, 33.67741935483871], [498.0, 43.46875], [499.0, 34.111111111111114], [500.0, 25.367486784926694]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[499.4942523267434, 25.361353969614154]], "isOverall": false, "label": "Get Employee 2-Aggregated", "isController": false}, {"data": [[2.0, 0.7], [3.0, 0.6875000000000001], [4.0, 0.6521739130434783], [5.0, 0.6666666666666669], [6.0, 0.8666666666666665], [7.0, 0.4], [8.0, 0.8157894736842105], [9.0, 0.7727272727272727], [10.0, 1.0], [11.0, 1.0], [12.0, 0.5], [13.0, 1.5714285714285714], [14.0, 1.3571428571428572], [15.0, 1.0], [16.0, 2.8888888888888893], [17.0, 1.5], [18.0, 2.5999999999999996], [19.0, 1.0], [20.0, 2.5], [21.0, 1.8749999999999998], [22.0, 2.4], [23.0, 2.0714285714285716], [24.0, 2.555555555555556], [25.0, 1.6666666666666667], [26.0, 2.6666666666666665], [27.0, 2.25], [28.0, 2.789473684210526], [29.0, 3.111111111111111], [30.0, 4.0], [31.0, 2.0], [32.0, 2.642857142857143], [33.0, 4.5], [34.0, 3.3809523809523805], [35.0, 3.3333333333333335], [36.0, 3.5624999999999996], [37.0, 3.6666666666666665], [38.0, 10.071428571428571], [39.0, 6.5], [40.0, 6.428571428571428], [41.0, 6.499999999999999], [42.0, 5.5], [43.0, 2.0], [44.0, 4.842105263157895], [45.0, 2.0], [46.0, 4.083333333333333], [47.0, 4.809523809523811], [48.0, 3.8], [49.0, 11.6], [50.0, 8.0], [51.0, 26.5], [52.0, 7.428571428571429], [53.0, 9.333333333333334], [57.0, 17.5], [58.0, 12.263157894736839], [59.0, 10.125000000000002], [60.0, 6.166666666666666], [61.0, 5.0], [62.0, 5.478260869565217], [65.0, 6.333333333333333], [66.0, 8.842105263157894], [67.0, 12.0], [70.0, 13.708333333333334], [71.0, 11.0], [72.0, 4.357142857142857], [73.0, 9.875], [74.0, 9.461538461538462], [75.0, 8.266666666666666], [76.0, 7.25], [77.0, 9.16], [78.0, 12.0], [80.0, 12.0], [81.0, 9.083333333333334], [82.0, 10.700000000000001], [83.0, 10.75], [84.0, 10.047619047619047], [85.0, 5.75], [86.0, 6.888888888888889], [87.0, 9.3], [90.0, 10.88888888888889], [91.0, 15.318181818181817], [92.0, 17.0], [93.0, 12.944444444444443], [96.0, 9.5], [97.0, 10.222222222222221], [98.0, 10.5], [99.0, 13.5], [100.0, 13.705882352941174], [102.0, 14.176470588235292], [103.0, 21.875], [104.0, 48.666666666666664], [106.0, 18.818181818181817], [108.0, 37.0], [109.0, 20.0], [110.0, 17.380952380952383], [111.0, 44.5], [112.0, 17.636363636363637], [113.0, 20.166666666666664], [114.0, 13.933333333333332], [115.0, 13.25], [116.0, 14.5], [117.0, 12.42857142857143], [118.0, 21.18181818181818], [119.0, 15.571428571428573], [120.0, 53.0], [121.0, 13.666666666666666], [122.0, 11.833333333333334], [123.0, 12.4], [124.0, 24.05], [126.0, 15.476190476190474], [127.0, 21.0], [125.0, 66.0], [128.0, 14.285714285714285], [129.0, 12.0], [130.0, 11.937500000000002], [131.0, 7.0], [132.0, 12.636363636363638], [133.0, 10.5], [135.0, 16.0], [136.0, 15.636363636363637], [137.0, 17.52631578947368], [138.0, 22.0], [139.0, 9.5], [140.0, 9.923076923076923], [141.0, 11.4], [142.0, 15.380952380952383], [143.0, 12.666666666666666], [144.0, 13.892857142857142], [146.0, 16.38095238095238], [147.0, 20.5], [148.0, 20.5], [150.0, 19.71428571428571], [151.0, 15.250000000000002], [152.0, 20.0], [153.0, 15.833333333333334], [154.0, 18.090909090909093], [155.0, 18.5], [156.0, 32.875], [157.0, 24.25], [158.0, 28.666666666666668], [160.0, 19.058823529411768], [161.0, 22.545454545454547], [162.0, 14.75], [163.0, 40.333333333333336], [164.0, 15.77777777777778], [165.0, 61.0], [166.0, 14.666666666666666], [167.0, 26.25], [168.0, 18.666666666666664], [169.0, 30.0], [170.0, 17.133333333333333], [171.0, 12.0], [172.0, 19.04761904761905], [173.0, 15.666666666666668], [174.0, 52.0], [175.0, 17.5], [176.0, 15.0], [177.0, 14.5], [178.0, 9.6], [179.0, 19.875], [180.0, 21.366666666666667], [181.0, 42.333333333333336], [182.0, 27.5], [183.0, 20.0], [184.0, 19.222222222222225], [185.0, 21.0], [186.0, 14.722222222222225], [187.0, 24.0], [188.0, 16.81818181818182], [189.0, 19.545454545454547], [190.0, 23.208333333333336], [191.0, 82.0], [192.0, 20.357142857142854], [193.0, 14.0], [194.0, 17.136363636363637], [195.0, 6.5], [196.0, 14.285714285714285], [197.0, 15.5], [198.0, 20.839999999999996], [200.0, 21.68], [201.0, 13.0], [202.0, 13.319999999999999], [204.0, 20.88235294117647], [205.0, 15.857142857142858], [206.0, 17.0], [207.0, 24.933333333333334], [203.0, 49.0], [208.0, 21.72727272727273], [209.0, 16.625], [210.0, 17.13333333333333], [211.0, 13.75], [212.0, 20.5], [213.0, 13.0], [214.0, 17.200000000000003], [215.0, 12.333333333333334], [216.0, 22.52380952380952], [217.0, 53.0], [218.0, 22.433333333333337], [219.0, 25.187500000000004], [220.0, 21.0], [221.0, 18.0], [222.0, 46.0], [223.0, 25.0], [224.0, 8.0], [225.0, 19.71428571428571], [226.0, 21.42105263157895], [227.0, 21.6875], [228.0, 22.285714285714285], [229.0, 22.6], [230.0, 23.133333333333333], [231.0, 25.142857142857142], [233.0, 30.2], [234.0, 18.024390243902435], [235.0, 17.0], [236.0, 16.875], [237.0, 21.416666666666668], [238.0, 26.437500000000004], [240.0, 28.833333333333332], [241.0, 29.235294117647058], [242.0, 36.33333333333333], [243.0, 13.75], [244.0, 13.250000000000002], [245.0, 27.857142857142858], [247.0, 25.0], [248.0, 23.47457627118645], [249.0, 19.0], [250.0, 26.0], [252.0, 23.352941176470587], [253.0, 31.5], [254.0, 27.0], [255.0, 24.0], [251.0, 92.0], [259.0, 36.75], [257.0, 15.0], [256.0, 21.95454545454546], [258.0, 17.357142857142854], [262.0, 23.914285714285715], [261.0, 58.0], [260.0, 108.0], [263.0, 32.31818181818181], [264.0, 26.05], [271.0, 19.979166666666664], [268.0, 16.25], [269.0, 67.0], [270.0, 29.5], [265.0, 30.75], [266.0, 18.21428571428571], [267.0, 16.214285714285715], [273.0, 32.21052631578947], [272.0, 29.173913043478258], [274.0, 38.666666666666664], [275.0, 67.0], [284.0, 21.82352941176471], [285.0, 29.214285714285715], [286.0, 30.0], [287.0, 27.222222222222218], [276.0, 26.058823529411764], [277.0, 45.75], [278.0, 23.0], [280.0, 48.0], [281.0, 31.0], [282.0, 26.125], [283.0, 31.25], [289.0, 33.5], [288.0, 33.666666666666664], [290.0, 29.666666666666668], [291.0, 40.666666666666664], [292.0, 38.1875], [293.0, 25.863636363636363], [294.0, 27.666666666666668], [295.0, 47.0], [296.0, 26.777777777777782], [302.0, 24.833333333333336], [303.0, 14.666666666666666], [300.0, 19.178571428571434], [301.0, 22.565217391304348], [297.0, 34.545454545454554], [298.0, 23.799999999999997], [305.0, 26.0], [304.0, 16.285714285714285], [306.0, 72.0], [307.0, 12.0], [308.0, 35.0], [309.0, 30.703703703703702], [310.0, 22.545454545454547], [311.0, 10.0], [312.0, 31.347826086956534], [318.0, 34.964285714285715], [319.0, 23.0], [316.0, 37.24999999999999], [317.0, 14.0], [313.0, 31.0], [314.0, 24.727272727272727], [315.0, 45.42857142857143], [322.0, 14.0], [320.0, 24.181818181818183], [321.0, 27.5], [323.0, 10.5], [332.0, 26.636363636363633], [333.0, 21.857142857142858], [334.0, 31.333333333333332], [335.0, 36.93333333333333], [324.0, 28.718750000000004], [325.0, 28.571428571428577], [326.0, 20.678571428571427], [327.0, 36.0], [328.0, 21.999999999999996], [329.0, 17.999999999999996], [330.0, 27.545454545454543], [331.0, 27.857142857142854], [337.0, 14.0], [336.0, 29.315789473684216], [338.0, 32.866666666666674], [339.0, 34.55], [340.0, 11.333333333333334], [341.0, 40.0], [342.0, 19.94117647058824], [343.0, 29.459459459459463], [344.0, 24.33333333333333], [350.0, 24.526315789473685], [351.0, 27.416666666666664], [348.0, 19.75], [349.0, 28.36842105263158], [345.0, 23.909090909090914], [346.0, 18.875], [347.0, 18.5], [354.0, 21.63888888888889], [353.0, 40.75], [352.0, 24.5], [355.0, 68.25], [364.0, 21.666666666666664], [365.0, 16.25], [366.0, 22.72222222222222], [367.0, 22.0], [356.0, 29.72222222222222], [357.0, 29.333333333333332], [358.0, 12.0], [359.0, 34.0], [360.0, 26.6], [361.0, 24.645161290322587], [362.0, 33.472222222222214], [363.0, 26.166666666666668], [369.0, 23.2], [368.0, 27.058823529411757], [370.0, 26.73076923076923], [371.0, 32.1875], [372.0, 39.666666666666664], [373.0, 38.0], [374.0, 21.75], [376.0, 27.53846153846154], [382.0, 33.13333333333333], [383.0, 32.160000000000004], [380.0, 30.062499999999996], [381.0, 42.18181818181818], [377.0, 28.5], [378.0, 31.88], [379.0, 32.25], [385.0, 25.25], [384.0, 16.5], [386.0, 31.240000000000002], [387.0, 38.833333333333336], [388.0, 31.944444444444443], [389.0, 48.0], [390.0, 31.349999999999998], [391.0, 16.0], [392.0, 28.892857142857142], [399.0, 20.0], [396.0, 31.5], [397.0, 30.695652173913043], [393.0, 26.16], [394.0, 35.0], [395.0, 60.0], [403.0, 38.5], [401.0, 44.54285714285715], [400.0, 30.117647058823525], [407.0, 20.0], [402.0, 30.9], [404.0, 23.30769230769231], [405.0, 19.0], [406.0, 28.89473684210526], [408.0, 21.3125], [414.0, 31.448275862068968], [415.0, 29.5], [412.0, 36.5], [413.0, 36.4], [409.0, 43.875], [410.0, 29.357142857142858], [411.0, 35.46153846153846], [417.0, 41.666666666666664], [416.0, 30.692307692307693], [418.0, 44.84210526315789], [419.0, 30.75], [420.0, 47.00000000000001], [421.0, 32.952380952380956], [422.0, 39.27272727272727], [423.0, 54.333333333333336], [424.0, 32.294117647058826], [430.0, 24.0], [431.0, 50.8], [428.0, 33.0], [429.0, 23.615384615384617], [425.0, 42.0], [426.0, 38.88], [427.0, 27.1], [433.0, 32.75], [432.0, 44.0], [434.0, 30.939393939393938], [435.0, 37.333333333333336], [436.0, 20.142857142857142], [437.0, 46.125], [438.0, 28.5], [439.0, 31.500000000000004], [440.0, 40.625], [446.0, 74.0], [447.0, 32.16666666666667], [444.0, 33.478260869565226], [445.0, 39.8], [441.0, 20.0], [442.0, 34.00000000000001], [443.0, 33.66666666666667], [449.0, 27.6], [448.0, 46.93750000000001], [450.0, 27.5], [451.0, 39.65384615384616], [452.0, 47.666666666666664], [453.0, 49.0], [454.0, 26.499999999999996], [455.0, 18.0], [456.0, 39.72222222222222], [462.0, 39.800000000000004], [463.0, 17.5], [460.0, 31.192307692307683], [461.0, 29.000000000000004], [457.0, 26.4], [458.0, 27.047619047619047], [459.0, 60.0], [465.0, 34.33333333333333], [464.0, 33.76923076923077], [466.0, 44.78947368421053], [467.0, 27.750000000000004], [468.0, 37.047619047619044], [469.0, 17.0], [470.0, 35.47619047619048], [471.0, 44.53846153846154], [472.0, 45.733333333333334], [478.0, 30.1], [479.0, 30.285714285714285], [476.0, 29.133333333333336], [477.0, 27.333333333333332], [473.0, 40.49999999999999], [474.0, 36.4], [475.0, 28.88888888888889], [481.0, 35.88235294117647], [480.0, 36.81250000000001], [482.0, 44.8], [483.0, 36.0], [492.0, 44.476190476190474], [493.0, 43.4], [494.0, 48.458333333333336], [495.0, 43.25000000000001], [484.0, 38.9032258064516], [485.0, 21.142857142857146], [486.0, 42.08695652173914], [487.0, 27.0], [488.0, 36.125], [490.0, 34.8], [489.0, 18.818181818181817], [491.0, 25.833333333333332], [496.0, 36.53333333333333], [497.0, 35.71875], [498.0, 42.48275862068965], [499.0, 31.853658536585357], [500.0, 25.35724421350957], [1.0, 2.0]], "isOverall": false, "label": "Get Employee 1", "isController": false}, {"data": [[499.5547355072416, 25.353948682096654]], "isOverall": false, "label": "Get Employee 1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 997071.1, "minX": 1.64976828E12, "maxY": 3850007.433333333, "series": [{"data": [[1.64976852E12, 3734893.8833333333], [1.64976834E12, 3833705.95], [1.64976828E12, 1497331.55], [1.64976846E12, 3850007.433333333], [1.6497684E12, 3842535.466666667], [1.64976858E12, 2246442.6666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64976852E12, 2487233.95], [1.64976834E12, 2553021.8], [1.64976828E12, 997071.1], [1.64976846E12, 2563890.05], [1.6497684E12, 2558910.65], [1.64976858E12, 1496002.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64976858E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 25.012402700726664, "minX": 1.64976828E12, "maxY": 26.000641992653165, "series": [{"data": [[1.64976852E12, 25.881715186853114], [1.64976834E12, 25.153229095395293], [1.64976828E12, 25.12800574334813], [1.64976846E12, 25.11576616801873], [1.6497684E12, 25.05700722158633], [1.64976858E12, 25.947167385546333]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[1.64976852E12, 25.871804223411914], [1.64976834E12, 25.128472257291094], [1.64976828E12, 25.012402700726664], [1.64976846E12, 25.07720317781088], [1.6497684E12, 25.108838525291898], [1.64976858E12, 26.000641992653165]], "isOverall": false, "label": "Get Employee 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64976858E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 24.993149271061355, "minX": 1.64976828E12, "maxY": 25.98140812307851, "series": [{"data": [[1.64976852E12, 25.862545736241746], [1.64976834E12, 25.135062168638047], [1.64976828E12, 25.10760993668479], [1.64976846E12, 25.098397969598018], [1.6497684E12, 25.039950378873435], [1.64976858E12, 25.927945611965743]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[1.64976852E12, 25.852566041584435], [1.64976834E12, 25.11085300286428], [1.64976828E12, 24.993149271061355], [1.64976846E12, 25.059990314412207], [1.6497684E12, 25.091485456964087], [1.64976858E12, 25.98140812307851]], "isOverall": false, "label": "Get Employee 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64976858E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0010860916480055754, "minX": 1.64976828E12, "maxY": 0.0012686535070743482, "series": [{"data": [[1.64976852E12, 0.0011654527974324974], [1.64976834E12, 0.0011291132584860249], [1.64976828E12, 0.0011720236653634546], [1.64976846E12, 0.0012169656765321825], [1.6497684E12, 0.0010860916480055754], [1.64976858E12, 0.0011794787909051123]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[1.64976852E12, 0.0012566179864035556], [1.64976834E12, 0.0011463372756562883], [1.64976828E12, 0.0012686535070743482], [1.64976846E12, 0.0011864006314064438], [1.6497684E12, 0.0011472268901908502], [1.64976858E12, 0.0011429196559149535]], "isOverall": false, "label": "Get Employee 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64976858E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64976828E12, "maxY": 312.0, "series": [{"data": [[1.64976852E12, 312.0], [1.64976834E12, 281.0], [1.64976828E12, 274.0], [1.64976846E12, 278.0], [1.6497684E12, 290.0], [1.64976858E12, 258.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64976852E12, 54.0], [1.64976834E12, 50.0], [1.64976828E12, 51.0], [1.64976846E12, 52.0], [1.6497684E12, 52.0], [1.64976858E12, 49.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64976852E12, 103.0], [1.64976834E12, 100.0], [1.64976828E12, 102.0], [1.64976846E12, 100.0], [1.6497684E12, 101.0], [1.64976858E12, 105.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64976852E12, 68.0], [1.64976834E12, 63.0], [1.64976828E12, 64.0], [1.64976846E12, 64.0], [1.6497684E12, 67.0], [1.64976858E12, 66.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64976852E12, 0.0], [1.64976834E12, 0.0], [1.64976828E12, 0.0], [1.64976846E12, 0.0], [1.6497684E12, 0.0], [1.64976858E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64976852E12, 17.0], [1.64976834E12, 16.0], [1.64976828E12, 16.0], [1.64976846E12, 16.0], [1.6497684E12, 16.0], [1.64976858E12, 17.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64976858E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 4764.0, "maxY": 19.0, "series": [{"data": [[18987.0, 17.0], [19251.0, 17.0], [19187.0, 17.0], [19387.0, 16.0], [18995.0, 17.0], [19139.0, 17.0], [18939.0, 17.0], [19227.0, 17.0], [19275.0, 17.0], [19075.0, 17.0], [19107.0, 17.0], [19091.0, 17.0], [19955.0, 16.0], [19891.0, 16.0], [19851.0, 16.0], [19827.0, 16.0], [19619.0, 16.0], [20115.0, 16.0], [19987.0, 16.0], [20051.0, 16.0], [20067.0, 16.0], [20075.0, 16.0], [20059.0, 16.0], [20099.0, 16.0], [20147.0, 16.0], [20171.0, 16.0], [19731.0, 16.0], [19795.0, 16.0], [16482.0, 17.0], [19266.0, 17.0], [18834.0, 17.0], [19178.0, 17.0], [19162.0, 17.0], [18994.0, 17.0], [19090.0, 17.0], [19330.0, 17.0], [19882.0, 16.0], [20274.0, 16.0], [19818.0, 16.0], [19826.0, 16.0], [19842.0, 16.0], [19858.0, 16.0], [19866.0, 16.0], [20034.0, 16.0], [20074.0, 16.0], [20090.0, 16.0], [20098.0, 16.0], [20114.0, 16.0], [19698.0, 16.0], [20258.0, 16.0], [19530.0, 17.0], [19610.0, 16.0], [19914.0, 16.0], [19898.0, 16.0], [20138.0, 16.0], [19802.0, 16.0], [19770.0, 16.0], [19714.0, 16.0], [17209.0, 19.0], [19401.0, 17.0], [19433.0, 17.0], [19441.0, 16.0], [19329.0, 17.0], [18801.0, 17.0], [19057.0, 17.0], [18849.0, 17.0], [19089.0, 17.0], [19081.0, 17.0], [19169.0, 17.0], [19281.0, 17.0], [18857.0, 17.0], [19233.0, 17.0], [19937.0, 16.0], [19929.0, 16.0], [19905.0, 16.0], [19873.0, 16.0], [19841.0, 16.0], [19833.0, 16.0], [19945.0, 16.0], [19953.0, 16.0], [19649.0, 16.0], [20073.0, 16.0], [20017.0, 16.0], [20097.0, 16.0], [20105.0, 16.0], [19689.0, 16.0], [19721.0, 16.0], [19761.0, 16.0], [19737.0, 16.0], [19729.0, 16.0], [19809.0, 16.0], [19825.0, 16.0], [19801.0, 16.0], [19785.0, 16.0], [19777.0, 16.0], [19769.0, 16.0], [4764.0, 16.0], [19448.0, 17.0], [19136.0, 17.0], [19384.0, 16.0], [19240.0, 17.0], [18928.0, 17.0], [19064.0, 17.0], [18840.0, 17.0], [19184.0, 17.0], [19408.0, 16.0], [19080.0, 17.0], [19912.0, 16.0], [19840.0, 16.0], [20160.0, 16.0], [19888.0, 16.0], [19904.0, 16.0], [19832.0, 16.0], [19856.0, 16.0], [20040.0, 16.0], [20024.0, 16.0], [20000.0, 16.0], [20088.0, 16.0], [20104.0, 16.0], [19928.0, 16.0], [19512.0, 16.0], [19544.0, 17.0], [19640.0, 16.0], [20152.0, 16.0], [19712.0, 16.0], [19752.0, 16.0], [19023.0, 16.0], [19287.0, 17.0], [18999.0, 17.0], [19079.0, 17.0], [19063.0, 17.0], [19367.0, 16.0], [19343.0, 16.0], [18943.0, 17.0], [19943.0, 16.0], [19927.0, 16.0], [19879.0, 16.0], [19919.0, 16.0], [19831.0, 16.0], [19863.0, 16.0], [19967.0, 16.0], [19471.0, 16.0], [20263.0, 16.0], [19999.0, 16.0], [20127.0, 16.0], [19735.0, 16.0], [19775.0, 16.0], [19743.0, 16.0], [19823.0, 16.0], [19783.0, 16.0], [19358.0, 16.0], [19070.0, 17.0], [19246.0, 17.0], [19406.0, 16.0], [18854.0, 17.0], [19230.0, 17.0], [19366.0, 17.0], [19382.0, 16.0], [19254.0, 17.0], [19278.0, 17.0], [19030.0, 17.0], [19878.0, 16.0], [19886.0, 16.0], [19990.0, 16.0], [20014.0, 16.0], [19822.0, 16.0], [19830.0, 16.0], [19838.0, 16.0], [19854.0, 16.0], [20126.0, 16.0], [20038.0, 16.0], [20062.0, 16.0], [20110.0, 16.0], [19622.0, 16.0], [19926.0, 16.0], [19934.0, 16.0], [19486.0, 16.0], [19918.0, 16.0], [19902.0, 16.0], [19894.0, 16.0], [20182.0, 16.0], [19782.0, 16.0], [19734.0, 16.0], [19766.0, 16.0], [19750.0, 16.0], [19726.0, 16.0], [19341.0, 16.0], [19445.0, 16.0], [19389.0, 16.0], [18893.0, 17.0], [19261.0, 17.0], [19205.0, 17.0], [19141.0, 17.0], [19221.0, 17.0], [18885.0, 17.0], [19189.0, 17.0], [19181.0, 17.0], [19909.0, 16.0], [19885.0, 16.0], [20173.0, 16.0], [20149.0, 16.0], [19829.0, 16.0], [19893.0, 16.0], [19917.0, 16.0], [19957.0, 16.0], [19621.0, 16.0], [19653.0, 16.0], [20061.0, 16.0], [20101.0, 16.0], [19989.0, 16.0], [20261.0, 16.0], [19725.0, 16.0], [19717.0, 16.0], [19741.0, 16.0], [19813.0, 16.0], [19821.0, 16.0], [19797.0, 16.0], [19781.0, 16.0], [8159.0, 16.0], [17596.0, 16.0], [18956.0, 17.0], [19124.0, 17.0], [19284.0, 17.0], [18892.0, 17.0], [19180.0, 17.0], [19116.0, 17.0], [19036.0, 17.0], [19420.0, 16.0], [19348.0, 17.0], [19212.0, 17.0], [19884.0, 16.0], [19868.0, 16.0], [19820.0, 16.0], [19804.0, 16.0], [19812.0, 16.0], [19828.0, 16.0], [19876.0, 16.0], [19836.0, 16.0], [19852.0, 16.0], [19860.0, 16.0], [20028.0, 16.0], [19972.0, 16.0], [20004.0, 16.0], [20052.0, 16.0], [20100.0, 16.0], [20108.0, 16.0], [20148.0, 16.0], [19692.0, 16.0], [19540.0, 16.0], [19956.0, 16.0], [19652.0, 16.0], [19916.0, 16.0], [19732.0, 16.0], [19764.0, 16.0], [19772.0, 16.0], [19780.0, 16.0], [19796.0, 16.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 20274.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 4764.0, "maxY": 19.0, "series": [{"data": [[18987.0, 17.0], [19251.0, 16.0], [19187.0, 17.0], [19387.0, 16.0], [18995.0, 17.0], [19139.0, 17.0], [18939.0, 17.0], [19227.0, 17.0], [19275.0, 17.0], [19075.0, 17.0], [19107.0, 17.0], [19091.0, 17.0], [19955.0, 16.0], [19891.0, 16.0], [19851.0, 16.0], [19827.0, 16.0], [19619.0, 16.0], [20115.0, 16.0], [19987.0, 16.0], [20051.0, 16.0], [20067.0, 16.0], [20075.0, 16.0], [20059.0, 16.0], [20099.0, 16.0], [20147.0, 16.0], [20171.0, 16.0], [19731.0, 16.0], [19795.0, 16.0], [16482.0, 17.0], [19266.0, 16.0], [18834.0, 17.0], [19178.0, 17.0], [19162.0, 17.0], [18994.0, 17.0], [19090.0, 17.0], [19330.0, 17.0], [19882.0, 16.0], [20274.0, 16.0], [19818.0, 16.0], [19826.0, 16.0], [19842.0, 16.0], [19858.0, 16.0], [19866.0, 16.0], [20034.0, 16.0], [20074.0, 16.0], [20090.0, 16.0], [20098.0, 16.0], [20114.0, 16.0], [19698.0, 16.0], [20258.0, 16.0], [19530.0, 17.0], [19610.0, 16.0], [19914.0, 16.0], [19898.0, 16.0], [20138.0, 16.0], [19802.0, 16.0], [19770.0, 16.0], [19714.0, 16.0], [17209.0, 19.0], [19401.0, 16.0], [19433.0, 17.0], [19441.0, 16.0], [19329.0, 17.0], [18801.0, 17.0], [19057.0, 17.0], [18849.0, 17.0], [19089.0, 17.0], [19081.0, 17.0], [19169.0, 17.0], [19281.0, 16.0], [18857.0, 17.0], [19233.0, 17.0], [19937.0, 16.0], [19929.0, 16.0], [19905.0, 16.0], [19873.0, 16.0], [19841.0, 16.0], [19833.0, 16.0], [19945.0, 16.0], [19953.0, 16.0], [19649.0, 16.0], [20073.0, 16.0], [20017.0, 16.0], [20097.0, 16.0], [20105.0, 16.0], [19689.0, 16.0], [19721.0, 16.0], [19761.0, 16.0], [19737.0, 16.0], [19729.0, 16.0], [19809.0, 16.0], [19825.0, 16.0], [19801.0, 16.0], [19785.0, 16.0], [19777.0, 16.0], [19769.0, 16.0], [4764.0, 16.0], [19448.0, 17.0], [19136.0, 17.0], [19384.0, 16.0], [19240.0, 17.0], [18928.0, 17.0], [19064.0, 17.0], [18840.0, 17.0], [19184.0, 17.0], [19408.0, 16.0], [19080.0, 17.0], [19912.0, 16.0], [19840.0, 16.0], [20160.0, 16.0], [19888.0, 16.0], [19904.0, 16.0], [19832.0, 16.0], [19856.0, 16.0], [20040.0, 16.0], [20024.0, 16.0], [20000.0, 16.0], [20088.0, 16.0], [20104.0, 16.0], [19928.0, 16.0], [19512.0, 16.0], [19544.0, 17.0], [19640.0, 16.0], [20152.0, 16.0], [19712.0, 16.0], [19752.0, 16.0], [19023.0, 16.0], [19287.0, 17.0], [18999.0, 17.0], [19079.0, 17.0], [19063.0, 17.0], [19367.0, 16.0], [19343.0, 16.0], [18943.0, 17.0], [19943.0, 16.0], [19927.0, 16.0], [19879.0, 16.0], [19919.0, 16.0], [19831.0, 16.0], [19863.0, 16.0], [19967.0, 16.0], [19471.0, 16.0], [20263.0, 16.0], [19999.0, 16.0], [20127.0, 16.0], [19735.0, 16.0], [19775.0, 16.0], [19743.0, 16.0], [19823.0, 16.0], [19783.0, 16.0], [19358.0, 16.0], [19070.0, 17.0], [19246.0, 17.0], [19406.0, 16.0], [18854.0, 17.0], [19230.0, 17.0], [19366.0, 17.0], [19382.0, 16.0], [19254.0, 17.0], [19278.0, 17.0], [19030.0, 17.0], [19878.0, 16.0], [19886.0, 16.0], [19990.0, 16.0], [20014.0, 16.0], [19822.0, 16.0], [19830.0, 16.0], [19838.0, 16.0], [19854.0, 16.0], [20126.0, 16.0], [20038.0, 16.0], [20062.0, 16.0], [20110.0, 16.0], [19622.0, 16.0], [19926.0, 16.0], [19934.0, 16.0], [19486.0, 16.0], [19918.0, 16.0], [19902.0, 16.0], [19894.0, 16.0], [20182.0, 16.0], [19782.0, 16.0], [19734.0, 16.0], [19766.0, 16.0], [19750.0, 16.0], [19726.0, 16.0], [19341.0, 16.0], [19445.0, 16.0], [19389.0, 16.0], [18893.0, 17.0], [19261.0, 17.0], [19205.0, 17.0], [19141.0, 17.0], [19221.0, 17.0], [18885.0, 17.0], [19189.0, 17.0], [19181.0, 17.0], [19909.0, 16.0], [19885.0, 16.0], [20173.0, 16.0], [20149.0, 16.0], [19829.0, 16.0], [19893.0, 16.0], [19917.0, 16.0], [19957.0, 16.0], [19621.0, 16.0], [19653.0, 16.0], [20061.0, 16.0], [20101.0, 16.0], [19989.0, 16.0], [20261.0, 16.0], [19725.0, 16.0], [19717.0, 16.0], [19741.0, 16.0], [19813.0, 16.0], [19821.0, 16.0], [19797.0, 16.0], [19781.0, 16.0], [8159.0, 15.0], [17596.0, 16.0], [18956.0, 17.0], [19124.0, 17.0], [19284.0, 17.0], [18892.0, 17.0], [19180.0, 17.0], [19116.0, 17.0], [19036.0, 17.0], [19420.0, 16.0], [19348.0, 17.0], [19212.0, 17.0], [19884.0, 16.0], [19868.0, 16.0], [19820.0, 16.0], [19804.0, 16.0], [19812.0, 16.0], [19828.0, 16.0], [19876.0, 16.0], [19836.0, 16.0], [19852.0, 16.0], [19860.0, 16.0], [20028.0, 16.0], [19972.0, 16.0], [20004.0, 16.0], [20052.0, 16.0], [20100.0, 16.0], [20108.0, 16.0], [20148.0, 16.0], [19692.0, 16.0], [19540.0, 16.0], [19956.0, 16.0], [19652.0, 16.0], [19916.0, 16.0], [19732.0, 16.0], [19764.0, 16.0], [19772.0, 16.0], [19780.0, 16.0], [19796.0, 16.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 20274.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7737.55, "minX": 1.64976828E12, "maxY": 19875.116666666665, "series": [{"data": [[1.64976852E12, 19280.916666666668], [1.64976834E12, 19790.866666666665], [1.64976828E12, 7737.55], [1.64976846E12, 19875.116666666665], [1.6497684E12, 19836.5], [1.64976858E12, 11588.583333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64976858E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 7729.233333333334, "minX": 1.64976828E12, "maxY": 19875.116666666665, "series": [{"data": [[1.64976852E12, 19280.883333333335], [1.64976834E12, 19790.866666666665], [1.64976828E12, 7729.233333333334], [1.64976846E12, 19875.116666666665], [1.6497684E12, 19836.516666666666], [1.64976858E12, 11596.916666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64976858E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3853.733333333333, "minX": 1.64976828E12, "maxY": 9946.05, "series": [{"data": [[1.64976852E12, 9638.6], [1.64976834E12, 9889.766666666666], [1.64976828E12, 3853.733333333333], [1.64976846E12, 9929.066666666668], [1.6497684E12, 9928.566666666668], [1.64976858E12, 5807.65]], "isOverall": false, "label": "Get Employee 2-success", "isController": false}, {"data": [[1.64976852E12, 9642.283333333333], [1.64976834E12, 9901.1], [1.64976828E12, 3875.5], [1.64976846E12, 9946.05], [1.6497684E12, 9907.95], [1.64976858E12, 5789.266666666666]], "isOverall": false, "label": "Get Employee 1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64976858E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7729.233333333334, "minX": 1.64976828E12, "maxY": 19875.116666666665, "series": [{"data": [[1.64976852E12, 19280.883333333335], [1.64976834E12, 19790.866666666665], [1.64976828E12, 7729.233333333334], [1.64976846E12, 19875.116666666665], [1.6497684E12, 19836.516666666666], [1.64976858E12, 11596.916666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64976858E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

