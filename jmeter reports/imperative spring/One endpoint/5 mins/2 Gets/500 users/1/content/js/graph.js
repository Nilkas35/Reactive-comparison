/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 819.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 2.0], [0.6, 8.0], [0.7, 11.0], [0.8, 14.0], [0.9, 19.0], [1.0, 21.0], [1.1, 24.0], [1.2, 26.0], [1.3, 28.0], [1.4, 29.0], [1.5, 30.0], [1.6, 31.0], [1.7, 32.0], [1.8, 33.0], [1.9, 33.0], [2.0, 34.0], [2.1, 35.0], [2.2, 35.0], [2.3, 36.0], [2.4, 37.0], [2.5, 37.0], [2.6, 38.0], [2.7, 38.0], [2.8, 39.0], [2.9, 39.0], [3.0, 39.0], [3.1, 39.0], [3.2, 40.0], [3.3, 40.0], [3.4, 40.0], [3.5, 40.0], [3.6, 40.0], [3.7, 40.0], [3.8, 40.0], [3.9, 40.0], [4.0, 40.0], [4.1, 40.0], [4.2, 40.0], [4.3, 40.0], [4.4, 40.0], [4.5, 40.0], [4.6, 40.0], [4.7, 40.0], [4.8, 40.0], [4.9, 40.0], [5.0, 40.0], [5.1, 40.0], [5.2, 40.0], [5.3, 40.0], [5.4, 40.0], [5.5, 40.0], [5.6, 40.0], [5.7, 40.0], [5.8, 40.0], [5.9, 40.0], [6.0, 40.0], [6.1, 40.0], [6.2, 40.0], [6.3, 40.0], [6.4, 40.0], [6.5, 40.0], [6.6, 40.0], [6.7, 40.0], [6.8, 40.0], [6.9, 40.0], [7.0, 40.0], [7.1, 40.0], [7.2, 40.0], [7.3, 40.0], [7.4, 40.0], [7.5, 40.0], [7.6, 40.0], [7.7, 40.0], [7.8, 40.0], [7.9, 41.0], [8.0, 41.0], [8.1, 41.0], [8.2, 41.0], [8.3, 41.0], [8.4, 41.0], [8.5, 41.0], [8.6, 41.0], [8.7, 41.0], [8.8, 41.0], [8.9, 41.0], [9.0, 41.0], [9.1, 41.0], [9.2, 41.0], [9.3, 41.0], [9.4, 41.0], [9.5, 41.0], [9.6, 41.0], [9.7, 41.0], [9.8, 41.0], [9.9, 41.0], [10.0, 41.0], [10.1, 41.0], [10.2, 41.0], [10.3, 41.0], [10.4, 41.0], [10.5, 41.0], [10.6, 41.0], [10.7, 41.0], [10.8, 41.0], [10.9, 41.0], [11.0, 41.0], [11.1, 41.0], [11.2, 41.0], [11.3, 41.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 41.0], [11.8, 41.0], [11.9, 41.0], [12.0, 41.0], [12.1, 41.0], [12.2, 41.0], [12.3, 41.0], [12.4, 41.0], [12.5, 41.0], [12.6, 41.0], [12.7, 41.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 41.0], [16.8, 41.0], [16.9, 41.0], [17.0, 41.0], [17.1, 41.0], [17.2, 41.0], [17.3, 41.0], [17.4, 41.0], [17.5, 41.0], [17.6, 41.0], [17.7, 41.0], [17.8, 41.0], [17.9, 41.0], [18.0, 41.0], [18.1, 41.0], [18.2, 41.0], [18.3, 41.0], [18.4, 41.0], [18.5, 41.0], [18.6, 41.0], [18.7, 41.0], [18.8, 41.0], [18.9, 41.0], [19.0, 41.0], [19.1, 41.0], [19.2, 41.0], [19.3, 41.0], [19.4, 41.0], [19.5, 41.0], [19.6, 41.0], [19.7, 41.0], [19.8, 41.0], [19.9, 41.0], [20.0, 41.0], [20.1, 41.0], [20.2, 41.0], [20.3, 41.0], [20.4, 41.0], [20.5, 41.0], [20.6, 41.0], [20.7, 41.0], [20.8, 41.0], [20.9, 41.0], [21.0, 41.0], [21.1, 41.0], [21.2, 41.0], [21.3, 41.0], [21.4, 41.0], [21.5, 41.0], [21.6, 41.0], [21.7, 41.0], [21.8, 41.0], [21.9, 41.0], [22.0, 41.0], [22.1, 41.0], [22.2, 41.0], [22.3, 41.0], [22.4, 41.0], [22.5, 41.0], [22.6, 41.0], [22.7, 41.0], [22.8, 41.0], [22.9, 41.0], [23.0, 41.0], [23.1, 41.0], [23.2, 41.0], [23.3, 41.0], [23.4, 41.0], [23.5, 41.0], [23.6, 41.0], [23.7, 41.0], [23.8, 41.0], [23.9, 41.0], [24.0, 41.0], [24.1, 41.0], [24.2, 41.0], [24.3, 41.0], [24.4, 41.0], [24.5, 41.0], [24.6, 41.0], [24.7, 41.0], [24.8, 42.0], [24.9, 42.0], [25.0, 42.0], [25.1, 42.0], [25.2, 42.0], [25.3, 42.0], [25.4, 42.0], [25.5, 42.0], [25.6, 42.0], [25.7, 42.0], [25.8, 42.0], [25.9, 42.0], [26.0, 42.0], [26.1, 42.0], [26.2, 42.0], [26.3, 42.0], [26.4, 42.0], [26.5, 42.0], [26.6, 42.0], [26.7, 42.0], [26.8, 42.0], [26.9, 42.0], [27.0, 42.0], [27.1, 42.0], [27.2, 42.0], [27.3, 42.0], [27.4, 42.0], [27.5, 42.0], [27.6, 42.0], [27.7, 42.0], [27.8, 42.0], [27.9, 42.0], [28.0, 42.0], [28.1, 42.0], [28.2, 42.0], [28.3, 42.0], [28.4, 42.0], [28.5, 42.0], [28.6, 42.0], [28.7, 42.0], [28.8, 42.0], [28.9, 42.0], [29.0, 42.0], [29.1, 42.0], [29.2, 42.0], [29.3, 42.0], [29.4, 42.0], [29.5, 42.0], [29.6, 42.0], [29.7, 42.0], [29.8, 42.0], [29.9, 42.0], [30.0, 42.0], [30.1, 42.0], [30.2, 42.0], [30.3, 42.0], [30.4, 42.0], [30.5, 42.0], [30.6, 42.0], [30.7, 42.0], [30.8, 42.0], [30.9, 42.0], [31.0, 42.0], [31.1, 42.0], [31.2, 42.0], [31.3, 42.0], [31.4, 42.0], [31.5, 42.0], [31.6, 42.0], [31.7, 42.0], [31.8, 42.0], [31.9, 42.0], [32.0, 42.0], [32.1, 42.0], [32.2, 42.0], [32.3, 42.0], [32.4, 42.0], [32.5, 42.0], [32.6, 42.0], [32.7, 42.0], [32.8, 42.0], [32.9, 42.0], [33.0, 42.0], [33.1, 42.0], [33.2, 42.0], [33.3, 42.0], [33.4, 42.0], [33.5, 42.0], [33.6, 42.0], [33.7, 42.0], [33.8, 42.0], [33.9, 42.0], [34.0, 42.0], [34.1, 42.0], [34.2, 42.0], [34.3, 42.0], [34.4, 42.0], [34.5, 42.0], [34.6, 42.0], [34.7, 42.0], [34.8, 42.0], [34.9, 42.0], [35.0, 42.0], [35.1, 42.0], [35.2, 42.0], [35.3, 42.0], [35.4, 42.0], [35.5, 42.0], [35.6, 42.0], [35.7, 42.0], [35.8, 42.0], [35.9, 42.0], [36.0, 42.0], [36.1, 42.0], [36.2, 42.0], [36.3, 42.0], [36.4, 42.0], [36.5, 42.0], [36.6, 42.0], [36.7, 42.0], [36.8, 42.0], [36.9, 42.0], [37.0, 42.0], [37.1, 42.0], [37.2, 42.0], [37.3, 42.0], [37.4, 42.0], [37.5, 42.0], [37.6, 42.0], [37.7, 42.0], [37.8, 42.0], [37.9, 42.0], [38.0, 42.0], [38.1, 42.0], [38.2, 42.0], [38.3, 42.0], [38.4, 42.0], [38.5, 42.0], [38.6, 42.0], [38.7, 42.0], [38.8, 42.0], [38.9, 42.0], [39.0, 42.0], [39.1, 42.0], [39.2, 42.0], [39.3, 42.0], [39.4, 42.0], [39.5, 42.0], [39.6, 42.0], [39.7, 42.0], [39.8, 42.0], [39.9, 42.0], [40.0, 42.0], [40.1, 42.0], [40.2, 42.0], [40.3, 42.0], [40.4, 42.0], [40.5, 42.0], [40.6, 42.0], [40.7, 42.0], [40.8, 42.0], [40.9, 42.0], [41.0, 42.0], [41.1, 42.0], [41.2, 42.0], [41.3, 42.0], [41.4, 42.0], [41.5, 42.0], [41.6, 42.0], [41.7, 42.0], [41.8, 42.0], [41.9, 42.0], [42.0, 42.0], [42.1, 42.0], [42.2, 42.0], [42.3, 42.0], [42.4, 43.0], [42.5, 43.0], [42.6, 43.0], [42.7, 43.0], [42.8, 43.0], [42.9, 43.0], [43.0, 43.0], [43.1, 43.0], [43.2, 43.0], [43.3, 43.0], [43.4, 43.0], [43.5, 43.0], [43.6, 43.0], [43.7, 43.0], [43.8, 43.0], [43.9, 43.0], [44.0, 43.0], [44.1, 43.0], [44.2, 43.0], [44.3, 43.0], [44.4, 43.0], [44.5, 43.0], [44.6, 43.0], [44.7, 43.0], [44.8, 43.0], [44.9, 43.0], [45.0, 43.0], [45.1, 43.0], [45.2, 43.0], [45.3, 43.0], [45.4, 43.0], [45.5, 43.0], [45.6, 43.0], [45.7, 43.0], [45.8, 43.0], [45.9, 43.0], [46.0, 43.0], [46.1, 43.0], [46.2, 43.0], [46.3, 43.0], [46.4, 43.0], [46.5, 43.0], [46.6, 43.0], [46.7, 43.0], [46.8, 43.0], [46.9, 43.0], [47.0, 43.0], [47.1, 43.0], [47.2, 43.0], [47.3, 43.0], [47.4, 43.0], [47.5, 43.0], [47.6, 43.0], [47.7, 43.0], [47.8, 43.0], [47.9, 43.0], [48.0, 43.0], [48.1, 43.0], [48.2, 43.0], [48.3, 43.0], [48.4, 43.0], [48.5, 43.0], [48.6, 43.0], [48.7, 43.0], [48.8, 43.0], [48.9, 43.0], [49.0, 43.0], [49.1, 43.0], [49.2, 43.0], [49.3, 43.0], [49.4, 43.0], [49.5, 43.0], [49.6, 43.0], [49.7, 43.0], [49.8, 43.0], [49.9, 43.0], [50.0, 43.0], [50.1, 43.0], [50.2, 43.0], [50.3, 43.0], [50.4, 43.0], [50.5, 43.0], [50.6, 43.0], [50.7, 43.0], [50.8, 43.0], [50.9, 43.0], [51.0, 43.0], [51.1, 43.0], [51.2, 43.0], [51.3, 43.0], [51.4, 43.0], [51.5, 43.0], [51.6, 43.0], [51.7, 43.0], [51.8, 43.0], [51.9, 43.0], [52.0, 43.0], [52.1, 43.0], [52.2, 43.0], [52.3, 43.0], [52.4, 43.0], [52.5, 43.0], [52.6, 43.0], [52.7, 43.0], [52.8, 43.0], [52.9, 43.0], [53.0, 43.0], [53.1, 43.0], [53.2, 43.0], [53.3, 43.0], [53.4, 43.0], [53.5, 43.0], [53.6, 43.0], [53.7, 44.0], [53.8, 44.0], [53.9, 44.0], [54.0, 44.0], [54.1, 44.0], [54.2, 44.0], [54.3, 44.0], [54.4, 44.0], [54.5, 44.0], [54.6, 44.0], [54.7, 44.0], [54.8, 44.0], [54.9, 44.0], [55.0, 44.0], [55.1, 44.0], [55.2, 44.0], [55.3, 44.0], [55.4, 44.0], [55.5, 44.0], [55.6, 44.0], [55.7, 44.0], [55.8, 44.0], [55.9, 44.0], [56.0, 44.0], [56.1, 44.0], [56.2, 44.0], [56.3, 44.0], [56.4, 44.0], [56.5, 44.0], [56.6, 44.0], [56.7, 44.0], [56.8, 44.0], [56.9, 44.0], [57.0, 44.0], [57.1, 44.0], [57.2, 44.0], [57.3, 44.0], [57.4, 44.0], [57.5, 44.0], [57.6, 44.0], [57.7, 44.0], [57.8, 44.0], [57.9, 44.0], [58.0, 44.0], [58.1, 44.0], [58.2, 44.0], [58.3, 44.0], [58.4, 44.0], [58.5, 44.0], [58.6, 44.0], [58.7, 44.0], [58.8, 44.0], [58.9, 44.0], [59.0, 44.0], [59.1, 44.0], [59.2, 45.0], [59.3, 45.0], [59.4, 45.0], [59.5, 45.0], [59.6, 45.0], [59.7, 45.0], [59.8, 45.0], [59.9, 45.0], [60.0, 45.0], [60.1, 45.0], [60.2, 45.0], [60.3, 45.0], [60.4, 45.0], [60.5, 45.0], [60.6, 45.0], [60.7, 45.0], [60.8, 45.0], [60.9, 45.0], [61.0, 45.0], [61.1, 45.0], [61.2, 45.0], [61.3, 45.0], [61.4, 45.0], [61.5, 45.0], [61.6, 46.0], [61.7, 46.0], [61.8, 46.0], [61.9, 46.0], [62.0, 46.0], [62.1, 46.0], [62.2, 46.0], [62.3, 46.0], [62.4, 46.0], [62.5, 46.0], [62.6, 47.0], [62.7, 47.0], [62.8, 47.0], [62.9, 47.0], [63.0, 47.0], [63.1, 48.0], [63.2, 48.0], [63.3, 48.0], [63.4, 48.0], [63.5, 49.0], [63.6, 49.0], [63.7, 49.0], [63.8, 49.0], [63.9, 49.0], [64.0, 49.0], [64.1, 49.0], [64.2, 50.0], [64.3, 50.0], [64.4, 50.0], [64.5, 50.0], [64.6, 50.0], [64.7, 50.0], [64.8, 50.0], [64.9, 50.0], [65.0, 50.0], [65.1, 50.0], [65.2, 50.0], [65.3, 50.0], [65.4, 50.0], [65.5, 50.0], [65.6, 50.0], [65.7, 50.0], [65.8, 50.0], [65.9, 50.0], [66.0, 50.0], [66.1, 50.0], [66.2, 50.0], [66.3, 50.0], [66.4, 51.0], [66.5, 51.0], [66.6, 51.0], [66.7, 51.0], [66.8, 51.0], [66.9, 51.0], [67.0, 51.0], [67.1, 51.0], [67.2, 51.0], [67.3, 51.0], [67.4, 51.0], [67.5, 51.0], [67.6, 51.0], [67.7, 51.0], [67.8, 51.0], [67.9, 51.0], [68.0, 51.0], [68.1, 51.0], [68.2, 51.0], [68.3, 51.0], [68.4, 51.0], [68.5, 51.0], [68.6, 51.0], [68.7, 51.0], [68.8, 51.0], [68.9, 51.0], [69.0, 51.0], [69.1, 51.0], [69.2, 51.0], [69.3, 52.0], [69.4, 52.0], [69.5, 52.0], [69.6, 52.0], [69.7, 52.0], [69.8, 52.0], [69.9, 52.0], [70.0, 52.0], [70.1, 52.0], [70.2, 52.0], [70.3, 52.0], [70.4, 52.0], [70.5, 52.0], [70.6, 52.0], [70.7, 52.0], [70.8, 52.0], [70.9, 52.0], [71.0, 52.0], [71.1, 52.0], [71.2, 52.0], [71.3, 52.0], [71.4, 52.0], [71.5, 52.0], [71.6, 52.0], [71.7, 52.0], [71.8, 53.0], [71.9, 53.0], [72.0, 53.0], [72.1, 53.0], [72.2, 53.0], [72.3, 53.0], [72.4, 53.0], [72.5, 53.0], [72.6, 53.0], [72.7, 53.0], [72.8, 53.0], [72.9, 53.0], [73.0, 53.0], [73.1, 53.0], [73.2, 53.0], [73.3, 53.0], [73.4, 53.0], [73.5, 54.0], [73.6, 54.0], [73.7, 54.0], [73.8, 54.0], [73.9, 54.0], [74.0, 54.0], [74.1, 54.0], [74.2, 54.0], [74.3, 54.0], [74.4, 55.0], [74.5, 55.0], [74.6, 55.0], [74.7, 55.0], [74.8, 55.0], [74.9, 56.0], [75.0, 56.0], [75.1, 56.0], [75.2, 57.0], [75.3, 57.0], [75.4, 58.0], [75.5, 58.0], [75.6, 58.0], [75.7, 59.0], [75.8, 59.0], [75.9, 59.0], [76.0, 59.0], [76.1, 59.0], [76.2, 59.0], [76.3, 59.0], [76.4, 59.0], [76.5, 59.0], [76.6, 59.0], [76.7, 60.0], [76.8, 60.0], [76.9, 60.0], [77.0, 60.0], [77.1, 60.0], [77.2, 60.0], [77.3, 60.0], [77.4, 60.0], [77.5, 60.0], [77.6, 60.0], [77.7, 60.0], [77.8, 60.0], [77.9, 60.0], [78.0, 60.0], [78.1, 60.0], [78.2, 60.0], [78.3, 61.0], [78.4, 61.0], [78.5, 61.0], [78.6, 61.0], [78.7, 61.0], [78.8, 61.0], [78.9, 61.0], [79.0, 61.0], [79.1, 61.0], [79.2, 61.0], [79.3, 61.0], [79.4, 61.0], [79.5, 61.0], [79.6, 61.0], [79.7, 61.0], [79.8, 61.0], [79.9, 61.0], [80.0, 61.0], [80.1, 62.0], [80.2, 62.0], [80.3, 62.0], [80.4, 62.0], [80.5, 62.0], [80.6, 62.0], [80.7, 62.0], [80.8, 62.0], [80.9, 62.0], [81.0, 62.0], [81.1, 62.0], [81.2, 62.0], [81.3, 62.0], [81.4, 62.0], [81.5, 63.0], [81.6, 63.0], [81.7, 63.0], [81.8, 63.0], [81.9, 63.0], [82.0, 63.0], [82.1, 63.0], [82.2, 63.0], [82.3, 63.0], [82.4, 63.0], [82.5, 64.0], [82.6, 64.0], [82.7, 64.0], [82.8, 64.0], [82.9, 64.0], [83.0, 64.0], [83.1, 65.0], [83.2, 65.0], [83.3, 65.0], [83.4, 65.0], [83.5, 66.0], [83.6, 66.0], [83.7, 67.0], [83.8, 67.0], [83.9, 68.0], [84.0, 68.0], [84.1, 68.0], [84.2, 68.0], [84.3, 69.0], [84.4, 69.0], [84.5, 69.0], [84.6, 69.0], [84.7, 69.0], [84.8, 69.0], [84.9, 69.0], [85.0, 69.0], [85.1, 70.0], [85.2, 70.0], [85.3, 70.0], [85.4, 70.0], [85.5, 70.0], [85.6, 70.0], [85.7, 70.0], [85.8, 70.0], [85.9, 70.0], [86.0, 70.0], [86.1, 71.0], [86.2, 71.0], [86.3, 71.0], [86.4, 71.0], [86.5, 71.0], [86.6, 71.0], [86.7, 71.0], [86.8, 71.0], [86.9, 71.0], [87.0, 71.0], [87.1, 72.0], [87.2, 72.0], [87.3, 72.0], [87.4, 72.0], [87.5, 72.0], [87.6, 72.0], [87.7, 72.0], [87.8, 72.0], [87.9, 72.0], [88.0, 73.0], [88.1, 73.0], [88.2, 73.0], [88.3, 73.0], [88.4, 73.0], [88.5, 74.0], [88.6, 74.0], [88.7, 74.0], [88.8, 74.0], [88.9, 75.0], [89.0, 75.0], [89.1, 76.0], [89.2, 76.0], [89.3, 77.0], [89.4, 77.0], [89.5, 78.0], [89.6, 78.0], [89.7, 78.0], [89.8, 78.0], [89.9, 79.0], [90.0, 79.0], [90.1, 79.0], [90.2, 79.0], [90.3, 79.0], [90.4, 79.0], [90.5, 80.0], [90.6, 80.0], [90.7, 80.0], [90.8, 80.0], [90.9, 80.0], [91.0, 80.0], [91.1, 81.0], [91.2, 81.0], [91.3, 81.0], [91.4, 81.0], [91.5, 81.0], [91.6, 81.0], [91.7, 82.0], [91.8, 82.0], [91.9, 82.0], [92.0, 82.0], [92.1, 83.0], [92.2, 83.0], [92.3, 83.0], [92.4, 83.0], [92.5, 84.0], [92.6, 84.0], [92.7, 85.0], [92.8, 86.0], [92.9, 86.0], [93.0, 87.0], [93.1, 87.0], [93.2, 88.0], [93.3, 88.0], [93.4, 88.0], [93.5, 89.0], [93.6, 89.0], [93.7, 89.0], [93.8, 90.0], [93.9, 90.0], [94.0, 90.0], [94.1, 90.0], [94.2, 91.0], [94.3, 91.0], [94.4, 91.0], [94.5, 92.0], [94.6, 92.0], [94.7, 92.0], [94.8, 93.0], [94.9, 93.0], [95.0, 94.0], [95.1, 95.0], [95.2, 96.0], [95.3, 97.0], [95.4, 97.0], [95.5, 98.0], [95.6, 98.0], [95.7, 99.0], [95.8, 99.0], [95.9, 99.0], [96.0, 100.0], [96.1, 100.0], [96.2, 101.0], [96.3, 101.0], [96.4, 102.0], [96.5, 103.0], [96.6, 103.0], [96.7, 104.0], [96.8, 106.0], [96.9, 107.0], [97.0, 107.0], [97.1, 108.0], [97.2, 109.0], [97.3, 110.0], [97.4, 110.0], [97.5, 111.0], [97.6, 112.0], [97.7, 113.0], [97.8, 115.0], [97.9, 116.0], [98.0, 117.0], [98.1, 119.0], [98.2, 120.0], [98.3, 121.0], [98.4, 123.0], [98.5, 125.0], [98.6, 127.0], [98.7, 128.0], [98.8, 130.0], [98.9, 133.0], [99.0, 135.0], [99.1, 138.0], [99.2, 141.0], [99.3, 145.0], [99.4, 149.0], [99.5, 155.0], [99.6, 161.0], [99.7, 171.0], [99.8, 186.0], [99.9, 223.0]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 2.0], [0.6, 7.0], [0.7, 11.0], [0.8, 14.0], [0.9, 19.0], [1.0, 21.0], [1.1, 24.0], [1.2, 26.0], [1.3, 28.0], [1.4, 29.0], [1.5, 30.0], [1.6, 31.0], [1.7, 32.0], [1.8, 33.0], [1.9, 34.0], [2.0, 34.0], [2.1, 35.0], [2.2, 35.0], [2.3, 36.0], [2.4, 37.0], [2.5, 37.0], [2.6, 38.0], [2.7, 38.0], [2.8, 39.0], [2.9, 39.0], [3.0, 39.0], [3.1, 39.0], [3.2, 40.0], [3.3, 40.0], [3.4, 40.0], [3.5, 40.0], [3.6, 40.0], [3.7, 40.0], [3.8, 40.0], [3.9, 40.0], [4.0, 40.0], [4.1, 40.0], [4.2, 40.0], [4.3, 40.0], [4.4, 40.0], [4.5, 40.0], [4.6, 40.0], [4.7, 40.0], [4.8, 40.0], [4.9, 40.0], [5.0, 40.0], [5.1, 40.0], [5.2, 40.0], [5.3, 40.0], [5.4, 40.0], [5.5, 40.0], [5.6, 40.0], [5.7, 40.0], [5.8, 40.0], [5.9, 40.0], [6.0, 40.0], [6.1, 40.0], [6.2, 40.0], [6.3, 40.0], [6.4, 40.0], [6.5, 40.0], [6.6, 40.0], [6.7, 40.0], [6.8, 40.0], [6.9, 40.0], [7.0, 40.0], [7.1, 40.0], [7.2, 40.0], [7.3, 40.0], [7.4, 40.0], [7.5, 40.0], [7.6, 40.0], [7.7, 40.0], [7.8, 40.0], [7.9, 41.0], [8.0, 41.0], [8.1, 41.0], [8.2, 41.0], [8.3, 41.0], [8.4, 41.0], [8.5, 41.0], [8.6, 41.0], [8.7, 41.0], [8.8, 41.0], [8.9, 41.0], [9.0, 41.0], [9.1, 41.0], [9.2, 41.0], [9.3, 41.0], [9.4, 41.0], [9.5, 41.0], [9.6, 41.0], [9.7, 41.0], [9.8, 41.0], [9.9, 41.0], [10.0, 41.0], [10.1, 41.0], [10.2, 41.0], [10.3, 41.0], [10.4, 41.0], [10.5, 41.0], [10.6, 41.0], [10.7, 41.0], [10.8, 41.0], [10.9, 41.0], [11.0, 41.0], [11.1, 41.0], [11.2, 41.0], [11.3, 41.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 41.0], [11.8, 41.0], [11.9, 41.0], [12.0, 41.0], [12.1, 41.0], [12.2, 41.0], [12.3, 41.0], [12.4, 41.0], [12.5, 41.0], [12.6, 41.0], [12.7, 41.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 41.0], [16.8, 41.0], [16.9, 41.0], [17.0, 41.0], [17.1, 41.0], [17.2, 41.0], [17.3, 41.0], [17.4, 41.0], [17.5, 41.0], [17.6, 41.0], [17.7, 41.0], [17.8, 41.0], [17.9, 41.0], [18.0, 41.0], [18.1, 41.0], [18.2, 41.0], [18.3, 41.0], [18.4, 41.0], [18.5, 41.0], [18.6, 41.0], [18.7, 41.0], [18.8, 41.0], [18.9, 41.0], [19.0, 41.0], [19.1, 41.0], [19.2, 41.0], [19.3, 41.0], [19.4, 41.0], [19.5, 41.0], [19.6, 41.0], [19.7, 41.0], [19.8, 41.0], [19.9, 41.0], [20.0, 41.0], [20.1, 41.0], [20.2, 41.0], [20.3, 41.0], [20.4, 41.0], [20.5, 41.0], [20.6, 41.0], [20.7, 41.0], [20.8, 41.0], [20.9, 41.0], [21.0, 41.0], [21.1, 41.0], [21.2, 41.0], [21.3, 41.0], [21.4, 41.0], [21.5, 41.0], [21.6, 41.0], [21.7, 41.0], [21.8, 41.0], [21.9, 41.0], [22.0, 41.0], [22.1, 41.0], [22.2, 41.0], [22.3, 41.0], [22.4, 41.0], [22.5, 41.0], [22.6, 41.0], [22.7, 41.0], [22.8, 41.0], [22.9, 41.0], [23.0, 41.0], [23.1, 41.0], [23.2, 41.0], [23.3, 41.0], [23.4, 41.0], [23.5, 41.0], [23.6, 41.0], [23.7, 41.0], [23.8, 41.0], [23.9, 41.0], [24.0, 41.0], [24.1, 41.0], [24.2, 41.0], [24.3, 41.0], [24.4, 41.0], [24.5, 41.0], [24.6, 41.0], [24.7, 41.0], [24.8, 42.0], [24.9, 42.0], [25.0, 42.0], [25.1, 42.0], [25.2, 42.0], [25.3, 42.0], [25.4, 42.0], [25.5, 42.0], [25.6, 42.0], [25.7, 42.0], [25.8, 42.0], [25.9, 42.0], [26.0, 42.0], [26.1, 42.0], [26.2, 42.0], [26.3, 42.0], [26.4, 42.0], [26.5, 42.0], [26.6, 42.0], [26.7, 42.0], [26.8, 42.0], [26.9, 42.0], [27.0, 42.0], [27.1, 42.0], [27.2, 42.0], [27.3, 42.0], [27.4, 42.0], [27.5, 42.0], [27.6, 42.0], [27.7, 42.0], [27.8, 42.0], [27.9, 42.0], [28.0, 42.0], [28.1, 42.0], [28.2, 42.0], [28.3, 42.0], [28.4, 42.0], [28.5, 42.0], [28.6, 42.0], [28.7, 42.0], [28.8, 42.0], [28.9, 42.0], [29.0, 42.0], [29.1, 42.0], [29.2, 42.0], [29.3, 42.0], [29.4, 42.0], [29.5, 42.0], [29.6, 42.0], [29.7, 42.0], [29.8, 42.0], [29.9, 42.0], [30.0, 42.0], [30.1, 42.0], [30.2, 42.0], [30.3, 42.0], [30.4, 42.0], [30.5, 42.0], [30.6, 42.0], [30.7, 42.0], [30.8, 42.0], [30.9, 42.0], [31.0, 42.0], [31.1, 42.0], [31.2, 42.0], [31.3, 42.0], [31.4, 42.0], [31.5, 42.0], [31.6, 42.0], [31.7, 42.0], [31.8, 42.0], [31.9, 42.0], [32.0, 42.0], [32.1, 42.0], [32.2, 42.0], [32.3, 42.0], [32.4, 42.0], [32.5, 42.0], [32.6, 42.0], [32.7, 42.0], [32.8, 42.0], [32.9, 42.0], [33.0, 42.0], [33.1, 42.0], [33.2, 42.0], [33.3, 42.0], [33.4, 42.0], [33.5, 42.0], [33.6, 42.0], [33.7, 42.0], [33.8, 42.0], [33.9, 42.0], [34.0, 42.0], [34.1, 42.0], [34.2, 42.0], [34.3, 42.0], [34.4, 42.0], [34.5, 42.0], [34.6, 42.0], [34.7, 42.0], [34.8, 42.0], [34.9, 42.0], [35.0, 42.0], [35.1, 42.0], [35.2, 42.0], [35.3, 42.0], [35.4, 42.0], [35.5, 42.0], [35.6, 42.0], [35.7, 42.0], [35.8, 42.0], [35.9, 42.0], [36.0, 42.0], [36.1, 42.0], [36.2, 42.0], [36.3, 42.0], [36.4, 42.0], [36.5, 42.0], [36.6, 42.0], [36.7, 42.0], [36.8, 42.0], [36.9, 42.0], [37.0, 42.0], [37.1, 42.0], [37.2, 42.0], [37.3, 42.0], [37.4, 42.0], [37.5, 42.0], [37.6, 42.0], [37.7, 42.0], [37.8, 42.0], [37.9, 42.0], [38.0, 42.0], [38.1, 42.0], [38.2, 42.0], [38.3, 42.0], [38.4, 42.0], [38.5, 42.0], [38.6, 42.0], [38.7, 42.0], [38.8, 42.0], [38.9, 42.0], [39.0, 42.0], [39.1, 42.0], [39.2, 42.0], [39.3, 42.0], [39.4, 42.0], [39.5, 42.0], [39.6, 42.0], [39.7, 42.0], [39.8, 42.0], [39.9, 42.0], [40.0, 42.0], [40.1, 42.0], [40.2, 42.0], [40.3, 42.0], [40.4, 42.0], [40.5, 42.0], [40.6, 42.0], [40.7, 42.0], [40.8, 42.0], [40.9, 42.0], [41.0, 42.0], [41.1, 42.0], [41.2, 42.0], [41.3, 42.0], [41.4, 42.0], [41.5, 42.0], [41.6, 42.0], [41.7, 42.0], [41.8, 42.0], [41.9, 42.0], [42.0, 42.0], [42.1, 42.0], [42.2, 42.0], [42.3, 42.0], [42.4, 43.0], [42.5, 43.0], [42.6, 43.0], [42.7, 43.0], [42.8, 43.0], [42.9, 43.0], [43.0, 43.0], [43.1, 43.0], [43.2, 43.0], [43.3, 43.0], [43.4, 43.0], [43.5, 43.0], [43.6, 43.0], [43.7, 43.0], [43.8, 43.0], [43.9, 43.0], [44.0, 43.0], [44.1, 43.0], [44.2, 43.0], [44.3, 43.0], [44.4, 43.0], [44.5, 43.0], [44.6, 43.0], [44.7, 43.0], [44.8, 43.0], [44.9, 43.0], [45.0, 43.0], [45.1, 43.0], [45.2, 43.0], [45.3, 43.0], [45.4, 43.0], [45.5, 43.0], [45.6, 43.0], [45.7, 43.0], [45.8, 43.0], [45.9, 43.0], [46.0, 43.0], [46.1, 43.0], [46.2, 43.0], [46.3, 43.0], [46.4, 43.0], [46.5, 43.0], [46.6, 43.0], [46.7, 43.0], [46.8, 43.0], [46.9, 43.0], [47.0, 43.0], [47.1, 43.0], [47.2, 43.0], [47.3, 43.0], [47.4, 43.0], [47.5, 43.0], [47.6, 43.0], [47.7, 43.0], [47.8, 43.0], [47.9, 43.0], [48.0, 43.0], [48.1, 43.0], [48.2, 43.0], [48.3, 43.0], [48.4, 43.0], [48.5, 43.0], [48.6, 43.0], [48.7, 43.0], [48.8, 43.0], [48.9, 43.0], [49.0, 43.0], [49.1, 43.0], [49.2, 43.0], [49.3, 43.0], [49.4, 43.0], [49.5, 43.0], [49.6, 43.0], [49.7, 43.0], [49.8, 43.0], [49.9, 43.0], [50.0, 43.0], [50.1, 43.0], [50.2, 43.0], [50.3, 43.0], [50.4, 43.0], [50.5, 43.0], [50.6, 43.0], [50.7, 43.0], [50.8, 43.0], [50.9, 43.0], [51.0, 43.0], [51.1, 43.0], [51.2, 43.0], [51.3, 43.0], [51.4, 43.0], [51.5, 43.0], [51.6, 43.0], [51.7, 43.0], [51.8, 43.0], [51.9, 43.0], [52.0, 43.0], [52.1, 43.0], [52.2, 43.0], [52.3, 43.0], [52.4, 43.0], [52.5, 43.0], [52.6, 43.0], [52.7, 43.0], [52.8, 43.0], [52.9, 43.0], [53.0, 43.0], [53.1, 43.0], [53.2, 43.0], [53.3, 43.0], [53.4, 43.0], [53.5, 43.0], [53.6, 43.0], [53.7, 43.0], [53.8, 44.0], [53.9, 44.0], [54.0, 44.0], [54.1, 44.0], [54.2, 44.0], [54.3, 44.0], [54.4, 44.0], [54.5, 44.0], [54.6, 44.0], [54.7, 44.0], [54.8, 44.0], [54.9, 44.0], [55.0, 44.0], [55.1, 44.0], [55.2, 44.0], [55.3, 44.0], [55.4, 44.0], [55.5, 44.0], [55.6, 44.0], [55.7, 44.0], [55.8, 44.0], [55.9, 44.0], [56.0, 44.0], [56.1, 44.0], [56.2, 44.0], [56.3, 44.0], [56.4, 44.0], [56.5, 44.0], [56.6, 44.0], [56.7, 44.0], [56.8, 44.0], [56.9, 44.0], [57.0, 44.0], [57.1, 44.0], [57.2, 44.0], [57.3, 44.0], [57.4, 44.0], [57.5, 44.0], [57.6, 44.0], [57.7, 44.0], [57.8, 44.0], [57.9, 44.0], [58.0, 44.0], [58.1, 44.0], [58.2, 44.0], [58.3, 44.0], [58.4, 44.0], [58.5, 44.0], [58.6, 44.0], [58.7, 44.0], [58.8, 44.0], [58.9, 44.0], [59.0, 44.0], [59.1, 44.0], [59.2, 44.0], [59.3, 45.0], [59.4, 45.0], [59.5, 45.0], [59.6, 45.0], [59.7, 45.0], [59.8, 45.0], [59.9, 45.0], [60.0, 45.0], [60.1, 45.0], [60.2, 45.0], [60.3, 45.0], [60.4, 45.0], [60.5, 45.0], [60.6, 45.0], [60.7, 45.0], [60.8, 45.0], [60.9, 45.0], [61.0, 45.0], [61.1, 45.0], [61.2, 45.0], [61.3, 45.0], [61.4, 45.0], [61.5, 45.0], [61.6, 45.0], [61.7, 46.0], [61.8, 46.0], [61.9, 46.0], [62.0, 46.0], [62.1, 46.0], [62.2, 46.0], [62.3, 46.0], [62.4, 46.0], [62.5, 46.0], [62.6, 46.0], [62.7, 47.0], [62.8, 47.0], [62.9, 47.0], [63.0, 47.0], [63.1, 47.0], [63.2, 48.0], [63.3, 48.0], [63.4, 48.0], [63.5, 48.0], [63.6, 49.0], [63.7, 49.0], [63.8, 49.0], [63.9, 49.0], [64.0, 49.0], [64.1, 49.0], [64.2, 50.0], [64.3, 50.0], [64.4, 50.0], [64.5, 50.0], [64.6, 50.0], [64.7, 50.0], [64.8, 50.0], [64.9, 50.0], [65.0, 50.0], [65.1, 50.0], [65.2, 50.0], [65.3, 50.0], [65.4, 50.0], [65.5, 50.0], [65.6, 50.0], [65.7, 50.0], [65.8, 50.0], [65.9, 50.0], [66.0, 50.0], [66.1, 50.0], [66.2, 50.0], [66.3, 50.0], [66.4, 50.0], [66.5, 51.0], [66.6, 51.0], [66.7, 51.0], [66.8, 51.0], [66.9, 51.0], [67.0, 51.0], [67.1, 51.0], [67.2, 51.0], [67.3, 51.0], [67.4, 51.0], [67.5, 51.0], [67.6, 51.0], [67.7, 51.0], [67.8, 51.0], [67.9, 51.0], [68.0, 51.0], [68.1, 51.0], [68.2, 51.0], [68.3, 51.0], [68.4, 51.0], [68.5, 51.0], [68.6, 51.0], [68.7, 51.0], [68.8, 51.0], [68.9, 51.0], [69.0, 51.0], [69.1, 51.0], [69.2, 51.0], [69.3, 52.0], [69.4, 52.0], [69.5, 52.0], [69.6, 52.0], [69.7, 52.0], [69.8, 52.0], [69.9, 52.0], [70.0, 52.0], [70.1, 52.0], [70.2, 52.0], [70.3, 52.0], [70.4, 52.0], [70.5, 52.0], [70.6, 52.0], [70.7, 52.0], [70.8, 52.0], [70.9, 52.0], [71.0, 52.0], [71.1, 52.0], [71.2, 52.0], [71.3, 52.0], [71.4, 52.0], [71.5, 52.0], [71.6, 52.0], [71.7, 52.0], [71.8, 52.0], [71.9, 53.0], [72.0, 53.0], [72.1, 53.0], [72.2, 53.0], [72.3, 53.0], [72.4, 53.0], [72.5, 53.0], [72.6, 53.0], [72.7, 53.0], [72.8, 53.0], [72.9, 53.0], [73.0, 53.0], [73.1, 53.0], [73.2, 53.0], [73.3, 53.0], [73.4, 53.0], [73.5, 54.0], [73.6, 54.0], [73.7, 54.0], [73.8, 54.0], [73.9, 54.0], [74.0, 54.0], [74.1, 54.0], [74.2, 54.0], [74.3, 54.0], [74.4, 54.0], [74.5, 55.0], [74.6, 55.0], [74.7, 55.0], [74.8, 55.0], [74.9, 55.0], [75.0, 56.0], [75.1, 56.0], [75.2, 57.0], [75.3, 57.0], [75.4, 57.0], [75.5, 58.0], [75.6, 58.0], [75.7, 59.0], [75.8, 59.0], [75.9, 59.0], [76.0, 59.0], [76.1, 59.0], [76.2, 59.0], [76.3, 59.0], [76.4, 59.0], [76.5, 59.0], [76.6, 59.0], [76.7, 60.0], [76.8, 60.0], [76.9, 60.0], [77.0, 60.0], [77.1, 60.0], [77.2, 60.0], [77.3, 60.0], [77.4, 60.0], [77.5, 60.0], [77.6, 60.0], [77.7, 60.0], [77.8, 60.0], [77.9, 60.0], [78.0, 60.0], [78.1, 60.0], [78.2, 60.0], [78.3, 60.0], [78.4, 61.0], [78.5, 61.0], [78.6, 61.0], [78.7, 61.0], [78.8, 61.0], [78.9, 61.0], [79.0, 61.0], [79.1, 61.0], [79.2, 61.0], [79.3, 61.0], [79.4, 61.0], [79.5, 61.0], [79.6, 61.0], [79.7, 61.0], [79.8, 61.0], [79.9, 61.0], [80.0, 61.0], [80.1, 62.0], [80.2, 62.0], [80.3, 62.0], [80.4, 62.0], [80.5, 62.0], [80.6, 62.0], [80.7, 62.0], [80.8, 62.0], [80.9, 62.0], [81.0, 62.0], [81.1, 62.0], [81.2, 62.0], [81.3, 62.0], [81.4, 62.0], [81.5, 62.0], [81.6, 63.0], [81.7, 63.0], [81.8, 63.0], [81.9, 63.0], [82.0, 63.0], [82.1, 63.0], [82.2, 63.0], [82.3, 63.0], [82.4, 63.0], [82.5, 64.0], [82.6, 64.0], [82.7, 64.0], [82.8, 64.0], [82.9, 64.0], [83.0, 64.0], [83.1, 64.0], [83.2, 65.0], [83.3, 65.0], [83.4, 65.0], [83.5, 66.0], [83.6, 66.0], [83.7, 67.0], [83.8, 67.0], [83.9, 68.0], [84.0, 68.0], [84.1, 68.0], [84.2, 68.0], [84.3, 69.0], [84.4, 69.0], [84.5, 69.0], [84.6, 69.0], [84.7, 69.0], [84.8, 69.0], [84.9, 69.0], [85.0, 69.0], [85.1, 69.0], [85.2, 70.0], [85.3, 70.0], [85.4, 70.0], [85.5, 70.0], [85.6, 70.0], [85.7, 70.0], [85.8, 70.0], [85.9, 70.0], [86.0, 70.0], [86.1, 71.0], [86.2, 71.0], [86.3, 71.0], [86.4, 71.0], [86.5, 71.0], [86.6, 71.0], [86.7, 71.0], [86.8, 71.0], [86.9, 71.0], [87.0, 71.0], [87.1, 71.0], [87.2, 72.0], [87.3, 72.0], [87.4, 72.0], [87.5, 72.0], [87.6, 72.0], [87.7, 72.0], [87.8, 72.0], [87.9, 72.0], [88.0, 73.0], [88.1, 73.0], [88.2, 73.0], [88.3, 73.0], [88.4, 73.0], [88.5, 74.0], [88.6, 74.0], [88.7, 74.0], [88.8, 74.0], [88.9, 75.0], [89.0, 75.0], [89.1, 76.0], [89.2, 76.0], [89.3, 77.0], [89.4, 77.0], [89.5, 78.0], [89.6, 78.0], [89.7, 78.0], [89.8, 78.0], [89.9, 79.0], [90.0, 79.0], [90.1, 79.0], [90.2, 79.0], [90.3, 79.0], [90.4, 79.0], [90.5, 80.0], [90.6, 80.0], [90.7, 80.0], [90.8, 80.0], [90.9, 80.0], [91.0, 80.0], [91.1, 81.0], [91.2, 81.0], [91.3, 81.0], [91.4, 81.0], [91.5, 81.0], [91.6, 81.0], [91.7, 82.0], [91.8, 82.0], [91.9, 82.0], [92.0, 82.0], [92.1, 83.0], [92.2, 83.0], [92.3, 83.0], [92.4, 83.0], [92.5, 84.0], [92.6, 84.0], [92.7, 85.0], [92.8, 86.0], [92.9, 86.0], [93.0, 87.0], [93.1, 87.0], [93.2, 88.0], [93.3, 88.0], [93.4, 88.0], [93.5, 89.0], [93.6, 89.0], [93.7, 89.0], [93.8, 90.0], [93.9, 90.0], [94.0, 90.0], [94.1, 90.0], [94.2, 91.0], [94.3, 91.0], [94.4, 91.0], [94.5, 92.0], [94.6, 92.0], [94.7, 92.0], [94.8, 93.0], [94.9, 93.0], [95.0, 94.0], [95.1, 95.0], [95.2, 96.0], [95.3, 96.0], [95.4, 97.0], [95.5, 98.0], [95.6, 98.0], [95.7, 99.0], [95.8, 99.0], [95.9, 99.0], [96.0, 100.0], [96.1, 100.0], [96.2, 101.0], [96.3, 101.0], [96.4, 102.0], [96.5, 103.0], [96.6, 103.0], [96.7, 104.0], [96.8, 106.0], [96.9, 107.0], [97.0, 107.0], [97.1, 108.0], [97.2, 109.0], [97.3, 110.0], [97.4, 110.0], [97.5, 111.0], [97.6, 112.0], [97.7, 113.0], [97.8, 115.0], [97.9, 116.0], [98.0, 117.0], [98.1, 119.0], [98.2, 120.0], [98.3, 121.0], [98.4, 123.0], [98.5, 125.0], [98.6, 127.0], [98.7, 128.0], [98.8, 130.0], [98.9, 133.0], [99.0, 135.0], [99.1, 138.0], [99.2, 141.0], [99.3, 145.0], [99.4, 149.0], [99.5, 155.0], [99.6, 162.0], [99.7, 172.0], [99.8, 187.0], [99.9, 224.0], [100.0, 618.0]], "isOverall": false, "label": "Get Employee 1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2738048.0, "series": [{"data": [[0.0, 2737762.0], [300.0, 576.0], [600.0, 3.0], [700.0, 1.0], [200.0, 3599.0], [100.0, 112457.0], [400.0, 105.0], [800.0, 1.0], [500.0, 23.0]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[0.0, 2738048.0], [300.0, 617.0], [600.0, 3.0], [200.0, 3621.0], [100.0, 112438.0], [400.0, 109.0], [500.0, 26.0]], "isOverall": false, "label": "Get Employee 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 57.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5709332.0, "series": [{"data": [[0.0, 5709332.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 57.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 498.48457361646825, "minX": 1.6497678E12, "maxY": 500.0, "series": [{"data": [[1.64976804E12, 500.0], [1.64976786E12, 500.0], [1.6497678E12, 499.6941076202474], [1.64976798E12, 500.0], [1.64976792E12, 500.0], [1.6497681E12, 498.48457361646825]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497681E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 2.0, "maxY": 525.0, "series": [{"data": [[2.0, 98.0], [6.0, 134.0], [7.0, 93.0], [8.0, 96.0], [9.0, 126.0], [10.0, 146.0], [12.0, 38.0], [13.0, 124.0], [15.0, 89.5], [17.0, 92.0], [22.0, 93.0], [24.0, 88.5], [27.0, 23.0], [37.0, 60.0], [36.0, 68.0], [43.0, 57.0], [42.0, 97.0], [45.0, 115.0], [46.0, 56.0], [49.0, 44.0], [51.0, 85.66666666666667], [53.0, 112.0], [55.0, 63.0], [56.0, 70.0], [59.0, 81.5], [58.0, 45.0], [61.0, 83.0], [67.0, 59.0], [66.0, 73.5], [69.0, 91.5], [75.0, 61.0], [73.0, 125.0], [78.0, 95.0], [77.0, 60.0], [76.0, 101.33333333333333], [82.0, 62.666666666666664], [87.0, 80.0], [91.0, 64.0], [90.0, 103.5], [95.0, 95.0], [94.0, 66.5], [93.0, 65.0], [98.0, 69.0], [97.0, 123.0], [96.0, 146.0], [103.0, 80.0], [107.0, 69.0], [105.0, 97.5], [104.0, 85.66666666666667], [109.0, 68.0], [108.0, 67.0], [115.0, 71.0], [117.0, 108.0], [122.0, 112.0], [121.0, 120.8], [127.0, 145.0], [125.0, 71.0], [124.0, 2.0], [135.0, 98.5], [130.0, 118.5], [128.0, 112.0], [140.0, 98.5], [137.0, 104.5], [151.0, 76.0], [149.0, 76.0], [145.0, 53.5], [159.0, 51.666666666666664], [158.0, 99.5], [155.0, 41.0], [154.0, 76.0], [166.0, 76.0], [164.0, 99.0], [162.0, 98.0], [160.0, 4.0], [173.0, 115.0], [172.0, 77.0], [168.0, 3.0], [183.0, 122.0], [179.0, 77.0], [177.0, 79.0], [190.0, 87.0], [189.0, 54.5], [187.0, 12.0], [185.0, 12.0], [184.0, 110.5], [198.0, 21.0], [196.0, 23.5], [195.0, 53.5], [192.0, 99.0], [206.0, 112.0], [205.0, 18.0], [204.0, 22.0], [203.0, 53.5], [202.0, 23.0], [201.0, 36.0], [215.0, 109.0], [213.0, 44.0], [212.0, 58.0], [210.0, 121.0], [221.0, 28.5], [218.0, 151.0], [217.0, 93.0], [231.0, 28.0], [229.0, 26.0], [228.0, 109.0], [227.0, 25.0], [226.0, 47.5], [225.0, 29.666666666666668], [224.0, 77.0], [237.0, 48.0], [236.0, 41.0], [235.0, 41.0], [233.0, 76.0], [232.0, 78.0], [246.0, 42.0], [245.0, 76.0], [244.0, 88.0], [240.0, 127.0], [255.0, 69.5], [253.0, 43.0], [252.0, 39.0], [250.0, 76.5], [248.0, 76.5], [271.0, 115.0], [270.0, 46.0], [268.0, 46.0], [266.0, 77.0], [260.0, 94.0], [258.0, 53.333333333333336], [286.0, 54.0], [287.0, 56.0], [284.0, 54.5], [273.0, 46.0], [283.0, 66.5], [282.0, 73.5], [281.0, 53.333333333333336], [279.0, 52.0], [278.0, 56.0], [276.0, 52.0], [302.0, 224.16666666666666], [303.0, 150.5], [301.0, 69.25], [299.0, 55.25], [298.0, 47.0], [295.0, 48.0], [288.0, 46.0], [306.0, 130.0], [305.0, 225.0], [307.0, 159.16666666666666], [308.0, 176.0], [310.0, 225.33333333333331], [311.0, 248.0], [312.0, 121.5], [313.0, 112.66666666666666], [315.0, 58.0], [314.0, 58.333333333333336], [316.0, 137.0], [317.0, 258.6666666666667], [318.0, 176.5], [319.0, 71.33333333333333], [333.0, 229.5], [321.0, 225.5], [320.0, 228.33333333333334], [322.0, 208.5], [332.0, 57.0], [323.0, 55.0], [325.0, 151.7142857142857], [324.0, 55.0], [326.0, 181.0], [328.0, 191.62499999999997], [331.0, 118.75], [335.0, 59.0], [334.0, 91.0], [339.0, 57.0], [336.0, 101.75], [337.0, 210.0], [338.0, 57.0], [340.0, 161.0], [341.0, 118.0], [343.0, 104.0], [351.0, 81.25], [349.0, 57.0], [348.0, 57.0], [346.0, 57.0], [345.0, 76.0], [366.0, 68.66666666666667], [359.0, 107.0], [352.0, 140.0], [353.0, 57.0], [364.0, 57.0], [354.0, 57.0], [356.0, 244.5], [357.0, 57.0], [360.0, 141.66666666666666], [361.0, 94.66666666666667], [362.0, 40.0], [363.0, 46.0], [367.0, 83.5], [368.0, 100.25], [369.0, 160.0], [372.0, 114.5], [373.0, 51.75], [374.0, 185.0], [375.0, 117.0], [376.0, 12.0], [377.0, 68.33333333333333], [381.0, 111.0], [379.0, 57.0], [378.0, 59.0], [396.0, 65.66666666666667], [386.0, 59.0], [387.0, 77.0], [391.0, 58.0], [385.0, 93.5], [389.0, 171.5], [390.0, 94.0], [392.0, 185.25], [398.0, 70.0], [399.0, 58.0], [397.0, 58.0], [395.0, 58.333333333333336], [413.0, 181.0], [401.0, 132.66666666666666], [400.0, 250.5], [403.0, 181.5], [402.0, 58.0], [412.0, 69.0], [405.0, 85.0], [406.0, 58.0], [407.0, 132.8], [408.0, 91.5], [409.0, 111.5], [411.0, 76.0], [414.0, 209.0], [418.0, 84.8], [417.0, 4.0], [419.0, 129.5], [421.0, 93.4], [416.0, 75.0], [425.0, 85.0], [426.0, 61.5], [427.0, 95.5], [428.0, 91.0], [424.0, 59.5], [433.0, 94.66666666666667], [432.0, 103.66666666666667], [434.0, 122.66666666666667], [438.0, 53.0], [436.0, 60.5], [439.0, 90.2], [440.0, 110.0], [441.0, 88.0], [444.0, 118.2], [446.0, 193.33333333333334], [460.0, 196.0], [450.0, 83.5], [448.0, 208.66666666666666], [454.0, 61.0], [451.0, 120.0], [452.0, 135.0], [453.0, 117.0], [458.0, 135.8], [463.0, 100.5], [456.0, 62.0], [457.0, 75.0], [461.0, 206.0], [462.0, 111.0], [465.0, 96.0], [467.0, 71.25], [468.0, 55.5], [469.0, 62.0], [470.0, 229.0], [471.0, 92.33333333333333], [473.0, 105.0], [474.0, 125.75], [475.0, 68.5], [479.0, 111.0], [472.0, 75.0], [477.0, 60.0], [481.0, 136.0], [480.0, 48.0], [483.0, 204.0], [484.0, 132.75], [485.0, 112.5], [486.0, 125.0], [489.0, 133.85714285714286], [488.0, 63.0], [490.0, 62.0], [494.0, 61.0], [492.0, 68.0], [509.0, 60.5], [499.0, 208.0], [503.0, 180.33333333333334], [497.0, 61.0], [505.0, 263.5], [507.0, 185.5], [508.0, 90.5], [511.0, 62.0], [504.0, 62.0], [500.0, 61.5], [542.0, 121.66666666666667], [533.0, 212.33333333333334], [534.0, 139.5], [535.0, 225.0], [538.0, 84.6], [519.0, 67.0], [517.0, 94.0], [516.0, 78.5], [513.0, 126.0], [512.0, 74.0], [527.0, 73.0], [526.0, 60.0], [524.0, 68.5], [521.0, 61.0], [539.0, 147.0], [540.0, 198.0], [543.0, 61.0], [528.0, 61.0], [532.0, 74.0], [541.0, 60.0], [557.0, 119.0], [544.0, 111.0], [545.0, 87.75], [546.0, 146.5], [549.0, 115.33333333333334], [560.0, 102.75], [568.0, 162.0], [551.0, 62.0], [550.0, 61.0], [570.0, 337.0], [571.0, 113.0], [572.0, 93.0], [574.0, 101.33333333333333], [575.0, 132.5], [561.0, 311.0], [565.0, 60.5], [552.0, 170.33333333333334], [553.0, 144.0], [555.0, 137.0], [558.0, 97.0], [559.0, 195.0], [601.0, 192.0], [579.0, 64.0], [576.0, 259.0], [578.0, 62.0], [580.0, 213.0], [581.0, 60.0], [582.0, 210.5], [584.0, 228.2], [586.0, 61.0], [587.0, 223.0], [590.0, 225.5], [591.0, 155.0], [592.0, 200.66666666666666], [593.0, 92.0], [606.0, 189.5], [605.0, 60.0], [603.0, 150.0], [604.0, 37.5], [600.0, 129.5], [594.0, 205.0], [595.0, 222.5], [597.0, 106.0], [598.0, 181.0], [599.0, 66.5], [609.0, 213.0], [608.0, 74.0], [623.0, 70.0], [621.0, 73.66666666666667], [613.0, 131.0], [612.0, 60.0], [614.0, 110.33333333333333], [616.0, 164.0], [617.0, 138.33333333333334], [618.0, 211.0], [620.0, 111.25], [624.0, 168.33333333333334], [636.0, 133.66666666666666], [637.0, 36.0], [632.0, 103.75], [633.0, 126.25], [626.0, 219.0], [627.0, 175.0], [628.0, 121.6], [629.0, 211.0], [631.0, 210.33333333333334], [630.0, 59.5], [647.0, 266.0], [642.0, 183.66666666666666], [640.0, 192.83333333333331], [641.0, 96.5], [654.0, 208.00000000000003], [655.0, 142.5], [643.0, 173.0], [644.0, 163.0], [645.0, 127.0], [658.0, 269.2], [657.0, 71.0], [670.0, 231.0], [671.0, 57.25], [668.0, 165.66666666666666], [669.0, 193.0], [666.0, 259.0], [667.0, 162.0], [660.0, 277.0], [661.0, 169.2], [662.0, 213.0], [663.0, 134.5], [648.0, 93.0], [649.0, 164.0], [650.0, 247.0], [651.0, 58.0], [652.0, 126.5], [676.0, 358.0], [683.0, 218.0], [673.0, 216.0], [672.0, 104.33333333333333], [686.0, 345.0], [684.0, 63.0], [687.0, 68.0], [674.0, 145.2], [677.0, 225.0], [679.0, 68.33333333333333], [696.0, 7.0], [697.0, 140.0], [698.0, 214.0], [699.0, 161.0], [700.0, 188.33333333333331], [702.0, 242.66666666666669], [703.0, 172.0], [688.0, 146.0], [690.0, 155.25], [689.0, 58.0], [691.0, 128.5], [692.0, 225.0], [693.0, 254.0], [694.0, 225.0], [695.0, 117.66666666666667], [680.0, 8.0], [681.0, 42.0], [682.0, 119.0], [709.0, 213.8], [716.0, 112.0], [705.0, 211.25], [706.0, 255.33333333333334], [708.0, 44.666666666666664], [720.0, 278.0], [735.0, 69.5], [728.0, 189.0], [711.0, 57.0], [730.0, 56.0], [732.0, 61.25], [731.0, 57.0], [733.0, 383.0], [722.0, 151.25], [724.0, 218.0], [723.0, 62.0], [725.0, 184.0], [726.0, 121.0], [727.0, 237.0], [713.0, 309.5], [714.0, 143.5], [715.0, 266.0], [717.0, 120.7142857142857], [719.0, 285.0], [742.0, 200.25], [737.0, 226.5], [736.0, 442.0], [750.0, 191.66666666666669], [751.0, 55.0], [738.0, 263.0], [739.0, 56.0], [740.0, 255.0], [741.0, 140.66666666666666], [753.0, 176.5], [765.0, 259.0], [766.0, 54.0], [767.0, 121.5], [762.0, 187.0], [761.0, 54.0], [764.0, 227.5], [754.0, 287.5], [757.0, 295.0], [756.0, 64.0], [758.0, 143.5], [759.0, 115.0], [744.0, 149.83333333333331], [746.0, 240.25], [748.0, 146.5], [749.0, 95.0], [769.0, 184.0], [768.0, 147.5], [770.0, 180.33333333333334], [773.0, 96.75], [775.0, 226.75], [792.0, 54.0], [794.0, 270.3333333333333], [795.0, 283.5], [798.0, 178.0], [784.0, 54.0], [796.0, 63.0], [786.0, 142.0], [787.0, 166.5], [788.0, 202.0], [776.0, 130.5], [778.0, 55.0], [777.0, 69.0], [779.0, 197.66666666666666], [781.0, 171.0], [780.0, 53.0], [782.0, 282.5], [813.0, 188.0], [800.0, 196.0], [801.0, 328.0], [802.0, 155.0], [803.0, 198.0], [816.0, 263.0], [826.0, 280.0], [825.0, 52.0], [829.0, 62.5], [831.0, 53.0], [817.0, 435.5], [819.0, 128.5], [820.0, 96.5], [821.0, 208.0], [808.0, 367.0], [809.0, 180.33333333333334], [811.0, 107.33333333333333], [814.0, 325.0], [815.0, 245.33333333333334], [834.0, 198.0], [843.0, 211.0], [833.0, 141.25], [847.0, 229.0], [832.0, 27.0], [845.0, 267.0], [844.0, 57.0], [846.0, 204.0], [836.0, 199.66666666666669], [837.0, 103.0], [838.0, 78.625], [839.0, 211.0], [857.0, 115.0], [858.0, 220.0], [859.0, 140.25], [861.0, 153.5], [863.0, 318.0], [862.0, 56.0], [848.0, 178.5], [850.0, 214.0], [851.0, 407.0], [853.0, 245.5], [852.0, 51.0], [854.0, 251.66666666666669], [855.0, 97.25], [840.0, 136.0], [841.0, 111.0], [842.0, 211.0], [888.0, 108.45454545454548], [866.0, 112.5], [864.0, 211.33333333333331], [868.0, 266.0], [867.0, 51.0], [870.0, 268.75], [871.0, 109.0], [889.0, 148.25], [890.0, 222.0], [891.0, 269.5], [892.0, 282.5], [894.0, 193.5], [893.0, 81.8], [880.0, 111.66666666666667], [881.0, 252.0], [883.0, 56.0], [882.0, 50.0], [884.0, 291.6666666666667], [885.0, 142.66666666666666], [886.0, 380.0], [887.0, 228.5], [872.0, 10.0], [873.0, 61.5], [874.0, 226.33333333333334], [877.0, 112.25], [876.0, 71.0], [878.0, 61.4], [879.0, 358.5], [902.0, 278.0], [897.0, 223.0], [896.0, 215.25], [910.0, 123.28571428571429], [911.0, 165.0], [898.0, 243.66666666666666], [899.0, 223.0], [900.0, 232.0], [901.0, 60.5], [912.0, 245.00000000000003], [914.0, 49.0], [913.0, 49.666666666666664], [926.0, 66.5], [927.0, 145.0], [922.0, 149.75], [921.0, 72.75], [903.0, 50.0], [924.0, 85.5], [923.0, 58.375], [925.0, 163.11111111111111], [915.0, 184.75], [917.0, 241.16666666666669], [919.0, 196.0], [904.0, 281.5], [905.0, 131.25], [906.0, 270.6666666666667], [908.0, 58.0], [909.0, 129.4], [935.0, 115.66666666666666], [931.0, 176.33333333333334], [928.0, 259.6666666666667], [943.0, 48.0], [929.0, 224.8], [930.0, 444.0], [932.0, 79.0], [933.0, 239.0], [934.0, 165.0], [946.0, 288.0], [944.0, 48.0], [958.0, 115.85714285714286], [959.0, 278.6666666666667], [954.0, 150.6], [955.0, 48.0], [956.0, 214.25], [952.0, 226.66666666666669], [953.0, 256.0], [947.0, 305.8], [948.0, 144.25], [949.0, 288.0], [951.0, 234.75], [939.0, 234.6], [938.0, 58.0], [942.0, 141.5], [967.0, 235.4], [973.0, 129.16666666666666], [963.0, 172.25], [962.0, 70.25], [961.0, 52.0], [960.0, 51.2], [964.0, 147.5], [965.0, 351.3333333333333], [966.0, 67.0], [976.0, 150.66666666666666], [977.0, 47.5], [990.0, 291.5], [991.0, 98.83333333333333], [988.0, 373.0], [989.0, 101.79999999999997], [986.0, 140.75], [987.0, 135.0909090909091], [984.0, 90.36363636363637], [985.0, 187.72727272727272], [979.0, 128.0], [980.0, 150.5], [981.0, 232.5], [982.0, 193.33333333333331], [983.0, 65.0], [969.0, 179.99999999999997], [968.0, 46.0], [970.0, 46.0], [971.0, 117.73333333333332], [972.0, 202.75], [974.0, 293.0], [975.0, 82.55555555555556], [995.0, 255.66666666666666], [992.0, 106.14285714285714], [993.0, 252.83333333333331], [994.0, 84.83333333333333], [996.0, 48.37500000000001], [997.0, 248.25], [998.0, 110.22222222222226], [999.0, 119.85714285714286], [1000.0, 52.33744804612889]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[999.7698116010872, 52.388398498246524]], "isOverall": false, "label": "Get Employee 2-Aggregated", "isController": false}, {"data": [[2.0, 111.0], [13.0, 126.0], [22.0, 112.0], [37.0, 113.0], [43.0, 98.0], [42.0, 133.0], [48.0, 117.0], [57.0, 114.0], [61.0, 125.0], [60.0, 139.0], [73.0, 135.0], [76.0, 155.0], [82.0, 96.0], [87.0, 135.0], [86.0, 114.0], [94.0, 136.0], [99.0, 96.0], [108.0, 114.0], [115.0, 97.0], [113.0, 98.0], [122.0, 98.0], [121.0, 124.0], [126.0, 165.0], [125.0, 112.0], [135.0, 145.0], [134.0, 118.0], [143.0, 112.5], [138.0, 113.0], [151.0, 164.0], [149.0, 133.0], [148.0, 144.0], [144.0, 164.5], [159.0, 124.0], [164.0, 99.0], [163.0, 124.0], [174.0, 132.0], [170.0, 113.0], [169.0, 112.0], [168.0, 98.0], [178.0, 104.5], [176.0, 112.0], [190.0, 142.0], [187.0, 164.0], [196.0, 111.0], [192.0, 111.0], [202.0, 99.0], [209.0, 96.33333333333333], [223.0, 110.0], [230.0, 80.0], [238.0, 106.0], [244.0, 107.0], [270.0, 157.0], [266.0, 107.0], [260.0, 79.0], [286.0, 94.0], [283.0, 79.0], [275.0, 106.0], [302.0, 275.5], [301.0, 99.75], [290.0, 115.0], [288.0, 92.0], [305.0, 273.0], [304.0, 320.0], [306.0, 284.5], [307.0, 268.6], [308.0, 222.6], [309.0, 250.0], [310.0, 203.33333333333334], [311.0, 245.5], [312.0, 325.0], [318.0, 238.0], [319.0, 204.0], [316.0, 201.25], [317.0, 242.5], [313.0, 173.5], [314.0, 278.0], [333.0, 249.4], [320.0, 241.0], [323.0, 299.6666666666667], [324.0, 239.0], [325.0, 211.00000000000003], [326.0, 101.0], [328.0, 216.42857142857142], [331.0, 237.83333333333334], [335.0, 190.0], [334.0, 77.0], [337.0, 305.5], [336.0, 240.5], [339.0, 7.0], [340.0, 214.0], [341.0, 169.5], [343.0, 163.75], [351.0, 241.0], [346.0, 78.0], [345.0, 122.0], [353.0, 209.33333333333334], [352.0, 196.66666666666666], [354.0, 296.0], [365.0, 140.33333333333334], [355.0, 77.0], [356.0, 158.0], [357.0, 100.0], [359.0, 242.0], [360.0, 145.0], [361.0, 52.0], [363.0, 158.33333333333334], [369.0, 134.0], [368.0, 26.0], [370.0, 223.0], [371.0, 99.5], [372.0, 101.0], [373.0, 133.0], [374.0, 158.0], [375.0, 74.5], [382.0, 84.0], [377.0, 59.0], [379.0, 99.0], [378.0, 131.0], [396.0, 67.0], [386.0, 253.0], [385.0, 60.0], [389.0, 88.5], [390.0, 122.75], [392.0, 150.75], [394.0, 71.0], [397.0, 80.0], [398.0, 124.33333333333334], [395.0, 89.0], [412.0, 203.0], [400.0, 64.0], [401.0, 114.33333333333333], [403.0, 94.2], [407.0, 176.25], [404.0, 105.0], [408.0, 117.66666666666667], [411.0, 93.0], [414.0, 148.0], [415.0, 192.5], [417.0, 166.0], [420.0, 251.0], [421.0, 85.0], [423.0, 117.4], [424.0, 113.0], [425.0, 156.0], [429.0, 134.0], [431.0, 112.0], [428.0, 59.0], [418.0, 76.0], [444.0, 126.0], [433.0, 77.5], [434.0, 121.5], [438.0, 127.0], [436.0, 61.0], [439.0, 139.0], [440.0, 109.0], [441.0, 124.5], [443.0, 108.0], [442.0, 61.0], [446.0, 116.66666666666667], [447.0, 61.0], [450.0, 112.25], [448.0, 210.5], [451.0, 119.5], [461.0, 74.5], [462.0, 135.4], [463.0, 62.0], [452.0, 124.0], [453.0, 124.0], [455.0, 99.5], [454.0, 60.0], [456.0, 97.66666666666667], [457.0, 152.5], [458.0, 91.0], [459.0, 107.0], [464.0, 65.0], [467.0, 143.5], [468.0, 118.33333333333333], [470.0, 132.25], [474.0, 154.75], [477.0, 128.5], [478.0, 175.0], [479.0, 107.5], [471.0, 60.0], [481.0, 91.5], [483.0, 202.0], [482.0, 61.0], [484.0, 125.5], [485.0, 163.5], [486.0, 162.0], [487.0, 108.0], [489.0, 133.5], [490.0, 184.33333333333334], [492.0, 120.0], [494.0, 148.25], [495.0, 61.0], [488.0, 75.0], [508.0, 198.0], [498.0, 181.0], [499.0, 128.5], [501.0, 181.0], [500.0, 65.66666666666667], [502.0, 113.0], [503.0, 103.0], [504.0, 213.0], [505.0, 128.0], [506.0, 53.666666666666664], [511.0, 62.0], [509.0, 72.5], [540.0, 120.5], [533.0, 144.25], [531.0, 62.0], [530.0, 62.0], [529.0, 94.0], [534.0, 222.0], [535.0, 216.33333333333334], [537.0, 159.0], [527.0, 88.5], [523.0, 62.0], [522.0, 95.0], [521.0, 61.0], [538.0, 166.0], [539.0, 111.2], [541.0, 151.0], [542.0, 122.0], [547.0, 227.0], [544.0, 108.0], [545.0, 73.0], [558.0, 82.0], [556.0, 70.5], [548.0, 175.5], [549.0, 28.5], [552.0, 163.0], [553.0, 180.0], [554.0, 174.0], [555.0, 186.5], [569.0, 197.0], [568.0, 93.0], [570.0, 61.0], [571.0, 133.0], [573.0, 175.0], [575.0, 203.0], [567.0, 61.0], [565.0, 103.5], [561.0, 60.0], [560.0, 60.0], [600.0, 177.33333333333334], [579.0, 169.0], [577.0, 107.5], [580.0, 146.5], [581.0, 60.0], [582.0, 125.66666666666666], [583.0, 206.33333333333334], [601.0, 40.666666666666664], [602.0, 200.0], [603.0, 171.66666666666666], [604.0, 127.5], [605.0, 155.0], [606.0, 232.0], [607.0, 65.5], [592.0, 81.0], [584.0, 202.6], [587.0, 204.5], [590.0, 141.11111111111111], [588.0, 82.0], [591.0, 60.0], [594.0, 234.66666666666666], [595.0, 173.8], [596.0, 220.0], [597.0, 121.66666666666667], [598.0, 226.0], [599.0, 169.5], [609.0, 108.66666666666667], [608.0, 165.75], [623.0, 60.0], [610.0, 211.5], [611.0, 73.0], [614.0, 99.66666666666667], [612.0, 90.5], [633.0, 71.0], [634.0, 127.4], [639.0, 114.5], [637.0, 80.0], [624.0, 210.6], [627.0, 205.0], [628.0, 241.33333333333334], [631.0, 136.0], [617.0, 212.75], [619.0, 195.0], [620.0, 107.75], [621.0, 190.5], [644.0, 136.0], [654.0, 148.0], [642.0, 227.0], [640.0, 176.0], [641.0, 60.0], [655.0, 177.0], [643.0, 145.0], [647.0, 227.66666666666666], [646.0, 59.0], [664.0, 304.0], [667.0, 125.0], [666.0, 91.0], [665.0, 90.0], [668.0, 201.0], [669.0, 114.5], [671.0, 134.0], [656.0, 229.0], [658.0, 193.0], [657.0, 59.0], [659.0, 170.5], [661.0, 309.0], [660.0, 59.0], [663.0, 59.0], [649.0, 157.5], [650.0, 205.0], [652.0, 123.0], [651.0, 111.0], [696.0, 93.0], [676.0, 275.6666666666667], [673.0, 228.0], [675.0, 58.0], [687.0, 68.0], [677.0, 304.0], [678.0, 211.0], [679.0, 111.0], [697.0, 179.6], [698.0, 218.5], [700.0, 161.0], [699.0, 88.5], [702.0, 74.5], [703.0, 87.0], [688.0, 195.66666666666666], [689.0, 348.0], [690.0, 131.5], [691.0, 117.5], [692.0, 260.3333333333333], [693.0, 310.0], [694.0, 292.0], [695.0, 70.33333333333333], [683.0, 160.5], [682.0, 79.0], [681.0, 58.0], [684.0, 329.0], [685.0, 140.5], [686.0, 149.0], [705.0, 171.0], [704.0, 234.0], [706.0, 249.66666666666666], [707.0, 164.0], [708.0, 159.0], [709.0, 268.0], [720.0, 215.0], [735.0, 180.0], [732.0, 284.6666666666667], [731.0, 56.0], [733.0, 221.0], [729.0, 296.0], [728.0, 118.0], [711.0, 58.0], [730.0, 219.5], [721.0, 164.5], [722.0, 181.16666666666666], [725.0, 147.0], [727.0, 355.0], [713.0, 378.0], [714.0, 57.0], [715.0, 239.5], [719.0, 135.5], [742.0, 226.0], [749.0, 171.5], [738.0, 326.0], [737.0, 166.0], [750.0, 225.0], [751.0, 159.5], [741.0, 259.5], [740.0, 56.0], [739.0, 59.333333333333336], [743.0, 201.66666666666666], [760.0, 306.0], [761.0, 153.33333333333334], [763.0, 163.0], [765.0, 224.0], [764.0, 54.0], [766.0, 180.0], [767.0, 259.0], [752.0, 55.0], [753.0, 115.0], [754.0, 240.0], [755.0, 176.0], [757.0, 289.5], [756.0, 55.0], [758.0, 91.0], [759.0, 116.0], [744.0, 188.0], [745.0, 56.0], [746.0, 227.0], [748.0, 171.0], [770.0, 131.42857142857144], [769.0, 283.3333333333333], [772.0, 280.0], [771.0, 85.0], [773.0, 101.6], [775.0, 155.0], [792.0, 64.0], [793.0, 182.66666666666669], [794.0, 275.0], [796.0, 63.0], [799.0, 63.0], [798.0, 53.0], [784.0, 122.5], [786.0, 284.3333333333333], [788.0, 209.5], [790.0, 228.0], [791.0, 242.5], [776.0, 157.0], [777.0, 72.33333333333333], [779.0, 233.5], [780.0, 58.5], [783.0, 239.0], [806.0, 256.75], [801.0, 118.0], [800.0, 188.66666666666669], [815.0, 187.0], [802.0, 126.66666666666666], [803.0, 207.5], [804.0, 330.0], [816.0, 295.3333333333333], [831.0, 208.5], [827.0, 215.66666666666666], [829.0, 67.5], [830.0, 241.66666666666669], [824.0, 312.0], [826.0, 319.0], [817.0, 151.66666666666666], [818.0, 203.0], [819.0, 86.33333333333333], [821.0, 224.0], [820.0, 61.5], [822.0, 264.0], [823.0, 215.0], [809.0, 196.0], [808.0, 53.0], [810.0, 231.5], [811.0, 259.0], [814.0, 207.0], [837.0, 152.5], [846.0, 473.0], [834.0, 157.0], [833.0, 215.0], [847.0, 116.66666666666667], [832.0, 52.0], [836.0, 148.66666666666666], [838.0, 194.0], [856.0, 290.6666666666667], [859.0, 224.5], [857.0, 51.0], [860.0, 381.0], [861.0, 162.25], [863.0, 207.66666666666666], [862.0, 51.0], [848.0, 145.0], [850.0, 190.0], [849.0, 51.0], [851.0, 269.0], [852.0, 163.4], [853.0, 130.5], [854.0, 324.5], [855.0, 62.333333333333336], [841.0, 140.66666666666666], [840.0, 52.0], [842.0, 355.0], [845.0, 268.0], [844.0, 59.0], [867.0, 209.5], [875.0, 127.33333333333334], [866.0, 166.8], [864.0, 51.0], [879.0, 184.0], [878.0, 51.0], [868.0, 30.0], [870.0, 96.0], [881.0, 191.66666666666669], [880.0, 51.0], [893.0, 123.4], [894.0, 81.0], [895.0, 53.0], [890.0, 226.5], [892.0, 255.66666666666666], [888.0, 143.6], [871.0, 51.0], [889.0, 197.0], [883.0, 149.66666666666666], [884.0, 226.0], [885.0, 201.0], [886.0, 223.0], [887.0, 337.0], [872.0, 243.8], [873.0, 92.33333333333333], [874.0, 241.0], [876.0, 353.0], [877.0, 188.66666666666666], [902.0, 244.77777777777777], [897.0, 188.0], [896.0, 209.0], [911.0, 49.0], [907.0, 330.0], [909.0, 70.5], [908.0, 70.2], [910.0, 231.57142857142858], [898.0, 278.0], [899.0, 233.0], [901.0, 101.4], [903.0, 273.0], [921.0, 56.0], [922.0, 258.8], [924.0, 197.0], [923.0, 70.0], [925.0, 144.2], [926.0, 33.666666666666664], [912.0, 172.7142857142857], [915.0, 140.0], [914.0, 65.0], [913.0, 49.0], [916.0, 49.0], [917.0, 275.0], [918.0, 170.0], [919.0, 171.0], [905.0, 178.75], [904.0, 92.0], [906.0, 231.0], [932.0, 138.0], [930.0, 235.0], [929.0, 217.14285714285714], [928.0, 49.0], [943.0, 48.0], [942.0, 91.0], [941.0, 53.5], [931.0, 525.0], [933.0, 151.0], [934.0, 59.0], [935.0, 196.0], [936.0, 266.0], [938.0, 52.0], [939.0, 208.0], [945.0, 202.5], [944.0, 69.33333333333333], [946.0, 48.0], [956.0, 286.25], [958.0, 121.0], [957.0, 49.0], [959.0, 76.0], [954.0, 199.33333333333331], [955.0, 128.0], [952.0, 230.66666666666666], [953.0, 186.0], [947.0, 335.0], [949.0, 257.0], [948.0, 61.0], [951.0, 59.6], [984.0, 192.14285714285714], [962.0, 120.62499999999997], [961.0, 48.0], [975.0, 48.0], [960.0, 47.0], [963.0, 234.5], [964.0, 212.33333333333331], [967.0, 261.0], [966.0, 47.0], [965.0, 46.5], [985.0, 126.58333333333333], [986.0, 91.0], [987.0, 186.33333333333334], [988.0, 245.5], [989.0, 79.04545454545455], [990.0, 298.0], [991.0, 155.0], [976.0, 138.83333333333334], [977.0, 169.83333333333334], [979.0, 292.0], [980.0, 168.42857142857144], [981.0, 173.83333333333331], [982.0, 129.0], [983.0, 192.4], [969.0, 185.83333333333334], [968.0, 46.0], [970.0, 46.0], [971.0, 100.2], [972.0, 102.66666666666667], [973.0, 60.0], [974.0, 324.0], [995.0, 96.6], [992.0, 92.83333333333334], [993.0, 231.3], [994.0, 146.6], [997.0, 225.33333333333334], [998.0, 81.37499999999999], [999.0, 150.60000000000002], [1000.0, 52.32664553599332], [996.0, 55.199999999999996]], "isOverall": false, "label": "Get Employee 1", "isController": false}, {"data": [[999.8369539403554, 52.38192178816026]], "isOverall": false, "label": "Get Employee 1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 377348.65, "minX": 1.6497678E12, "maxY": 3780914.3333333335, "series": [{"data": [[1.64976804E12, 3673311.7333333334], [1.64976786E12, 3780914.3333333335], [1.6497678E12, 2883031.3333333335], [1.64976798E12, 3752705.4], [1.64976792E12, 3776381.1666666665], [1.6497681E12, 566632.4833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64976804E12, 2446237.75], [1.64976786E12, 2517884.35], [1.6497678E12, 1919732.85], [1.64976798E12, 2499056.8], [1.64976792E12, 2514925.95], [1.6497681E12, 377348.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497681E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 51.17499876209483, "minX": 1.6497678E12, "maxY": 56.23599109450517, "series": [{"data": [[1.64976804E12, 52.687004009231444], [1.64976786E12, 51.1973585769382], [1.6497678E12, 56.19830523281235], [1.64976798E12, 51.448583938389135], [1.64976792E12, 51.235354355610674], [1.6497681E12, 52.92068561815873]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[1.64976804E12, 52.69108443731927], [1.64976786E12, 51.17499876209483], [1.6497678E12, 56.23599109450517], [1.64976798E12, 51.383519244229085], [1.64976792E12, 51.24685275941402], [1.6497681E12, 53.00667184572482]], "isOverall": false, "label": "Get Employee 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497681E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 51.155224726680544, "minX": 1.6497678E12, "maxY": 56.2049472972196, "series": [{"data": [[1.64976804E12, 52.66589446634793], [1.64976786E12, 51.17753082286487], [1.6497678E12, 56.16764217699009], [1.64976798E12, 51.42839457920991], [1.64976792E12, 51.21537777701846], [1.6497681E12, 52.89985110083063]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[1.64976804E12, 52.669866115375264], [1.64976786E12, 51.155224726680544], [1.6497678E12, 56.2049472972196], [1.64976798E12, 51.363300897083676], [1.64976792E12, 51.22691425073242], [1.6497681E12, 52.98519398619895]], "isOverall": false, "label": "Get Employee 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497681E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0010094936816968895, "minX": 1.6497678E12, "maxY": 0.0013866945521090197, "series": [{"data": [[1.64976804E12, 0.0011688464627893625], [1.64976786E12, 0.0010094936816968895], [1.6497678E12, 0.001102069067474782], [1.64976798E12, 0.0011105352780040058], [1.64976792E12, 0.0010719139733474659], [1.6497681E12, 0.0013866945521090197]], "isOverall": false, "label": "Get Employee 2", "isController": false}, {"data": [[1.64976804E12, 0.001205946052372522], [1.64976786E12, 0.001080818963677311], [1.6497678E12, 0.0010594311772900674], [1.64976798E12, 0.0011297375466639869], [1.64976792E12, 0.0011713446352416286], [1.6497681E12, 0.0012681076634830652]], "isOverall": false, "label": "Get Employee 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497681E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6497678E12, "maxY": 819.0, "series": [{"data": [[1.64976804E12, 328.0], [1.64976786E12, 332.0], [1.6497678E12, 819.0], [1.64976798E12, 346.0], [1.64976792E12, 336.0], [1.6497681E12, 299.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64976804E12, 76.0], [1.64976786E12, 79.0], [1.6497678E12, 78.0], [1.64976798E12, 77.0], [1.64976792E12, 77.0], [1.6497681E12, 81.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64976804E12, 132.0], [1.64976786E12, 131.0], [1.6497678E12, 128.0], [1.64976798E12, 131.0], [1.64976792E12, 123.0], [1.6497681E12, 131.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64976804E12, 94.0], [1.64976786E12, 97.0], [1.6497678E12, 91.0], [1.64976798E12, 93.0], [1.64976792E12, 90.0], [1.6497681E12, 96.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64976804E12, 0.0], [1.64976786E12, 0.0], [1.6497678E12, 0.0], [1.64976798E12, 0.0], [1.64976792E12, 0.0], [1.6497681E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64976804E12, 44.0], [1.64976786E12, 42.0], [1.6497678E12, 43.0], [1.64976798E12, 44.0], [1.64976792E12, 43.0], [1.6497681E12, 44.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497681E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 41.0, "minX": 1069.0, "maxY": 256.0, "series": [{"data": [[19323.0, 43.0], [18947.0, 44.0], [19019.0, 44.0], [19027.0, 44.0], [18971.0, 44.0], [18963.0, 44.0], [19451.0, 43.0], [19075.0, 45.0], [19067.0, 43.0], [19051.0, 43.0], [19171.0, 43.0], [19147.0, 44.0], [19091.0, 43.0], [19043.0, 44.0], [19259.0, 43.0], [19203.0, 43.0], [18835.0, 44.0], [18755.0, 44.0], [18915.0, 44.0], [19211.0, 43.0], [19283.0, 43.0], [19315.0, 43.0], [19347.0, 43.0], [19371.0, 43.0], [19379.0, 43.0], [19939.0, 41.0], [19523.0, 42.0], [19699.0, 42.0], [19747.0, 42.0], [19723.0, 42.0], [19715.0, 42.0], [19459.0, 43.0], [19515.0, 43.0], [19507.0, 42.0], [19635.0, 42.0], [19603.0, 42.0], [19547.0, 43.0], [19555.0, 42.0], [19571.0, 42.0], [11045.0, 79.0], [14013.0, 64.0], [19346.0, 43.0], [19442.0, 43.0], [18954.0, 44.0], [19026.0, 44.0], [19050.0, 43.0], [18962.0, 44.0], [19394.0, 43.0], [19378.0, 43.0], [19218.0, 43.0], [18490.0, 44.0], [18698.0, 44.0], [18738.0, 44.0], [18826.0, 44.0], [18842.0, 44.0], [18930.0, 44.0], [18938.0, 44.0], [19226.0, 43.0], [19266.0, 43.0], [19274.0, 43.0], [19290.0, 43.0], [19338.0, 43.0], [19490.0, 43.0], [19594.0, 42.0], [19610.0, 42.0], [19970.0, 41.0], [19626.0, 42.0], [19690.0, 42.0], [19778.0, 42.0], [19474.0, 43.0], [19794.0, 42.0], [19482.0, 43.0], [19522.0, 43.0], [19578.0, 42.0], [19538.0, 42.0], [19514.0, 43.0], [1069.0, 193.0], [19433.0, 42.0], [19073.0, 44.0], [19089.0, 44.0], [19057.0, 44.0], [19177.0, 43.0], [19153.0, 43.0], [19097.0, 43.0], [19289.0, 43.0], [19441.0, 43.0], [18969.0, 44.0], [19233.0, 43.0], [19225.0, 43.0], [19209.0, 43.0], [18769.0, 44.0], [18713.0, 44.0], [18929.0, 44.0], [18849.0, 44.0], [18777.0, 44.0], [19529.0, 42.0], [19505.0, 42.0], [19569.0, 42.0], [19489.0, 42.0], [19713.0, 42.0], [19777.0, 42.0], [19657.0, 42.0], [19641.0, 42.0], [19625.0, 42.0], [19585.0, 42.0], [19593.0, 42.0], [19609.0, 42.0], [3637.0, 256.0], [12212.0, 68.0], [13172.0, 68.0], [13132.0, 66.0], [19424.0, 43.0], [19328.0, 44.0], [19248.0, 43.0], [19280.0, 43.0], [18840.0, 44.0], [18952.0, 44.0], [19056.0, 43.0], [19608.0, 42.0], [19648.0, 42.0], [19632.0, 42.0], [19616.0, 42.0], [19664.0, 42.0], [19840.0, 41.0], [19576.0, 42.0], [19776.0, 42.0], [19768.0, 42.0], [19792.0, 42.0], [19944.0, 41.0], [17311.0, 51.0], [19423.0, 43.0], [19079.0, 43.0], [19439.0, 43.0], [19031.0, 43.0], [19183.0, 43.0], [19095.0, 43.0], [19391.0, 43.0], [19407.0, 43.0], [19359.0, 43.0], [19247.0, 43.0], [18791.0, 45.0], [18927.0, 44.0], [19519.0, 43.0], [19663.0, 43.0], [19679.0, 42.0], [19711.0, 42.0], [19743.0, 42.0], [19487.0, 42.0], [19503.0, 43.0], [19599.0, 42.0], [19639.0, 42.0], [19631.0, 42.0], [19559.0, 42.0], [13775.0, 64.0], [14207.0, 61.0], [19342.0, 43.0], [19446.0, 42.0], [19454.0, 43.0], [19014.0, 43.0], [19062.0, 44.0], [19142.0, 43.0], [19126.0, 43.0], [19174.0, 43.0], [19070.0, 44.0], [19414.0, 43.0], [18894.0, 44.0], [18886.0, 44.0], [18902.0, 44.0], [18742.0, 44.0], [18734.0, 44.0], [18726.0, 44.0], [18822.0, 44.0], [19222.0, 43.0], [19262.0, 44.0], [19230.0, 43.0], [19302.0, 43.0], [19590.0, 42.0], [19582.0, 42.0], [19598.0, 43.0], [19702.0, 42.0], [19694.0, 42.0], [19678.0, 42.0], [19630.0, 42.0], [19774.0, 41.0], [19726.0, 42.0], [19782.0, 42.0], [19830.0, 42.0], [19470.0, 42.0], [19846.0, 42.0], [19494.0, 43.0], [19502.0, 42.0], [19389.0, 43.0], [19045.0, 43.0], [19021.0, 43.0], [18949.0, 44.0], [19125.0, 43.0], [19149.0, 44.0], [19141.0, 43.0], [19365.0, 43.0], [19301.0, 43.0], [19437.0, 43.0], [19421.0, 44.0], [19269.0, 43.0], [19245.0, 42.0], [18661.0, 44.0], [18925.0, 44.0], [18941.0, 44.0], [18789.0, 44.0], [18901.0, 44.0], [18909.0, 44.0], [19261.0, 44.0], [19525.0, 43.0], [19509.0, 42.0], [19541.0, 42.0], [19533.0, 42.0], [19549.0, 43.0], [19557.0, 42.0], [19901.0, 42.0], [19941.0, 41.0], [19469.0, 43.0], [19493.0, 42.0], [19877.0, 42.0], [19797.0, 42.0], [19757.0, 42.0], [19765.0, 42.0], [19701.0, 42.0], [19653.0, 42.0], [19621.0, 42.0], [19613.0, 42.0], [5247.0, 48.0], [8077.0, 116.0], [11338.0, 82.0], [16948.0, 42.0], [18348.0, 44.0], [19380.0, 43.0], [19092.0, 43.0], [19316.0, 43.0], [19284.0, 43.0], [19116.0, 43.0], [19132.0, 43.0], [19444.0, 43.0], [18948.0, 44.0], [19180.0, 44.0], [19164.0, 43.0], [19204.0, 43.0], [18860.0, 44.0], [18812.0, 44.0], [18900.0, 44.0], [19276.0, 43.0], [19860.0, 41.0], [19660.0, 42.0], [19620.0, 42.0], [19708.0, 42.0], [19756.0, 42.0], [19748.0, 42.0], [19740.0, 42.0], [19828.0, 42.0], [19580.0, 42.0], [19604.0, 42.0], [19492.0, 43.0], [19460.0, 42.0], [19516.0, 42.0], [19572.0, 43.0], [19532.0, 42.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19970.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 41.0, "minX": 1069.0, "maxY": 255.0, "series": [{"data": [[19323.0, 43.0], [18947.0, 44.0], [19019.0, 44.0], [19027.0, 44.0], [18971.0, 44.0], [18963.0, 44.0], [19451.0, 43.0], [19075.0, 45.0], [19067.0, 43.0], [19051.0, 43.0], [19171.0, 43.0], [19147.0, 44.0], [19091.0, 43.0], [19043.0, 44.0], [19259.0, 43.0], [19203.0, 43.0], [18835.0, 44.0], [18755.0, 44.0], [18915.0, 44.0], [19211.0, 43.0], [19283.0, 43.0], [19315.0, 43.0], [19347.0, 43.0], [19371.0, 43.0], [19379.0, 43.0], [19939.0, 41.0], [19523.0, 42.0], [19699.0, 42.0], [19747.0, 42.0], [19723.0, 42.0], [19715.0, 42.0], [19459.0, 43.0], [19515.0, 43.0], [19507.0, 42.0], [19635.0, 42.0], [19603.0, 42.0], [19547.0, 43.0], [19555.0, 42.0], [19571.0, 42.0], [11045.0, 79.0], [14013.0, 64.0], [19346.0, 43.0], [19442.0, 43.0], [18954.0, 44.0], [19026.0, 44.0], [19050.0, 43.0], [18962.0, 44.0], [19394.0, 43.0], [19378.0, 43.0], [19218.0, 43.0], [18490.0, 44.0], [18698.0, 44.0], [18738.0, 44.0], [18826.0, 44.0], [18842.0, 44.0], [18930.0, 44.0], [18938.0, 44.0], [19226.0, 43.0], [19266.0, 43.0], [19274.0, 43.0], [19290.0, 43.0], [19338.0, 43.0], [19490.0, 43.0], [19594.0, 42.0], [19610.0, 42.0], [19970.0, 41.0], [19626.0, 42.0], [19690.0, 42.0], [19778.0, 42.0], [19474.0, 42.0], [19794.0, 42.0], [19482.0, 43.0], [19522.0, 43.0], [19578.0, 42.0], [19538.0, 42.0], [19514.0, 43.0], [1069.0, 191.0], [19433.0, 42.0], [19073.0, 44.0], [19089.0, 44.0], [19057.0, 44.0], [19177.0, 43.0], [19153.0, 43.0], [19097.0, 43.0], [19289.0, 43.0], [19441.0, 43.0], [18969.0, 44.0], [19233.0, 43.0], [19225.0, 43.0], [19209.0, 43.0], [18769.0, 44.0], [18713.0, 44.0], [18929.0, 44.0], [18849.0, 44.0], [18777.0, 44.0], [19529.0, 42.0], [19505.0, 42.0], [19569.0, 42.0], [19489.0, 42.0], [19713.0, 42.0], [19777.0, 42.0], [19657.0, 42.0], [19641.0, 42.0], [19625.0, 42.0], [19585.0, 42.0], [19593.0, 42.0], [19609.0, 42.0], [3637.0, 255.0], [12212.0, 68.0], [13172.0, 68.0], [13132.0, 66.0], [19424.0, 43.0], [19328.0, 44.0], [19248.0, 42.0], [19280.0, 43.0], [18840.0, 44.0], [18952.0, 44.0], [19056.0, 43.0], [19608.0, 42.0], [19648.0, 42.0], [19632.0, 42.0], [19616.0, 42.0], [19664.0, 42.0], [19840.0, 41.0], [19576.0, 42.0], [19776.0, 42.0], [19768.0, 42.0], [19792.0, 42.0], [19944.0, 41.0], [17311.0, 51.0], [19423.0, 43.0], [19079.0, 43.0], [19439.0, 43.0], [19031.0, 43.0], [19183.0, 43.0], [19095.0, 43.0], [19391.0, 43.0], [19407.0, 43.0], [19359.0, 43.0], [19247.0, 43.0], [18791.0, 44.0], [18927.0, 44.0], [19519.0, 42.0], [19663.0, 43.0], [19679.0, 42.0], [19711.0, 42.0], [19743.0, 42.0], [19487.0, 42.0], [19503.0, 43.0], [19599.0, 42.0], [19639.0, 42.0], [19631.0, 42.0], [19559.0, 42.0], [13775.0, 63.0], [14207.0, 61.0], [19342.0, 43.0], [19446.0, 42.0], [19454.0, 43.0], [19014.0, 43.0], [19062.0, 44.0], [19142.0, 43.0], [19126.0, 43.0], [19174.0, 43.0], [19070.0, 44.0], [19414.0, 43.0], [18894.0, 44.0], [18886.0, 44.0], [18902.0, 44.0], [18742.0, 44.0], [18734.0, 44.0], [18726.0, 44.0], [18822.0, 44.0], [19222.0, 43.0], [19262.0, 44.0], [19230.0, 43.0], [19302.0, 43.0], [19590.0, 42.0], [19582.0, 42.0], [19598.0, 43.0], [19702.0, 42.0], [19694.0, 42.0], [19678.0, 42.0], [19630.0, 42.0], [19774.0, 41.0], [19726.0, 42.0], [19782.0, 42.0], [19830.0, 42.0], [19470.0, 42.0], [19846.0, 42.0], [19494.0, 43.0], [19502.0, 42.0], [19389.0, 43.0], [19045.0, 43.0], [19021.0, 43.0], [18949.0, 44.0], [19125.0, 43.0], [19149.0, 44.0], [19141.0, 43.0], [19365.0, 43.0], [19301.0, 43.0], [19437.0, 43.0], [19421.0, 44.0], [19269.0, 43.0], [19245.0, 42.0], [18661.0, 44.0], [18925.0, 44.0], [18941.0, 44.0], [18789.0, 44.0], [18901.0, 44.0], [18909.0, 44.0], [19261.0, 44.0], [19525.0, 43.0], [19509.0, 42.0], [19541.0, 42.0], [19533.0, 42.0], [19549.0, 43.0], [19557.0, 42.0], [19901.0, 42.0], [19941.0, 41.0], [19469.0, 42.0], [19493.0, 42.0], [19877.0, 42.0], [19797.0, 42.0], [19757.0, 42.0], [19765.0, 42.0], [19701.0, 42.0], [19653.0, 42.0], [19621.0, 42.0], [19613.0, 42.0], [5247.0, 48.0], [8077.0, 116.0], [11338.0, 82.0], [16948.0, 42.0], [18348.0, 44.0], [19380.0, 43.0], [19092.0, 43.0], [19316.0, 43.0], [19284.0, 43.0], [19116.0, 43.0], [19132.0, 43.0], [19444.0, 43.0], [18948.0, 44.0], [19180.0, 44.0], [19164.0, 43.0], [19204.0, 43.0], [18860.0, 44.0], [18812.0, 44.0], [18900.0, 44.0], [19276.0, 43.0], [19860.0, 41.0], [19660.0, 42.0], [19620.0, 42.0], [19708.0, 42.0], [19756.0, 42.0], [19748.0, 42.0], [19740.0, 42.0], [19828.0, 42.0], [19580.0, 42.0], [19604.0, 42.0], [19492.0, 43.0], [19460.0, 42.0], [19516.0, 42.0], [19572.0, 43.0], [19532.0, 42.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19970.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2908.55, "minX": 1.6497678E12, "maxY": 19518.466666666667, "series": [{"data": [[1.64976804E12, 18963.05], [1.64976786E12, 19518.466666666667], [1.6497678E12, 14898.316666666668], [1.64976798E12, 19372.55], [1.64976792E12, 19495.55], [1.6497681E12, 2908.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497681E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2925.1833333333334, "minX": 1.6497678E12, "maxY": 19518.483333333334, "series": [{"data": [[1.64976804E12, 18963.083333333332], [1.64976786E12, 19518.483333333334], [1.6497678E12, 14881.65], [1.64976798E12, 19372.533333333333], [1.64976792E12, 19495.55], [1.6497681E12, 2925.1833333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497681E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1458.8666666666666, "minX": 1.6497678E12, "maxY": 9761.116666666667, "series": [{"data": [[1.64976804E12, 9482.283333333333], [1.64976786E12, 9757.366666666667], [1.6497678E12, 7440.55], [1.64976798E12, 9680.016666666666], [1.64976792E12, 9748.916666666666], [1.6497681E12, 1466.3166666666666]], "isOverall": false, "label": "Get Employee 2-success", "isController": false}, {"data": [[1.64976804E12, 9480.8], [1.64976786E12, 9761.116666666667], [1.6497678E12, 7441.1], [1.64976798E12, 9692.516666666666], [1.64976792E12, 9746.633333333333], [1.6497681E12, 1458.8666666666666]], "isOverall": false, "label": "Get Employee 1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497681E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2925.1833333333334, "minX": 1.6497678E12, "maxY": 19518.483333333334, "series": [{"data": [[1.64976804E12, 18963.083333333332], [1.64976786E12, 19518.483333333334], [1.6497678E12, 14881.65], [1.64976798E12, 19372.533333333333], [1.64976792E12, 19495.55], [1.6497681E12, 2925.1833333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497681E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

