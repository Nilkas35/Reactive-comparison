/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1548.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 2.0], [0.3, 2.0], [0.4, 3.0], [0.5, 7.0], [0.6, 14.0], [0.7, 19.0], [0.8, 20.0], [0.9, 20.0], [1.0, 21.0], [1.1, 22.0], [1.2, 23.0], [1.3, 25.0], [1.4, 26.0], [1.5, 28.0], [1.6, 29.0], [1.7, 29.0], [1.8, 30.0], [1.9, 30.0], [2.0, 30.0], [2.1, 30.0], [2.2, 30.0], [2.3, 30.0], [2.4, 30.0], [2.5, 30.0], [2.6, 30.0], [2.7, 30.0], [2.8, 30.0], [2.9, 30.0], [3.0, 30.0], [3.1, 30.0], [3.2, 30.0], [3.3, 30.0], [3.4, 30.0], [3.5, 30.0], [3.6, 30.0], [3.7, 31.0], [3.8, 31.0], [3.9, 31.0], [4.0, 31.0], [4.1, 31.0], [4.2, 31.0], [4.3, 31.0], [4.4, 31.0], [4.5, 31.0], [4.6, 31.0], [4.7, 31.0], [4.8, 31.0], [4.9, 31.0], [5.0, 31.0], [5.1, 31.0], [5.2, 31.0], [5.3, 31.0], [5.4, 31.0], [5.5, 31.0], [5.6, 31.0], [5.7, 31.0], [5.8, 31.0], [5.9, 31.0], [6.0, 31.0], [6.1, 31.0], [6.2, 31.0], [6.3, 31.0], [6.4, 31.0], [6.5, 31.0], [6.6, 31.0], [6.7, 31.0], [6.8, 31.0], [6.9, 31.0], [7.0, 31.0], [7.1, 31.0], [7.2, 31.0], [7.3, 32.0], [7.4, 32.0], [7.5, 32.0], [7.6, 32.0], [7.7, 32.0], [7.8, 32.0], [7.9, 32.0], [8.0, 32.0], [8.1, 32.0], [8.2, 32.0], [8.3, 32.0], [8.4, 32.0], [8.5, 32.0], [8.6, 32.0], [8.7, 32.0], [8.8, 32.0], [8.9, 32.0], [9.0, 32.0], [9.1, 32.0], [9.2, 32.0], [9.3, 32.0], [9.4, 32.0], [9.5, 32.0], [9.6, 32.0], [9.7, 32.0], [9.8, 32.0], [9.9, 33.0], [10.0, 33.0], [10.1, 33.0], [10.2, 33.0], [10.3, 33.0], [10.4, 33.0], [10.5, 33.0], [10.6, 33.0], [10.7, 33.0], [10.8, 33.0], [10.9, 33.0], [11.0, 33.0], [11.1, 33.0], [11.2, 33.0], [11.3, 33.0], [11.4, 33.0], [11.5, 33.0], [11.6, 33.0], [11.7, 33.0], [11.8, 33.0], [11.9, 33.0], [12.0, 33.0], [12.1, 33.0], [12.2, 33.0], [12.3, 34.0], [12.4, 34.0], [12.5, 34.0], [12.6, 34.0], [12.7, 34.0], [12.8, 34.0], [12.9, 34.0], [13.0, 34.0], [13.1, 34.0], [13.2, 34.0], [13.3, 34.0], [13.4, 34.0], [13.5, 34.0], [13.6, 34.0], [13.7, 34.0], [13.8, 34.0], [13.9, 34.0], [14.0, 34.0], [14.1, 34.0], [14.2, 35.0], [14.3, 35.0], [14.4, 35.0], [14.5, 35.0], [14.6, 35.0], [14.7, 35.0], [14.8, 35.0], [14.9, 35.0], [15.0, 35.0], [15.1, 35.0], [15.2, 35.0], [15.3, 35.0], [15.4, 35.0], [15.5, 35.0], [15.6, 36.0], [15.7, 36.0], [15.8, 36.0], [15.9, 36.0], [16.0, 36.0], [16.1, 36.0], [16.2, 36.0], [16.3, 36.0], [16.4, 36.0], [16.5, 36.0], [16.6, 36.0], [16.7, 37.0], [16.8, 37.0], [16.9, 37.0], [17.0, 37.0], [17.1, 37.0], [17.2, 37.0], [17.3, 37.0], [17.4, 37.0], [17.5, 37.0], [17.6, 38.0], [17.7, 38.0], [17.8, 38.0], [17.9, 38.0], [18.0, 38.0], [18.1, 38.0], [18.2, 38.0], [18.3, 38.0], [18.4, 39.0], [18.5, 39.0], [18.6, 39.0], [18.7, 39.0], [18.8, 39.0], [18.9, 40.0], [19.0, 40.0], [19.1, 40.0], [19.2, 40.0], [19.3, 41.0], [19.4, 41.0], [19.5, 41.0], [19.6, 41.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 43.0], [20.1, 43.0], [20.2, 44.0], [20.3, 44.0], [20.4, 45.0], [20.5, 45.0], [20.6, 45.0], [20.7, 46.0], [20.8, 46.0], [20.9, 47.0], [21.0, 47.0], [21.1, 47.0], [21.2, 47.0], [21.3, 47.0], [21.4, 47.0], [21.5, 47.0], [21.6, 47.0], [21.7, 47.0], [21.8, 48.0], [21.9, 48.0], [22.0, 48.0], [22.1, 48.0], [22.2, 48.0], [22.3, 48.0], [22.4, 48.0], [22.5, 48.0], [22.6, 48.0], [22.7, 48.0], [22.8, 48.0], [22.9, 48.0], [23.0, 48.0], [23.1, 48.0], [23.2, 48.0], [23.3, 48.0], [23.4, 48.0], [23.5, 48.0], [23.6, 48.0], [23.7, 48.0], [23.8, 48.0], [23.9, 48.0], [24.0, 48.0], [24.1, 48.0], [24.2, 48.0], [24.3, 48.0], [24.4, 48.0], [24.5, 48.0], [24.6, 48.0], [24.7, 48.0], [24.8, 48.0], [24.9, 48.0], [25.0, 48.0], [25.1, 48.0], [25.2, 48.0], [25.3, 48.0], [25.4, 48.0], [25.5, 48.0], [25.6, 48.0], [25.7, 48.0], [25.8, 48.0], [25.9, 48.0], [26.0, 48.0], [26.1, 48.0], [26.2, 48.0], [26.3, 48.0], [26.4, 48.0], [26.5, 49.0], [26.6, 49.0], [26.7, 49.0], [26.8, 49.0], [26.9, 49.0], [27.0, 49.0], [27.1, 49.0], [27.2, 49.0], [27.3, 49.0], [27.4, 49.0], [27.5, 49.0], [27.6, 49.0], [27.7, 49.0], [27.8, 49.0], [27.9, 49.0], [28.0, 49.0], [28.1, 49.0], [28.2, 49.0], [28.3, 49.0], [28.4, 49.0], [28.5, 49.0], [28.6, 49.0], [28.7, 49.0], [28.8, 49.0], [28.9, 49.0], [29.0, 49.0], [29.1, 49.0], [29.2, 49.0], [29.3, 49.0], [29.4, 49.0], [29.5, 49.0], [29.6, 49.0], [29.7, 49.0], [29.8, 49.0], [29.9, 49.0], [30.0, 49.0], [30.1, 49.0], [30.2, 49.0], [30.3, 49.0], [30.4, 49.0], [30.5, 49.0], [30.6, 49.0], [30.7, 49.0], [30.8, 49.0], [30.9, 49.0], [31.0, 49.0], [31.1, 49.0], [31.2, 49.0], [31.3, 49.0], [31.4, 49.0], [31.5, 49.0], [31.6, 49.0], [31.7, 49.0], [31.8, 49.0], [31.9, 49.0], [32.0, 49.0], [32.1, 49.0], [32.2, 49.0], [32.3, 49.0], [32.4, 49.0], [32.5, 49.0], [32.6, 49.0], [32.7, 49.0], [32.8, 49.0], [32.9, 49.0], [33.0, 49.0], [33.1, 49.0], [33.2, 49.0], [33.3, 49.0], [33.4, 49.0], [33.5, 49.0], [33.6, 49.0], [33.7, 49.0], [33.8, 49.0], [33.9, 49.0], [34.0, 49.0], [34.1, 49.0], [34.2, 49.0], [34.3, 49.0], [34.4, 49.0], [34.5, 49.0], [34.6, 49.0], [34.7, 49.0], [34.8, 49.0], [34.9, 49.0], [35.0, 49.0], [35.1, 49.0], [35.2, 49.0], [35.3, 49.0], [35.4, 49.0], [35.5, 49.0], [35.6, 49.0], [35.7, 49.0], [35.8, 49.0], [35.9, 49.0], [36.0, 49.0], [36.1, 49.0], [36.2, 49.0], [36.3, 50.0], [36.4, 50.0], [36.5, 50.0], [36.6, 50.0], [36.7, 50.0], [36.8, 50.0], [36.9, 50.0], [37.0, 50.0], [37.1, 50.0], [37.2, 50.0], [37.3, 50.0], [37.4, 50.0], [37.5, 50.0], [37.6, 50.0], [37.7, 50.0], [37.8, 50.0], [37.9, 50.0], [38.0, 50.0], [38.1, 50.0], [38.2, 50.0], [38.3, 50.0], [38.4, 50.0], [38.5, 50.0], [38.6, 50.0], [38.7, 50.0], [38.8, 50.0], [38.9, 50.0], [39.0, 50.0], [39.1, 50.0], [39.2, 50.0], [39.3, 50.0], [39.4, 50.0], [39.5, 50.0], [39.6, 50.0], [39.7, 50.0], [39.8, 50.0], [39.9, 50.0], [40.0, 50.0], [40.1, 50.0], [40.2, 50.0], [40.3, 50.0], [40.4, 50.0], [40.5, 50.0], [40.6, 50.0], [40.7, 50.0], [40.8, 50.0], [40.9, 50.0], [41.0, 50.0], [41.1, 50.0], [41.2, 50.0], [41.3, 50.0], [41.4, 50.0], [41.5, 50.0], [41.6, 50.0], [41.7, 50.0], [41.8, 50.0], [41.9, 50.0], [42.0, 50.0], [42.1, 50.0], [42.2, 50.0], [42.3, 50.0], [42.4, 50.0], [42.5, 50.0], [42.6, 50.0], [42.7, 50.0], [42.8, 50.0], [42.9, 50.0], [43.0, 50.0], [43.1, 50.0], [43.2, 50.0], [43.3, 50.0], [43.4, 50.0], [43.5, 50.0], [43.6, 50.0], [43.7, 50.0], [43.8, 50.0], [43.9, 50.0], [44.0, 50.0], [44.1, 50.0], [44.2, 50.0], [44.3, 50.0], [44.4, 50.0], [44.5, 50.0], [44.6, 50.0], [44.7, 50.0], [44.8, 50.0], [44.9, 50.0], [45.0, 50.0], [45.1, 50.0], [45.2, 50.0], [45.3, 51.0], [45.4, 51.0], [45.5, 51.0], [45.6, 51.0], [45.7, 51.0], [45.8, 51.0], [45.9, 51.0], [46.0, 51.0], [46.1, 51.0], [46.2, 51.0], [46.3, 51.0], [46.4, 51.0], [46.5, 51.0], [46.6, 51.0], [46.7, 51.0], [46.8, 51.0], [46.9, 51.0], [47.0, 51.0], [47.1, 51.0], [47.2, 51.0], [47.3, 51.0], [47.4, 51.0], [47.5, 51.0], [47.6, 51.0], [47.7, 51.0], [47.8, 51.0], [47.9, 51.0], [48.0, 51.0], [48.1, 51.0], [48.2, 51.0], [48.3, 51.0], [48.4, 51.0], [48.5, 51.0], [48.6, 51.0], [48.7, 51.0], [48.8, 51.0], [48.9, 51.0], [49.0, 51.0], [49.1, 51.0], [49.2, 51.0], [49.3, 51.0], [49.4, 51.0], [49.5, 51.0], [49.6, 51.0], [49.7, 51.0], [49.8, 51.0], [49.9, 51.0], [50.0, 51.0], [50.1, 51.0], [50.2, 51.0], [50.3, 51.0], [50.4, 51.0], [50.5, 51.0], [50.6, 51.0], [50.7, 51.0], [50.8, 51.0], [50.9, 51.0], [51.0, 51.0], [51.1, 52.0], [51.2, 52.0], [51.3, 52.0], [51.4, 52.0], [51.5, 52.0], [51.6, 52.0], [51.7, 52.0], [51.8, 52.0], [51.9, 52.0], [52.0, 52.0], [52.1, 52.0], [52.2, 52.0], [52.3, 52.0], [52.4, 52.0], [52.5, 52.0], [52.6, 52.0], [52.7, 52.0], [52.8, 52.0], [52.9, 52.0], [53.0, 52.0], [53.1, 52.0], [53.2, 52.0], [53.3, 52.0], [53.4, 52.0], [53.5, 52.0], [53.6, 52.0], [53.7, 52.0], [53.8, 52.0], [53.9, 52.0], [54.0, 52.0], [54.1, 52.0], [54.2, 52.0], [54.3, 52.0], [54.4, 52.0], [54.5, 52.0], [54.6, 52.0], [54.7, 52.0], [54.8, 52.0], [54.9, 52.0], [55.0, 52.0], [55.1, 52.0], [55.2, 52.0], [55.3, 52.0], [55.4, 52.0], [55.5, 53.0], [55.6, 53.0], [55.7, 53.0], [55.8, 53.0], [55.9, 53.0], [56.0, 53.0], [56.1, 53.0], [56.2, 53.0], [56.3, 53.0], [56.4, 53.0], [56.5, 53.0], [56.6, 53.0], [56.7, 53.0], [56.8, 53.0], [56.9, 53.0], [57.0, 53.0], [57.1, 53.0], [57.2, 53.0], [57.3, 53.0], [57.4, 53.0], [57.5, 53.0], [57.6, 53.0], [57.7, 53.0], [57.8, 53.0], [57.9, 53.0], [58.0, 53.0], [58.1, 53.0], [58.2, 53.0], [58.3, 53.0], [58.4, 53.0], [58.5, 53.0], [58.6, 53.0], [58.7, 53.0], [58.8, 53.0], [58.9, 53.0], [59.0, 53.0], [59.1, 53.0], [59.2, 54.0], [59.3, 54.0], [59.4, 54.0], [59.5, 54.0], [59.6, 54.0], [59.7, 54.0], [59.8, 54.0], [59.9, 54.0], [60.0, 54.0], [60.1, 54.0], [60.2, 54.0], [60.3, 54.0], [60.4, 54.0], [60.5, 54.0], [60.6, 54.0], [60.7, 54.0], [60.8, 54.0], [60.9, 54.0], [61.0, 54.0], [61.1, 54.0], [61.2, 54.0], [61.3, 54.0], [61.4, 54.0], [61.5, 54.0], [61.6, 54.0], [61.7, 54.0], [61.8, 54.0], [61.9, 54.0], [62.0, 54.0], [62.1, 54.0], [62.2, 54.0], [62.3, 54.0], [62.4, 54.0], [62.5, 55.0], [62.6, 55.0], [62.7, 55.0], [62.8, 55.0], [62.9, 55.0], [63.0, 55.0], [63.1, 55.0], [63.2, 55.0], [63.3, 55.0], [63.4, 55.0], [63.5, 55.0], [63.6, 55.0], [63.7, 55.0], [63.8, 55.0], [63.9, 55.0], [64.0, 55.0], [64.1, 55.0], [64.2, 55.0], [64.3, 55.0], [64.4, 55.0], [64.5, 55.0], [64.6, 55.0], [64.7, 55.0], [64.8, 55.0], [64.9, 55.0], [65.0, 55.0], [65.1, 55.0], [65.2, 55.0], [65.3, 55.0], [65.4, 55.0], [65.5, 55.0], [65.6, 56.0], [65.7, 56.0], [65.8, 56.0], [65.9, 56.0], [66.0, 56.0], [66.1, 56.0], [66.2, 56.0], [66.3, 56.0], [66.4, 56.0], [66.5, 56.0], [66.6, 56.0], [66.7, 56.0], [66.8, 56.0], [66.9, 56.0], [67.0, 56.0], [67.1, 56.0], [67.2, 56.0], [67.3, 56.0], [67.4, 56.0], [67.5, 56.0], [67.6, 56.0], [67.7, 56.0], [67.8, 56.0], [67.9, 56.0], [68.0, 56.0], [68.1, 56.0], [68.2, 57.0], [68.3, 57.0], [68.4, 57.0], [68.5, 57.0], [68.6, 57.0], [68.7, 57.0], [68.8, 57.0], [68.9, 57.0], [69.0, 57.0], [69.1, 57.0], [69.2, 57.0], [69.3, 57.0], [69.4, 57.0], [69.5, 57.0], [69.6, 57.0], [69.7, 57.0], [69.8, 57.0], [69.9, 57.0], [70.0, 57.0], [70.1, 57.0], [70.2, 57.0], [70.3, 57.0], [70.4, 58.0], [70.5, 58.0], [70.6, 58.0], [70.7, 58.0], [70.8, 58.0], [70.9, 58.0], [71.0, 58.0], [71.1, 58.0], [71.2, 58.0], [71.3, 58.0], [71.4, 58.0], [71.5, 58.0], [71.6, 58.0], [71.7, 58.0], [71.8, 58.0], [71.9, 58.0], [72.0, 58.0], [72.1, 58.0], [72.2, 58.0], [72.3, 59.0], [72.4, 59.0], [72.5, 59.0], [72.6, 59.0], [72.7, 59.0], [72.8, 59.0], [72.9, 59.0], [73.0, 59.0], [73.1, 59.0], [73.2, 59.0], [73.3, 59.0], [73.4, 59.0], [73.5, 59.0], [73.6, 59.0], [73.7, 60.0], [73.8, 60.0], [73.9, 60.0], [74.0, 60.0], [74.1, 60.0], [74.2, 60.0], [74.3, 60.0], [74.4, 60.0], [74.5, 60.0], [74.6, 60.0], [74.7, 60.0], [74.8, 61.0], [74.9, 61.0], [75.0, 61.0], [75.1, 61.0], [75.2, 61.0], [75.3, 61.0], [75.4, 61.0], [75.5, 61.0], [75.6, 62.0], [75.7, 62.0], [75.8, 62.0], [75.9, 62.0], [76.0, 62.0], [76.1, 62.0], [76.2, 63.0], [76.3, 63.0], [76.4, 63.0], [76.5, 63.0], [76.6, 64.0], [76.7, 64.0], [76.8, 64.0], [76.9, 65.0], [77.0, 65.0], [77.1, 65.0], [77.2, 65.0], [77.3, 66.0], [77.4, 66.0], [77.5, 66.0], [77.6, 66.0], [77.7, 66.0], [77.8, 66.0], [77.9, 67.0], [78.0, 67.0], [78.1, 67.0], [78.2, 67.0], [78.3, 67.0], [78.4, 67.0], [78.5, 67.0], [78.6, 67.0], [78.7, 67.0], [78.8, 67.0], [78.9, 67.0], [79.0, 67.0], [79.1, 67.0], [79.2, 68.0], [79.3, 68.0], [79.4, 68.0], [79.5, 68.0], [79.6, 68.0], [79.7, 68.0], [79.8, 68.0], [79.9, 68.0], [80.0, 68.0], [80.1, 68.0], [80.2, 68.0], [80.3, 68.0], [80.4, 68.0], [80.5, 68.0], [80.6, 68.0], [80.7, 69.0], [80.8, 69.0], [80.9, 69.0], [81.0, 69.0], [81.1, 69.0], [81.2, 69.0], [81.3, 69.0], [81.4, 69.0], [81.5, 69.0], [81.6, 69.0], [81.7, 69.0], [81.8, 69.0], [81.9, 69.0], [82.0, 69.0], [82.1, 70.0], [82.2, 70.0], [82.3, 70.0], [82.4, 70.0], [82.5, 70.0], [82.6, 70.0], [82.7, 70.0], [82.8, 70.0], [82.9, 70.0], [83.0, 71.0], [83.1, 71.0], [83.2, 71.0], [83.3, 71.0], [83.4, 71.0], [83.5, 71.0], [83.6, 71.0], [83.7, 71.0], [83.8, 72.0], [83.9, 72.0], [84.0, 72.0], [84.1, 72.0], [84.2, 72.0], [84.3, 72.0], [84.4, 72.0], [84.5, 72.0], [84.6, 73.0], [84.7, 73.0], [84.8, 73.0], [84.9, 73.0], [85.0, 73.0], [85.1, 73.0], [85.2, 73.0], [85.3, 73.0], [85.4, 74.0], [85.5, 74.0], [85.6, 74.0], [85.7, 74.0], [85.8, 74.0], [85.9, 74.0], [86.0, 74.0], [86.1, 74.0], [86.2, 75.0], [86.3, 75.0], [86.4, 75.0], [86.5, 75.0], [86.6, 75.0], [86.7, 75.0], [86.8, 75.0], [86.9, 76.0], [87.0, 76.0], [87.1, 76.0], [87.2, 76.0], [87.3, 76.0], [87.4, 76.0], [87.5, 76.0], [87.6, 76.0], [87.7, 77.0], [87.8, 77.0], [87.9, 77.0], [88.0, 77.0], [88.1, 77.0], [88.2, 77.0], [88.3, 78.0], [88.4, 78.0], [88.5, 78.0], [88.6, 78.0], [88.7, 78.0], [88.8, 79.0], [88.9, 79.0], [89.0, 79.0], [89.1, 79.0], [89.2, 79.0], [89.3, 80.0], [89.4, 80.0], [89.5, 80.0], [89.6, 80.0], [89.7, 80.0], [89.8, 81.0], [89.9, 81.0], [90.0, 81.0], [90.1, 82.0], [90.2, 82.0], [90.3, 82.0], [90.4, 83.0], [90.5, 83.0], [90.6, 83.0], [90.7, 84.0], [90.8, 84.0], [90.9, 84.0], [91.0, 85.0], [91.1, 85.0], [91.2, 85.0], [91.3, 86.0], [91.4, 86.0], [91.5, 86.0], [91.6, 86.0], [91.7, 87.0], [91.8, 87.0], [91.9, 87.0], [92.0, 88.0], [92.1, 88.0], [92.2, 88.0], [92.3, 89.0], [92.4, 89.0], [92.5, 89.0], [92.6, 90.0], [92.7, 90.0], [92.8, 91.0], [92.9, 91.0], [93.0, 92.0], [93.1, 92.0], [93.2, 93.0], [93.3, 93.0], [93.4, 93.0], [93.5, 94.0], [93.6, 94.0], [93.7, 94.0], [93.8, 95.0], [93.9, 95.0], [94.0, 96.0], [94.1, 96.0], [94.2, 96.0], [94.3, 97.0], [94.4, 97.0], [94.5, 98.0], [94.6, 98.0], [94.7, 99.0], [94.8, 99.0], [94.9, 99.0], [95.0, 100.0], [95.1, 100.0], [95.2, 101.0], [95.3, 101.0], [95.4, 102.0], [95.5, 102.0], [95.6, 103.0], [95.7, 103.0], [95.8, 104.0], [95.9, 104.0], [96.0, 105.0], [96.1, 106.0], [96.2, 106.0], [96.3, 107.0], [96.4, 109.0], [96.5, 110.0], [96.6, 111.0], [96.7, 112.0], [96.8, 114.0], [96.9, 115.0], [97.0, 116.0], [97.1, 117.0], [97.2, 118.0], [97.3, 119.0], [97.4, 121.0], [97.5, 122.0], [97.6, 124.0], [97.7, 126.0], [97.8, 127.0], [97.9, 129.0], [98.0, 132.0], [98.1, 135.0], [98.2, 138.0], [98.3, 141.0], [98.4, 144.0], [98.5, 148.0], [98.6, 152.0], [98.7, 158.0], [98.8, 165.0], [98.9, 174.0], [99.0, 183.0], [99.1, 193.0], [99.2, 208.0], [99.3, 226.0], [99.4, 248.0], [99.5, 276.0], [99.6, 313.0], [99.7, 370.0], [99.8, 451.0], [99.9, 584.0], [100.0, 1548.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 569823.0, "series": [{"data": [[0.0, 569823.0], [600.0, 230.0], [700.0, 169.0], [800.0, 72.0], [200.0, 2539.0], [900.0, 36.0], [1000.0, 16.0], [1100.0, 9.0], [300.0, 1000.0], [1200.0, 5.0], [1300.0, 4.0], [1400.0, 1.0], [1500.0, 1.0], [400.0, 586.0], [100.0, 25061.0], [500.0, 448.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 599010.0, "series": [{"data": [[0.0, 599010.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 989.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 494.5946628506927, "minX": 1.64975304E12, "maxY": 499.96438171604325, "series": [{"data": [[1.6497531E12, 494.5946628506927], [1.64975304E12, 499.96438171604325]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497531E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.9285714285714286, "minX": 1.0, "maxY": 673.0, "series": [{"data": [[2.0, 0.9285714285714286], [3.0, 1.0000000000000002], [4.0, 1.058823529411765], [6.0, 1.7500000000000002], [7.0, 1.6666666666666667], [8.0, 1.0], [9.0, 1.5], [10.0, 2.6666666666666665], [11.0, 2.285714285714286], [12.0, 2.0], [13.0, 2.25], [14.0, 3.0], [15.0, 3.0], [16.0, 3.0], [17.0, 3.0], [18.0, 3.625], [19.0, 4.0], [20.0, 5.25], [22.0, 4.428571428571429], [23.0, 13.0], [24.0, 3.142857142857143], [25.0, 3.8333333333333335], [26.0, 3.0], [27.0, 3.75], [28.0, 3.0], [29.0, 7.4], [30.0, 2.0], [31.0, 5.641025641025641], [33.0, 5.235294117647059], [32.0, 4.666666666666667], [35.0, 5.428571428571429], [34.0, 5.882352941176471], [37.0, 10.0], [39.0, 8.0], [38.0, 8.5], [41.0, 3.3333333333333335], [40.0, 9.833333333333334], [43.0, 7.333333333333333], [42.0, 2.0], [45.0, 13.333333333333334], [44.0, 7.5], [47.0, 6.333333333333333], [49.0, 8.529411764705882], [48.0, 8.6], [51.0, 9.142857142857142], [50.0, 6.0], [53.0, 8.357142857142858], [52.0, 14.0], [55.0, 9.61111111111111], [54.0, 9.777777777777779], [57.0, 9.909090909090908], [56.0, 9.0], [59.0, 8.285714285714285], [58.0, 10.0], [61.0, 14.333333333333334], [60.0, 4.666666666666666], [63.0, 10.181818181818182], [62.0, 10.700000000000001], [67.0, 4.0], [66.0, 9.9], [64.0, 11.08], [71.0, 12.0], [70.0, 12.0], [69.0, 12.117647058823529], [68.0, 12.0], [75.0, 15.249999999999998], [74.0, 8.5], [73.0, 20.41666666666667], [79.0, 15.818181818181818], [78.0, 20.0], [77.0, 16.4], [76.0, 9.333333333333334], [83.0, 16.3], [82.0, 22.928571428571427], [81.0, 2.0], [80.0, 20.5], [87.0, 13.0], [86.0, 11.333333333333334], [85.0, 21.5], [84.0, 18.0], [91.0, 59.0], [90.0, 14.909090909090912], [89.0, 8.857142857142858], [88.0, 25.0], [95.0, 2.0], [94.0, 16.555555555555557], [93.0, 12.75], [92.0, 14.333333333333332], [99.0, 16.857142857142854], [98.0, 27.88888888888889], [97.0, 23.166666666666668], [96.0, 16.95], [103.0, 46.0], [102.0, 22.5], [100.0, 12.5], [107.0, 17.5], [106.0, 8.0], [105.0, 30.166666666666664], [104.0, 14.499999999999998], [111.0, 25.8], [110.0, 2.0], [109.0, 9.0], [108.0, 18.6], [115.0, 10.600000000000001], [114.0, 27.75], [113.0, 11.666666666666666], [112.0, 16.000000000000004], [119.0, 8.0], [118.0, 26.8], [117.0, 16.142857142857142], [116.0, 40.58333333333333], [123.0, 25.461538461538463], [122.0, 20.61538461538462], [121.0, 17.78571428571428], [120.0, 30.0], [127.0, 16.300000000000004], [126.0, 15.75], [125.0, 11.666666666666666], [124.0, 19.0], [135.0, 16.307692307692307], [134.0, 18.833333333333332], [133.0, 17.444444444444446], [131.0, 11.0], [130.0, 15.500000000000002], [129.0, 24.583333333333332], [128.0, 49.33333333333333], [142.0, 21.857142857142858], [141.0, 17.799999999999997], [140.0, 30.916666666666668], [139.0, 16.25], [138.0, 32.0], [137.0, 37.5], [136.0, 7.25], [151.0, 15.0], [150.0, 26.5], [149.0, 23.77777777777778], [148.0, 27.500000000000004], [146.0, 15.6], [145.0, 21.4], [144.0, 21.333333333333336], [159.0, 26.642857142857142], [158.0, 21.117647058823533], [157.0, 22.0], [156.0, 15.307692307692308], [155.0, 18.666666666666668], [154.0, 20.78260869565218], [153.0, 10.5], [152.0, 19.22222222222222], [167.0, 20.25], [166.0, 56.333333333333336], [165.0, 26.0625], [164.0, 29.666666666666668], [163.0, 17.25], [162.0, 34.666666666666664], [161.0, 35.0], [160.0, 31.499999999999996], [175.0, 25.333333333333336], [174.0, 21.69230769230769], [173.0, 23.078947368421055], [172.0, 20.75], [171.0, 23.555555555555557], [169.0, 34.0], [168.0, 12.0], [183.0, 26.499999999999996], [182.0, 37.5], [181.0, 30.733333333333338], [180.0, 27.08333333333333], [179.0, 23.125], [178.0, 1.3333333333333333], [177.0, 13.428571428571429], [176.0, 22.0], [191.0, 38.38461538461538], [190.0, 30.583333333333332], [189.0, 25.069767441860463], [188.0, 31.157894736842106], [187.0, 11.6], [186.0, 25.42105263157895], [185.0, 52.0], [184.0, 29.29411764705883], [198.0, 29.444444444444443], [197.0, 32.23076923076923], [196.0, 29.555555555555557], [195.0, 52.0], [193.0, 1.5], [192.0, 26.0], [207.0, 20.75], [206.0, 23.571428571428573], [205.0, 2.5], [204.0, 35.26666666666666], [203.0, 36.10526315789474], [202.0, 30.928571428571427], [201.0, 25.521739130434785], [200.0, 23.142857142857146], [215.0, 3.0], [214.0, 27.799999999999997], [213.0, 21.045454545454547], [212.0, 72.0], [211.0, 33.0], [210.0, 32.75], [209.0, 32.800000000000004], [208.0, 26.65384615384615], [223.0, 44.57142857142858], [222.0, 26.999999999999993], [221.0, 39.75], [220.0, 4.0], [219.0, 36.25], [217.0, 23.53333333333333], [216.0, 9.25], [231.0, 19.41935483870968], [230.0, 27.698113207547173], [229.0, 4.0], [228.0, 17.416666666666664], [227.0, 20.555555555555557], [226.0, 17.0], [225.0, 17.5], [224.0, 17.0], [239.0, 20.8], [238.0, 25.0], [237.0, 23.692307692307693], [236.0, 33.1], [235.0, 32.8], [234.0, 30.333333333333332], [233.0, 27.75], [232.0, 6.0], [247.0, 21.142857142857146], [246.0, 27.08888888888888], [245.0, 25.0], [244.0, 18.333333333333332], [243.0, 21.64285714285714], [242.0, 29.333333333333332], [241.0, 34.42857142857143], [240.0, 23.4], [255.0, 12.772727272727273], [254.0, 16.818181818181817], [253.0, 12.86666666666667], [252.0, 23.25], [251.0, 19.636363636363637], [250.0, 19.0], [249.0, 18.0], [248.0, 22.0], [270.0, 50.58333333333333], [271.0, 10.23076923076923], [269.0, 29.91666666666667], [268.0, 48.95], [267.0, 31.29999999999999], [266.0, 33.7391304347826], [265.0, 67.33333333333334], [264.0, 57.45], [262.0, 48.66666666666667], [259.0, 60.85714285714287], [258.0, 98.81249999999999], [257.0, 73.65], [261.0, 61.26315789473684], [286.0, 50.75], [287.0, 55.0], [285.0, 35.18181818181819], [284.0, 45.5], [283.0, 9.571428571428571], [282.0, 4.181818181818182], [281.0, 9.44186046511628], [280.0, 49.631578947368425], [279.0, 38.17187500000001], [273.0, 58.66666666666667], [272.0, 59.70000000000002], [275.0, 44.28571428571429], [274.0, 77.79166666666666], [278.0, 42.45833333333335], [276.0, 73.0], [302.0, 92.0], [303.0, 40.2], [300.0, 37.16666666666667], [291.0, 40.91666666666667], [290.0, 56.82608695652174], [289.0, 53.33333333333333], [288.0, 58.5], [298.0, 39.46875], [297.0, 35.83333333333334], [296.0, 27.285714285714285], [295.0, 38.0], [294.0, 34.285714285714285], [293.0, 31.432432432432435], [292.0, 40.424242424242415], [318.0, 42.73333333333333], [319.0, 70.0], [317.0, 40.52173913043478], [316.0, 41.0], [315.0, 23.333333333333336], [313.0, 57.8235294117647], [312.0, 38.0], [311.0, 53.08695652173913], [305.0, 43.23809523809524], [304.0, 45.83720930232558], [307.0, 66.0], [306.0, 42.07692307692308], [310.0, 44.465116279069754], [309.0, 29.0], [308.0, 39.61999999999999], [334.0, 37.333333333333336], [333.0, 59.0], [322.0, 48.15384615384615], [321.0, 58.72340425531913], [320.0, 37.68421052631579], [331.0, 56.416666666666664], [330.0, 47.118644067796616], [329.0, 29.83333333333333], [328.0, 56.47222222222223], [327.0, 37.25000000000001], [326.0, 53.25000000000001], [325.0, 40.714285714285715], [324.0, 30.75], [350.0, 46.777777777777786], [351.0, 47.142857142857146], [349.0, 51.333333333333336], [348.0, 37.80952380952381], [347.0, 47.124999999999986], [346.0, 67.0], [345.0, 37.25925925925926], [344.0, 37.050000000000004], [343.0, 39.0], [337.0, 51.8], [336.0, 51.28571428571429], [339.0, 52.45454545454546], [338.0, 48.57142857142858], [342.0, 58.6], [341.0, 48.0], [340.0, 49.69230769230768], [366.0, 38.714285714285715], [367.0, 40.5], [365.0, 51.0], [364.0, 45.66666666666667], [363.0, 48.87179487179488], [362.0, 42.75], [361.0, 60.5], [359.0, 24.0], [353.0, 46.56896551724137], [352.0, 52.055555555555564], [355.0, 74.0], [354.0, 47.07692307692307], [358.0, 35.78571428571428], [357.0, 49.24999999999999], [356.0, 56.09090909090909], [381.0, 54.400000000000006], [383.0, 54.8235294117647], [380.0, 55.0625], [371.0, 44.733333333333334], [370.0, 43.34375000000001], [369.0, 46.63636363636363], [368.0, 46.44444444444444], [379.0, 51.363636363636374], [377.0, 40.666666666666664], [376.0, 51.839999999999996], [375.0, 38.93750000000001], [374.0, 38.55555555555556], [373.0, 46.857142857142854], [372.0, 38.714285714285715], [398.0, 54.80000000000001], [399.0, 42.16666666666667], [397.0, 48.270833333333336], [396.0, 49.971428571428575], [395.0, 40.87837837837837], [394.0, 40.0], [393.0, 58.25], [392.0, 38.6], [391.0, 38.699999999999996], [385.0, 58.72727272727272], [384.0, 51.21621621621622], [387.0, 53.4], [386.0, 51.558823529411775], [390.0, 44.90625], [389.0, 48.65000000000002], [388.0, 35.8], [413.0, 204.86956521739125], [404.0, 156.4827586206897], [407.0, 78.22727272727272], [409.0, 317.66666666666663], [408.0, 42.42857142857143], [410.0, 140.6153846153846], [411.0, 59.95890410958904], [412.0, 104.875], [403.0, 48.58333333333333], [402.0, 55.29166666666667], [401.0, 40.4], [400.0, 46.51063829787233], [405.0, 63.35897435897438], [406.0, 82.41666666666669], [414.0, 93.36363636363636], [415.0, 42.95], [428.0, 97.67999999999999], [418.0, 75.70588235294119], [419.0, 74.58333333333331], [421.0, 119.3913043478261], [420.0, 41.5], [422.0, 92.19354838709677], [423.0, 193.05], [417.0, 35.0], [416.0, 51.5], [425.0, 63.15909090909091], [426.0, 62.85611510791364], [427.0, 97.52631578947367], [429.0, 114.35849056603774], [431.0, 187.31250000000003], [424.0, 44.80180180180181], [430.0, 48.705882352941174], [432.0, 73.49295774647887], [435.0, 58.08695652173913], [434.0, 40.0], [433.0, 48.086956521739125], [436.0, 183.5], [437.0, 71.09756097560972], [438.0, 98.65624999999996], [439.0, 125.15151515151518], [440.0, 111.11764705882354], [443.0, 103.61904761904763], [442.0, 47.71794871794872], [441.0, 54.519999999999996], [444.0, 120.82926829268297], [446.0, 337.0833333333333], [445.0, 57.170454545454525], [447.0, 66.17073170731706], [461.0, 54.374100719424455], [448.0, 60.1449275362319], [451.0, 673.0], [450.0, 47.31578947368421], [449.0, 51.03007518796995], [460.0, 49.77777777777778], [453.0, 117.74193548387098], [452.0, 50.4], [454.0, 152.95238095238096], [455.0, 46.46296296296297], [457.0, 55.55223880597015], [458.0, 74.24999999999999], [459.0, 48.46153846153846], [462.0, 58.30693069306929], [463.0, 131.72916666666663], [456.0, 49.59090909090909], [465.0, 156.72222222222214], [464.0, 62.68888888888888], [466.0, 70.80000000000001], [467.0, 107.34920634920637], [468.0, 68.0909090909091], [469.0, 149.58823529411765], [470.0, 57.15384615384615], [471.0, 48.0], [477.0, 63.1111111111111], [476.0, 54.05555555555556], [478.0, 90.8837209302326], [479.0, 56.05063291139241], [473.0, 56.881818181818204], [472.0, 59.833333333333336], [475.0, 57.72972972972973], [474.0, 55.03508771929827], [480.0, 69.75], [481.0, 76.07692307692308], [483.0, 48.87735849056603], [482.0, 44.69230769230769], [492.0, 56.58321060382919], [493.0, 81.44444444444443], [495.0, 69.05747126436783], [494.0, 69.66263736263737], [484.0, 59.68493150684931], [485.0, 43.46449704142012], [486.0, 64.30337078651688], [487.0, 65.1210191082803], [488.0, 148.11111111111114], [489.0, 52.64516129032259], [490.0, 51.91397849462363], [491.0, 51.31896551724136], [498.0, 54.54018227009115], [499.0, 49.4583333333333], [500.0, 58.42468863551915], [497.0, 50.83059636992231], [496.0, 59.983818770226506], [1.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[497.33139833333087, 58.29892500000045]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 979208.8333333334, "minX": 1.64975304E12, "maxY": 1320028.0333333334, "series": [{"data": [[1.6497531E12, 979208.8333333334], [1.64975304E12, 1016039.4166666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6497531E12, 1269971.9666666666], [1.64975304E12, 1320028.0333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497531E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 52.97322587881613, "minX": 1.64975304E12, "maxY": 63.42267117508842, "series": [{"data": [[1.6497531E12, 52.97322587881613], [1.64975304E12, 63.42267117508842]], "isOverall": false, "label": "HTTP Request POST", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497531E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 52.94821245266831, "minX": 1.64975304E12, "maxY": 63.383629062323756, "series": [{"data": [[1.6497531E12, 52.94821245266831], [1.64975304E12, 63.383629062323756]], "isOverall": false, "label": "HTTP Request POST", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497531E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0010502987743115598, "minX": 1.64975304E12, "maxY": 0.006049745256672529, "series": [{"data": [[1.6497531E12, 0.0010502987743115598], [1.64975304E12, 0.006049745256672529]], "isOverall": false, "label": "HTTP Request POST", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497531E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64975304E12, "maxY": 1548.0, "series": [{"data": [[1.6497531E12, 264.0], [1.64975304E12, 1548.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6497531E12, 74.0], [1.64975304E12, 72.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6497531E12, 119.0], [1.64975304E12, 102.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6497531E12, 89.0], [1.64975304E12, 78.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6497531E12, 0.0], [1.64975304E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6497531E12, 49.0], [1.64975304E12, 51.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497531E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 471.0, "maxY": 552.0, "series": [{"data": [[1067.0, 483.0], [2462.0, 184.0], [3578.0, 111.0], [3621.0, 104.0], [3841.0, 109.0], [4374.0, 23.0], [5704.0, 74.0], [6120.0, 69.0], [6327.0, 71.0], [7284.0, 61.0], [7545.0, 56.0], [7589.0, 59.0], [8577.0, 57.0], [8417.0, 50.0], [8693.0, 51.0], [8657.0, 50.0], [9122.0, 52.0], [8868.0, 55.0], [8867.0, 53.0], [9211.0, 50.0], [9037.0, 50.0], [9150.0, 54.0], [9134.0, 53.0], [9133.0, 51.0], [9002.0, 53.0], [9015.0, 52.0], [9063.0, 52.0], [9090.0, 55.0], [9091.0, 51.0], [9113.0, 50.0], [8872.0, 51.0], [8822.0, 50.0], [9279.0, 51.0], [9453.0, 51.0], [9459.0, 50.0], [9468.0, 51.0], [9270.0, 52.0], [9276.0, 50.0], [9272.0, 51.0], [9379.0, 53.0], [9369.0, 51.0], [9344.0, 51.0], [9526.0, 50.0], [9447.0, 51.0], [9446.0, 51.0], [9588.0, 51.0], [9547.0, 51.0], [9545.0, 51.0], [9543.0, 51.0], [9663.0, 50.0], [9706.0, 51.0], [9674.0, 50.0], [9698.0, 51.0], [9613.0, 50.0], [9288.0, 50.0], [9280.0, 51.0], [9316.0, 50.0], [9327.0, 50.0], [9604.0, 50.0], [9330.0, 52.0], [9607.0, 51.0], [9617.0, 51.0], [9642.0, 50.0], [9659.0, 51.0], [9656.0, 50.0], [9809.0, 50.0], [9749.0, 50.0], [9817.0, 50.0], [471.0, 552.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9817.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 471.0, "maxY": 552.0, "series": [{"data": [[1067.0, 483.0], [2462.0, 184.0], [3578.0, 111.0], [3621.0, 104.0], [3841.0, 108.0], [4374.0, 23.0], [5704.0, 74.0], [6120.0, 69.0], [6327.0, 71.0], [7284.0, 61.0], [7545.0, 56.0], [7589.0, 59.0], [8577.0, 57.0], [8417.0, 50.0], [8693.0, 51.0], [8657.0, 50.0], [9122.0, 52.0], [8868.0, 54.0], [8867.0, 53.0], [9211.0, 50.0], [9037.0, 50.0], [9150.0, 54.0], [9134.0, 53.0], [9133.0, 51.0], [9002.0, 53.0], [9015.0, 52.0], [9063.0, 52.0], [9090.0, 55.0], [9091.0, 51.0], [9113.0, 50.0], [8872.0, 51.0], [8822.0, 50.0], [9279.0, 51.0], [9453.0, 51.0], [9459.0, 50.0], [9468.0, 51.0], [9270.0, 52.0], [9276.0, 50.0], [9272.0, 51.0], [9379.0, 53.0], [9369.0, 51.0], [9344.0, 51.0], [9526.0, 50.0], [9447.0, 51.0], [9446.0, 51.0], [9588.0, 51.0], [9547.0, 51.0], [9545.0, 51.0], [9543.0, 51.0], [9663.0, 50.0], [9706.0, 51.0], [9674.0, 50.0], [9698.0, 51.0], [9613.0, 50.0], [9288.0, 50.0], [9280.0, 50.0], [9316.0, 50.0], [9327.0, 50.0], [9604.0, 50.0], [9330.0, 52.0], [9607.0, 51.0], [9617.0, 51.0], [9642.0, 50.0], [9659.0, 51.0], [9656.0, 50.0], [9809.0, 50.0], [9749.0, 50.0], [9817.0, 50.0], [471.0, 552.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9817.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4895.033333333334, "minX": 1.64975304E12, "maxY": 5104.966666666666, "series": [{"data": [[1.6497531E12, 4895.033333333334], [1.64975304E12, 5104.966666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497531E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4903.366666666667, "minX": 1.64975304E12, "maxY": 5096.633333333333, "series": [{"data": [[1.6497531E12, 4903.366666666667], [1.64975304E12, 5096.633333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6497531E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4903.366666666667, "minX": 1.64975304E12, "maxY": 5096.633333333333, "series": [{"data": [[1.6497531E12, 4903.366666666667], [1.64975304E12, 5096.633333333333]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497531E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4903.366666666667, "minX": 1.64975304E12, "maxY": 5096.633333333333, "series": [{"data": [[1.6497531E12, 4903.366666666667], [1.64975304E12, 5096.633333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6497531E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

