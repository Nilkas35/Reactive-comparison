/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 87.0, "series": [{"data": [[0.0, 0.0], [0.1, 36.0], [0.2, 37.0], [0.3, 37.0], [0.4, 37.0], [0.5, 37.0], [0.6, 37.0], [0.7, 37.0], [0.8, 37.0], [0.9, 37.0], [1.0, 37.0], [1.1, 37.0], [1.2, 37.0], [1.3, 37.0], [1.4, 37.0], [1.5, 37.0], [1.6, 37.0], [1.7, 37.0], [1.8, 37.0], [1.9, 37.0], [2.0, 37.0], [2.1, 37.0], [2.2, 37.0], [2.3, 37.0], [2.4, 37.0], [2.5, 37.0], [2.6, 37.0], [2.7, 37.0], [2.8, 37.0], [2.9, 37.0], [3.0, 37.0], [3.1, 37.0], [3.2, 37.0], [3.3, 37.0], [3.4, 37.0], [3.5, 37.0], [3.6, 37.0], [3.7, 37.0], [3.8, 37.0], [3.9, 37.0], [4.0, 37.0], [4.1, 37.0], [4.2, 37.0], [4.3, 37.0], [4.4, 37.0], [4.5, 37.0], [4.6, 37.0], [4.7, 37.0], [4.8, 37.0], [4.9, 37.0], [5.0, 37.0], [5.1, 37.0], [5.2, 37.0], [5.3, 37.0], [5.4, 37.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 37.0], [5.9, 37.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 37.0], [7.2, 37.0], [7.3, 37.0], [7.4, 37.0], [7.5, 37.0], [7.6, 37.0], [7.7, 37.0], [7.8, 37.0], [7.9, 37.0], [8.0, 37.0], [8.1, 37.0], [8.2, 37.0], [8.3, 37.0], [8.4, 37.0], [8.5, 37.0], [8.6, 37.0], [8.7, 37.0], [8.8, 37.0], [8.9, 37.0], [9.0, 37.0], [9.1, 37.0], [9.2, 37.0], [9.3, 37.0], [9.4, 37.0], [9.5, 37.0], [9.6, 37.0], [9.7, 37.0], [9.8, 37.0], [9.9, 37.0], [10.0, 37.0], [10.1, 37.0], [10.2, 37.0], [10.3, 37.0], [10.4, 37.0], [10.5, 37.0], [10.6, 37.0], [10.7, 37.0], [10.8, 37.0], [10.9, 37.0], [11.0, 37.0], [11.1, 37.0], [11.2, 37.0], [11.3, 37.0], [11.4, 37.0], [11.5, 37.0], [11.6, 37.0], [11.7, 37.0], [11.8, 37.0], [11.9, 37.0], [12.0, 37.0], [12.1, 37.0], [12.2, 37.0], [12.3, 37.0], [12.4, 37.0], [12.5, 37.0], [12.6, 37.0], [12.7, 37.0], [12.8, 37.0], [12.9, 37.0], [13.0, 37.0], [13.1, 37.0], [13.2, 37.0], [13.3, 37.0], [13.4, 37.0], [13.5, 37.0], [13.6, 37.0], [13.7, 37.0], [13.8, 37.0], [13.9, 37.0], [14.0, 37.0], [14.1, 37.0], [14.2, 37.0], [14.3, 37.0], [14.4, 37.0], [14.5, 37.0], [14.6, 37.0], [14.7, 37.0], [14.8, 37.0], [14.9, 37.0], [15.0, 37.0], [15.1, 37.0], [15.2, 37.0], [15.3, 37.0], [15.4, 37.0], [15.5, 37.0], [15.6, 37.0], [15.7, 37.0], [15.8, 37.0], [15.9, 37.0], [16.0, 37.0], [16.1, 37.0], [16.2, 37.0], [16.3, 37.0], [16.4, 37.0], [16.5, 37.0], [16.6, 37.0], [16.7, 37.0], [16.8, 37.0], [16.9, 37.0], [17.0, 37.0], [17.1, 37.0], [17.2, 37.0], [17.3, 37.0], [17.4, 37.0], [17.5, 37.0], [17.6, 37.0], [17.7, 37.0], [17.8, 37.0], [17.9, 37.0], [18.0, 37.0], [18.1, 37.0], [18.2, 37.0], [18.3, 37.0], [18.4, 37.0], [18.5, 37.0], [18.6, 37.0], [18.7, 37.0], [18.8, 38.0], [18.9, 38.0], [19.0, 38.0], [19.1, 38.0], [19.2, 38.0], [19.3, 38.0], [19.4, 38.0], [19.5, 38.0], [19.6, 38.0], [19.7, 38.0], [19.8, 38.0], [19.9, 38.0], [20.0, 38.0], [20.1, 38.0], [20.2, 38.0], [20.3, 38.0], [20.4, 38.0], [20.5, 38.0], [20.6, 38.0], [20.7, 38.0], [20.8, 38.0], [20.9, 38.0], [21.0, 38.0], [21.1, 38.0], [21.2, 38.0], [21.3, 38.0], [21.4, 38.0], [21.5, 38.0], [21.6, 38.0], [21.7, 38.0], [21.8, 38.0], [21.9, 38.0], [22.0, 38.0], [22.1, 38.0], [22.2, 38.0], [22.3, 38.0], [22.4, 38.0], [22.5, 38.0], [22.6, 38.0], [22.7, 38.0], [22.8, 38.0], [22.9, 38.0], [23.0, 38.0], [23.1, 38.0], [23.2, 38.0], [23.3, 38.0], [23.4, 38.0], [23.5, 38.0], [23.6, 38.0], [23.7, 38.0], [23.8, 38.0], [23.9, 38.0], [24.0, 38.0], [24.1, 38.0], [24.2, 38.0], [24.3, 38.0], [24.4, 38.0], [24.5, 38.0], [24.6, 38.0], [24.7, 38.0], [24.8, 38.0], [24.9, 38.0], [25.0, 38.0], [25.1, 38.0], [25.2, 38.0], [25.3, 38.0], [25.4, 38.0], [25.5, 38.0], [25.6, 38.0], [25.7, 38.0], [25.8, 38.0], [25.9, 38.0], [26.0, 38.0], [26.1, 38.0], [26.2, 38.0], [26.3, 38.0], [26.4, 38.0], [26.5, 38.0], [26.6, 38.0], [26.7, 38.0], [26.8, 38.0], [26.9, 38.0], [27.0, 38.0], [27.1, 38.0], [27.2, 38.0], [27.3, 38.0], [27.4, 38.0], [27.5, 38.0], [27.6, 38.0], [27.7, 38.0], [27.8, 38.0], [27.9, 38.0], [28.0, 38.0], [28.1, 38.0], [28.2, 38.0], [28.3, 38.0], [28.4, 38.0], [28.5, 38.0], [28.6, 38.0], [28.7, 38.0], [28.8, 38.0], [28.9, 38.0], [29.0, 38.0], [29.1, 38.0], [29.2, 38.0], [29.3, 38.0], [29.4, 38.0], [29.5, 38.0], [29.6, 38.0], [29.7, 38.0], [29.8, 38.0], [29.9, 38.0], [30.0, 38.0], [30.1, 38.0], [30.2, 38.0], [30.3, 38.0], [30.4, 38.0], [30.5, 38.0], [30.6, 38.0], [30.7, 38.0], [30.8, 38.0], [30.9, 38.0], [31.0, 38.0], [31.1, 38.0], [31.2, 38.0], [31.3, 38.0], [31.4, 38.0], [31.5, 38.0], [31.6, 38.0], [31.7, 38.0], [31.8, 38.0], [31.9, 38.0], [32.0, 38.0], [32.1, 38.0], [32.2, 38.0], [32.3, 38.0], [32.4, 38.0], [32.5, 38.0], [32.6, 38.0], [32.7, 38.0], [32.8, 38.0], [32.9, 38.0], [33.0, 38.0], [33.1, 38.0], [33.2, 38.0], [33.3, 38.0], [33.4, 38.0], [33.5, 38.0], [33.6, 38.0], [33.7, 38.0], [33.8, 38.0], [33.9, 38.0], [34.0, 38.0], [34.1, 38.0], [34.2, 38.0], [34.3, 38.0], [34.4, 38.0], [34.5, 38.0], [34.6, 38.0], [34.7, 38.0], [34.8, 38.0], [34.9, 38.0], [35.0, 38.0], [35.1, 38.0], [35.2, 38.0], [35.3, 38.0], [35.4, 38.0], [35.5, 38.0], [35.6, 38.0], [35.7, 38.0], [35.8, 38.0], [35.9, 38.0], [36.0, 38.0], [36.1, 38.0], [36.2, 38.0], [36.3, 38.0], [36.4, 38.0], [36.5, 38.0], [36.6, 38.0], [36.7, 38.0], [36.8, 38.0], [36.9, 38.0], [37.0, 38.0], [37.1, 38.0], [37.2, 38.0], [37.3, 38.0], [37.4, 38.0], [37.5, 38.0], [37.6, 38.0], [37.7, 38.0], [37.8, 38.0], [37.9, 38.0], [38.0, 38.0], [38.1, 38.0], [38.2, 38.0], [38.3, 38.0], [38.4, 38.0], [38.5, 38.0], [38.6, 38.0], [38.7, 38.0], [38.8, 38.0], [38.9, 38.0], [39.0, 38.0], [39.1, 38.0], [39.2, 38.0], [39.3, 38.0], [39.4, 38.0], [39.5, 38.0], [39.6, 38.0], [39.7, 38.0], [39.8, 38.0], [39.9, 38.0], [40.0, 38.0], [40.1, 38.0], [40.2, 38.0], [40.3, 38.0], [40.4, 38.0], [40.5, 38.0], [40.6, 38.0], [40.7, 38.0], [40.8, 38.0], [40.9, 38.0], [41.0, 38.0], [41.1, 38.0], [41.2, 38.0], [41.3, 38.0], [41.4, 38.0], [41.5, 38.0], [41.6, 38.0], [41.7, 38.0], [41.8, 38.0], [41.9, 38.0], [42.0, 38.0], [42.1, 38.0], [42.2, 38.0], [42.3, 38.0], [42.4, 38.0], [42.5, 38.0], [42.6, 38.0], [42.7, 38.0], [42.8, 38.0], [42.9, 38.0], [43.0, 38.0], [43.1, 38.0], [43.2, 38.0], [43.3, 38.0], [43.4, 38.0], [43.5, 38.0], [43.6, 39.0], [43.7, 39.0], [43.8, 39.0], [43.9, 39.0], [44.0, 39.0], [44.1, 39.0], [44.2, 39.0], [44.3, 39.0], [44.4, 39.0], [44.5, 39.0], [44.6, 39.0], [44.7, 39.0], [44.8, 39.0], [44.9, 39.0], [45.0, 39.0], [45.1, 39.0], [45.2, 39.0], [45.3, 39.0], [45.4, 39.0], [45.5, 39.0], [45.6, 39.0], [45.7, 39.0], [45.8, 39.0], [45.9, 39.0], [46.0, 39.0], [46.1, 39.0], [46.2, 39.0], [46.3, 39.0], [46.4, 39.0], [46.5, 39.0], [46.6, 39.0], [46.7, 39.0], [46.8, 39.0], [46.9, 39.0], [47.0, 39.0], [47.1, 39.0], [47.2, 39.0], [47.3, 39.0], [47.4, 39.0], [47.5, 39.0], [47.6, 39.0], [47.7, 39.0], [47.8, 39.0], [47.9, 39.0], [48.0, 39.0], [48.1, 39.0], [48.2, 39.0], [48.3, 39.0], [48.4, 39.0], [48.5, 39.0], [48.6, 39.0], [48.7, 39.0], [48.8, 39.0], [48.9, 39.0], [49.0, 39.0], [49.1, 39.0], [49.2, 39.0], [49.3, 39.0], [49.4, 39.0], [49.5, 39.0], [49.6, 39.0], [49.7, 39.0], [49.8, 39.0], [49.9, 39.0], [50.0, 39.0], [50.1, 39.0], [50.2, 39.0], [50.3, 39.0], [50.4, 39.0], [50.5, 39.0], [50.6, 39.0], [50.7, 39.0], [50.8, 39.0], [50.9, 39.0], [51.0, 39.0], [51.1, 39.0], [51.2, 39.0], [51.3, 39.0], [51.4, 39.0], [51.5, 39.0], [51.6, 39.0], [51.7, 39.0], [51.8, 39.0], [51.9, 39.0], [52.0, 39.0], [52.1, 39.0], [52.2, 39.0], [52.3, 39.0], [52.4, 39.0], [52.5, 39.0], [52.6, 39.0], [52.7, 39.0], [52.8, 39.0], [52.9, 39.0], [53.0, 39.0], [53.1, 39.0], [53.2, 39.0], [53.3, 39.0], [53.4, 39.0], [53.5, 39.0], [53.6, 39.0], [53.7, 39.0], [53.8, 39.0], [53.9, 39.0], [54.0, 39.0], [54.1, 39.0], [54.2, 39.0], [54.3, 39.0], [54.4, 39.0], [54.5, 39.0], [54.6, 39.0], [54.7, 39.0], [54.8, 39.0], [54.9, 39.0], [55.0, 39.0], [55.1, 39.0], [55.2, 39.0], [55.3, 39.0], [55.4, 39.0], [55.5, 39.0], [55.6, 39.0], [55.7, 39.0], [55.8, 39.0], [55.9, 39.0], [56.0, 39.0], [56.1, 39.0], [56.2, 39.0], [56.3, 39.0], [56.4, 39.0], [56.5, 39.0], [56.6, 39.0], [56.7, 39.0], [56.8, 39.0], [56.9, 39.0], [57.0, 39.0], [57.1, 39.0], [57.2, 39.0], [57.3, 39.0], [57.4, 39.0], [57.5, 39.0], [57.6, 39.0], [57.7, 39.0], [57.8, 39.0], [57.9, 39.0], [58.0, 39.0], [58.1, 39.0], [58.2, 39.0], [58.3, 39.0], [58.4, 39.0], [58.5, 39.0], [58.6, 39.0], [58.7, 39.0], [58.8, 39.0], [58.9, 39.0], [59.0, 39.0], [59.1, 39.0], [59.2, 39.0], [59.3, 39.0], [59.4, 39.0], [59.5, 39.0], [59.6, 39.0], [59.7, 39.0], [59.8, 39.0], [59.9, 39.0], [60.0, 39.0], [60.1, 39.0], [60.2, 39.0], [60.3, 39.0], [60.4, 39.0], [60.5, 39.0], [60.6, 39.0], [60.7, 39.0], [60.8, 39.0], [60.9, 39.0], [61.0, 39.0], [61.1, 39.0], [61.2, 39.0], [61.3, 39.0], [61.4, 39.0], [61.5, 40.0], [61.6, 40.0], [61.7, 40.0], [61.8, 40.0], [61.9, 40.0], [62.0, 40.0], [62.1, 40.0], [62.2, 40.0], [62.3, 40.0], [62.4, 40.0], [62.5, 40.0], [62.6, 40.0], [62.7, 40.0], [62.8, 40.0], [62.9, 40.0], [63.0, 40.0], [63.1, 40.0], [63.2, 40.0], [63.3, 40.0], [63.4, 40.0], [63.5, 40.0], [63.6, 40.0], [63.7, 40.0], [63.8, 40.0], [63.9, 40.0], [64.0, 40.0], [64.1, 40.0], [64.2, 40.0], [64.3, 40.0], [64.4, 40.0], [64.5, 40.0], [64.6, 40.0], [64.7, 40.0], [64.8, 40.0], [64.9, 40.0], [65.0, 40.0], [65.1, 40.0], [65.2, 40.0], [65.3, 40.0], [65.4, 40.0], [65.5, 40.0], [65.6, 40.0], [65.7, 40.0], [65.8, 40.0], [65.9, 40.0], [66.0, 40.0], [66.1, 40.0], [66.2, 40.0], [66.3, 40.0], [66.4, 40.0], [66.5, 40.0], [66.6, 40.0], [66.7, 40.0], [66.8, 40.0], [66.9, 40.0], [67.0, 40.0], [67.1, 40.0], [67.2, 40.0], [67.3, 40.0], [67.4, 40.0], [67.5, 40.0], [67.6, 40.0], [67.7, 40.0], [67.8, 40.0], [67.9, 40.0], [68.0, 40.0], [68.1, 40.0], [68.2, 40.0], [68.3, 40.0], [68.4, 40.0], [68.5, 40.0], [68.6, 40.0], [68.7, 40.0], [68.8, 40.0], [68.9, 40.0], [69.0, 40.0], [69.1, 40.0], [69.2, 40.0], [69.3, 41.0], [69.4, 41.0], [69.5, 41.0], [69.6, 41.0], [69.7, 41.0], [69.8, 41.0], [69.9, 41.0], [70.0, 41.0], [70.1, 41.0], [70.2, 41.0], [70.3, 41.0], [70.4, 41.0], [70.5, 41.0], [70.6, 41.0], [70.7, 41.0], [70.8, 41.0], [70.9, 41.0], [71.0, 41.0], [71.1, 41.0], [71.2, 41.0], [71.3, 41.0], [71.4, 41.0], [71.5, 41.0], [71.6, 41.0], [71.7, 41.0], [71.8, 41.0], [71.9, 41.0], [72.0, 41.0], [72.1, 41.0], [72.2, 41.0], [72.3, 41.0], [72.4, 41.0], [72.5, 41.0], [72.6, 41.0], [72.7, 41.0], [72.8, 41.0], [72.9, 41.0], [73.0, 41.0], [73.1, 41.0], [73.2, 41.0], [73.3, 41.0], [73.4, 41.0], [73.5, 41.0], [73.6, 41.0], [73.7, 41.0], [73.8, 41.0], [73.9, 41.0], [74.0, 41.0], [74.1, 42.0], [74.2, 42.0], [74.3, 42.0], [74.4, 42.0], [74.5, 42.0], [74.6, 42.0], [74.7, 42.0], [74.8, 42.0], [74.9, 42.0], [75.0, 42.0], [75.1, 42.0], [75.2, 42.0], [75.3, 42.0], [75.4, 42.0], [75.5, 42.0], [75.6, 42.0], [75.7, 42.0], [75.8, 42.0], [75.9, 42.0], [76.0, 42.0], [76.1, 42.0], [76.2, 42.0], [76.3, 42.0], [76.4, 42.0], [76.5, 42.0], [76.6, 42.0], [76.7, 42.0], [76.8, 42.0], [76.9, 42.0], [77.0, 42.0], [77.1, 42.0], [77.2, 42.0], [77.3, 42.0], [77.4, 42.0], [77.5, 42.0], [77.6, 42.0], [77.7, 42.0], [77.8, 42.0], [77.9, 42.0], [78.0, 42.0], [78.1, 42.0], [78.2, 43.0], [78.3, 43.0], [78.4, 43.0], [78.5, 43.0], [78.6, 43.0], [78.7, 43.0], [78.8, 43.0], [78.9, 43.0], [79.0, 43.0], [79.1, 43.0], [79.2, 43.0], [79.3, 43.0], [79.4, 43.0], [79.5, 43.0], [79.6, 43.0], [79.7, 43.0], [79.8, 43.0], [79.9, 43.0], [80.0, 43.0], [80.1, 43.0], [80.2, 43.0], [80.3, 43.0], [80.4, 43.0], [80.5, 43.0], [80.6, 43.0], [80.7, 43.0], [80.8, 43.0], [80.9, 43.0], [81.0, 43.0], [81.1, 43.0], [81.2, 43.0], [81.3, 43.0], [81.4, 43.0], [81.5, 43.0], [81.6, 43.0], [81.7, 43.0], [81.8, 43.0], [81.9, 43.0], [82.0, 43.0], [82.1, 43.0], [82.2, 43.0], [82.3, 43.0], [82.4, 43.0], [82.5, 43.0], [82.6, 43.0], [82.7, 43.0], [82.8, 43.0], [82.9, 43.0], [83.0, 43.0], [83.1, 43.0], [83.2, 43.0], [83.3, 43.0], [83.4, 44.0], [83.5, 44.0], [83.6, 44.0], [83.7, 44.0], [83.8, 44.0], [83.9, 44.0], [84.0, 44.0], [84.1, 44.0], [84.2, 44.0], [84.3, 44.0], [84.4, 44.0], [84.5, 44.0], [84.6, 44.0], [84.7, 44.0], [84.8, 44.0], [84.9, 44.0], [85.0, 44.0], [85.1, 44.0], [85.2, 44.0], [85.3, 44.0], [85.4, 44.0], [85.5, 44.0], [85.6, 44.0], [85.7, 44.0], [85.8, 44.0], [85.9, 44.0], [86.0, 44.0], [86.1, 44.0], [86.2, 44.0], [86.3, 44.0], [86.4, 44.0], [86.5, 44.0], [86.6, 44.0], [86.7, 44.0], [86.8, 44.0], [86.9, 44.0], [87.0, 44.0], [87.1, 44.0], [87.2, 44.0], [87.3, 44.0], [87.4, 44.0], [87.5, 44.0], [87.6, 44.0], [87.7, 44.0], [87.8, 44.0], [87.9, 44.0], [88.0, 44.0], [88.1, 44.0], [88.2, 44.0], [88.3, 44.0], [88.4, 44.0], [88.5, 44.0], [88.6, 45.0], [88.7, 45.0], [88.8, 45.0], [88.9, 45.0], [89.0, 45.0], [89.1, 45.0], [89.2, 45.0], [89.3, 45.0], [89.4, 45.0], [89.5, 45.0], [89.6, 45.0], [89.7, 45.0], [89.8, 45.0], [89.9, 45.0], [90.0, 45.0], [90.1, 45.0], [90.2, 45.0], [90.3, 45.0], [90.4, 45.0], [90.5, 45.0], [90.6, 45.0], [90.7, 45.0], [90.8, 45.0], [90.9, 45.0], [91.0, 45.0], [91.1, 45.0], [91.2, 45.0], [91.3, 45.0], [91.4, 45.0], [91.5, 45.0], [91.6, 45.0], [91.7, 45.0], [91.8, 45.0], [91.9, 45.0], [92.0, 45.0], [92.1, 45.0], [92.2, 45.0], [92.3, 45.0], [92.4, 45.0], [92.5, 46.0], [92.6, 46.0], [92.7, 46.0], [92.8, 46.0], [92.9, 46.0], [93.0, 46.0], [93.1, 46.0], [93.2, 46.0], [93.3, 46.0], [93.4, 46.0], [93.5, 46.0], [93.6, 46.0], [93.7, 46.0], [93.8, 46.0], [93.9, 46.0], [94.0, 46.0], [94.1, 46.0], [94.2, 46.0], [94.3, 46.0], [94.4, 46.0], [94.5, 46.0], [94.6, 46.0], [94.7, 46.0], [94.8, 46.0], [94.9, 46.0], [95.0, 46.0], [95.1, 46.0], [95.2, 46.0], [95.3, 47.0], [95.4, 47.0], [95.5, 47.0], [95.6, 47.0], [95.7, 47.0], [95.8, 47.0], [95.9, 47.0], [96.0, 47.0], [96.1, 47.0], [96.2, 47.0], [96.3, 47.0], [96.4, 47.0], [96.5, 47.0], [96.6, 47.0], [96.7, 47.0], [96.8, 47.0], [96.9, 47.0], [97.0, 47.0], [97.1, 47.0], [97.2, 48.0], [97.3, 48.0], [97.4, 48.0], [97.5, 48.0], [97.6, 48.0], [97.7, 48.0], [97.8, 48.0], [97.9, 48.0], [98.0, 48.0], [98.1, 48.0], [98.2, 49.0], [98.3, 49.0], [98.4, 49.0], [98.5, 49.0], [98.6, 49.0], [98.7, 49.0], [98.8, 50.0], [98.9, 50.0], [99.0, 50.0], [99.1, 50.0], [99.2, 51.0], [99.3, 51.0], [99.4, 52.0], [99.5, 52.0], [99.6, 53.0], [99.7, 55.0], [99.8, 57.0], [99.9, 61.0]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[0.0, 2.0], [0.1, 36.0], [0.2, 37.0], [0.3, 37.0], [0.4, 37.0], [0.5, 37.0], [0.6, 37.0], [0.7, 37.0], [0.8, 37.0], [0.9, 37.0], [1.0, 37.0], [1.1, 37.0], [1.2, 37.0], [1.3, 37.0], [1.4, 37.0], [1.5, 37.0], [1.6, 37.0], [1.7, 37.0], [1.8, 37.0], [1.9, 37.0], [2.0, 37.0], [2.1, 37.0], [2.2, 37.0], [2.3, 37.0], [2.4, 37.0], [2.5, 37.0], [2.6, 37.0], [2.7, 37.0], [2.8, 37.0], [2.9, 37.0], [3.0, 37.0], [3.1, 37.0], [3.2, 37.0], [3.3, 37.0], [3.4, 37.0], [3.5, 37.0], [3.6, 37.0], [3.7, 37.0], [3.8, 37.0], [3.9, 37.0], [4.0, 37.0], [4.1, 37.0], [4.2, 37.0], [4.3, 37.0], [4.4, 37.0], [4.5, 37.0], [4.6, 37.0], [4.7, 37.0], [4.8, 37.0], [4.9, 37.0], [5.0, 37.0], [5.1, 37.0], [5.2, 37.0], [5.3, 37.0], [5.4, 37.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 37.0], [5.9, 37.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 37.0], [7.2, 37.0], [7.3, 37.0], [7.4, 37.0], [7.5, 37.0], [7.6, 37.0], [7.7, 37.0], [7.8, 37.0], [7.9, 37.0], [8.0, 37.0], [8.1, 37.0], [8.2, 37.0], [8.3, 37.0], [8.4, 37.0], [8.5, 37.0], [8.6, 37.0], [8.7, 37.0], [8.8, 37.0], [8.9, 37.0], [9.0, 37.0], [9.1, 37.0], [9.2, 37.0], [9.3, 37.0], [9.4, 37.0], [9.5, 37.0], [9.6, 37.0], [9.7, 37.0], [9.8, 37.0], [9.9, 37.0], [10.0, 37.0], [10.1, 37.0], [10.2, 37.0], [10.3, 37.0], [10.4, 37.0], [10.5, 37.0], [10.6, 37.0], [10.7, 37.0], [10.8, 37.0], [10.9, 37.0], [11.0, 37.0], [11.1, 37.0], [11.2, 37.0], [11.3, 37.0], [11.4, 37.0], [11.5, 37.0], [11.6, 37.0], [11.7, 37.0], [11.8, 37.0], [11.9, 37.0], [12.0, 37.0], [12.1, 37.0], [12.2, 37.0], [12.3, 37.0], [12.4, 37.0], [12.5, 37.0], [12.6, 37.0], [12.7, 37.0], [12.8, 37.0], [12.9, 37.0], [13.0, 37.0], [13.1, 37.0], [13.2, 37.0], [13.3, 37.0], [13.4, 37.0], [13.5, 37.0], [13.6, 37.0], [13.7, 37.0], [13.8, 37.0], [13.9, 37.0], [14.0, 37.0], [14.1, 37.0], [14.2, 37.0], [14.3, 37.0], [14.4, 37.0], [14.5, 37.0], [14.6, 37.0], [14.7, 37.0], [14.8, 37.0], [14.9, 37.0], [15.0, 37.0], [15.1, 37.0], [15.2, 37.0], [15.3, 37.0], [15.4, 37.0], [15.5, 37.0], [15.6, 37.0], [15.7, 37.0], [15.8, 37.0], [15.9, 37.0], [16.0, 37.0], [16.1, 37.0], [16.2, 37.0], [16.3, 37.0], [16.4, 37.0], [16.5, 37.0], [16.6, 37.0], [16.7, 37.0], [16.8, 37.0], [16.9, 37.0], [17.0, 37.0], [17.1, 37.0], [17.2, 37.0], [17.3, 37.0], [17.4, 37.0], [17.5, 37.0], [17.6, 37.0], [17.7, 37.0], [17.8, 37.0], [17.9, 37.0], [18.0, 37.0], [18.1, 37.0], [18.2, 37.0], [18.3, 37.0], [18.4, 37.0], [18.5, 37.0], [18.6, 37.0], [18.7, 37.0], [18.8, 38.0], [18.9, 38.0], [19.0, 38.0], [19.1, 38.0], [19.2, 38.0], [19.3, 38.0], [19.4, 38.0], [19.5, 38.0], [19.6, 38.0], [19.7, 38.0], [19.8, 38.0], [19.9, 38.0], [20.0, 38.0], [20.1, 38.0], [20.2, 38.0], [20.3, 38.0], [20.4, 38.0], [20.5, 38.0], [20.6, 38.0], [20.7, 38.0], [20.8, 38.0], [20.9, 38.0], [21.0, 38.0], [21.1, 38.0], [21.2, 38.0], [21.3, 38.0], [21.4, 38.0], [21.5, 38.0], [21.6, 38.0], [21.7, 38.0], [21.8, 38.0], [21.9, 38.0], [22.0, 38.0], [22.1, 38.0], [22.2, 38.0], [22.3, 38.0], [22.4, 38.0], [22.5, 38.0], [22.6, 38.0], [22.7, 38.0], [22.8, 38.0], [22.9, 38.0], [23.0, 38.0], [23.1, 38.0], [23.2, 38.0], [23.3, 38.0], [23.4, 38.0], [23.5, 38.0], [23.6, 38.0], [23.7, 38.0], [23.8, 38.0], [23.9, 38.0], [24.0, 38.0], [24.1, 38.0], [24.2, 38.0], [24.3, 38.0], [24.4, 38.0], [24.5, 38.0], [24.6, 38.0], [24.7, 38.0], [24.8, 38.0], [24.9, 38.0], [25.0, 38.0], [25.1, 38.0], [25.2, 38.0], [25.3, 38.0], [25.4, 38.0], [25.5, 38.0], [25.6, 38.0], [25.7, 38.0], [25.8, 38.0], [25.9, 38.0], [26.0, 38.0], [26.1, 38.0], [26.2, 38.0], [26.3, 38.0], [26.4, 38.0], [26.5, 38.0], [26.6, 38.0], [26.7, 38.0], [26.8, 38.0], [26.9, 38.0], [27.0, 38.0], [27.1, 38.0], [27.2, 38.0], [27.3, 38.0], [27.4, 38.0], [27.5, 38.0], [27.6, 38.0], [27.7, 38.0], [27.8, 38.0], [27.9, 38.0], [28.0, 38.0], [28.1, 38.0], [28.2, 38.0], [28.3, 38.0], [28.4, 38.0], [28.5, 38.0], [28.6, 38.0], [28.7, 38.0], [28.8, 38.0], [28.9, 38.0], [29.0, 38.0], [29.1, 38.0], [29.2, 38.0], [29.3, 38.0], [29.4, 38.0], [29.5, 38.0], [29.6, 38.0], [29.7, 38.0], [29.8, 38.0], [29.9, 38.0], [30.0, 38.0], [30.1, 38.0], [30.2, 38.0], [30.3, 38.0], [30.4, 38.0], [30.5, 38.0], [30.6, 38.0], [30.7, 38.0], [30.8, 38.0], [30.9, 38.0], [31.0, 38.0], [31.1, 38.0], [31.2, 38.0], [31.3, 38.0], [31.4, 38.0], [31.5, 38.0], [31.6, 38.0], [31.7, 38.0], [31.8, 38.0], [31.9, 38.0], [32.0, 38.0], [32.1, 38.0], [32.2, 38.0], [32.3, 38.0], [32.4, 38.0], [32.5, 38.0], [32.6, 38.0], [32.7, 38.0], [32.8, 38.0], [32.9, 38.0], [33.0, 38.0], [33.1, 38.0], [33.2, 38.0], [33.3, 38.0], [33.4, 38.0], [33.5, 38.0], [33.6, 38.0], [33.7, 38.0], [33.8, 38.0], [33.9, 38.0], [34.0, 38.0], [34.1, 38.0], [34.2, 38.0], [34.3, 38.0], [34.4, 38.0], [34.5, 38.0], [34.6, 38.0], [34.7, 38.0], [34.8, 38.0], [34.9, 38.0], [35.0, 38.0], [35.1, 38.0], [35.2, 38.0], [35.3, 38.0], [35.4, 38.0], [35.5, 38.0], [35.6, 38.0], [35.7, 38.0], [35.8, 38.0], [35.9, 38.0], [36.0, 38.0], [36.1, 38.0], [36.2, 38.0], [36.3, 38.0], [36.4, 38.0], [36.5, 38.0], [36.6, 38.0], [36.7, 38.0], [36.8, 38.0], [36.9, 38.0], [37.0, 38.0], [37.1, 38.0], [37.2, 38.0], [37.3, 38.0], [37.4, 38.0], [37.5, 38.0], [37.6, 38.0], [37.7, 38.0], [37.8, 38.0], [37.9, 38.0], [38.0, 38.0], [38.1, 38.0], [38.2, 38.0], [38.3, 38.0], [38.4, 38.0], [38.5, 38.0], [38.6, 38.0], [38.7, 38.0], [38.8, 38.0], [38.9, 38.0], [39.0, 38.0], [39.1, 38.0], [39.2, 38.0], [39.3, 38.0], [39.4, 38.0], [39.5, 38.0], [39.6, 38.0], [39.7, 38.0], [39.8, 38.0], [39.9, 38.0], [40.0, 38.0], [40.1, 38.0], [40.2, 38.0], [40.3, 38.0], [40.4, 38.0], [40.5, 38.0], [40.6, 38.0], [40.7, 38.0], [40.8, 38.0], [40.9, 38.0], [41.0, 38.0], [41.1, 38.0], [41.2, 38.0], [41.3, 38.0], [41.4, 38.0], [41.5, 38.0], [41.6, 38.0], [41.7, 38.0], [41.8, 38.0], [41.9, 38.0], [42.0, 38.0], [42.1, 38.0], [42.2, 38.0], [42.3, 38.0], [42.4, 38.0], [42.5, 38.0], [42.6, 38.0], [42.7, 38.0], [42.8, 38.0], [42.9, 38.0], [43.0, 38.0], [43.1, 38.0], [43.2, 38.0], [43.3, 38.0], [43.4, 38.0], [43.5, 38.0], [43.6, 39.0], [43.7, 39.0], [43.8, 39.0], [43.9, 39.0], [44.0, 39.0], [44.1, 39.0], [44.2, 39.0], [44.3, 39.0], [44.4, 39.0], [44.5, 39.0], [44.6, 39.0], [44.7, 39.0], [44.8, 39.0], [44.9, 39.0], [45.0, 39.0], [45.1, 39.0], [45.2, 39.0], [45.3, 39.0], [45.4, 39.0], [45.5, 39.0], [45.6, 39.0], [45.7, 39.0], [45.8, 39.0], [45.9, 39.0], [46.0, 39.0], [46.1, 39.0], [46.2, 39.0], [46.3, 39.0], [46.4, 39.0], [46.5, 39.0], [46.6, 39.0], [46.7, 39.0], [46.8, 39.0], [46.9, 39.0], [47.0, 39.0], [47.1, 39.0], [47.2, 39.0], [47.3, 39.0], [47.4, 39.0], [47.5, 39.0], [47.6, 39.0], [47.7, 39.0], [47.8, 39.0], [47.9, 39.0], [48.0, 39.0], [48.1, 39.0], [48.2, 39.0], [48.3, 39.0], [48.4, 39.0], [48.5, 39.0], [48.6, 39.0], [48.7, 39.0], [48.8, 39.0], [48.9, 39.0], [49.0, 39.0], [49.1, 39.0], [49.2, 39.0], [49.3, 39.0], [49.4, 39.0], [49.5, 39.0], [49.6, 39.0], [49.7, 39.0], [49.8, 39.0], [49.9, 39.0], [50.0, 39.0], [50.1, 39.0], [50.2, 39.0], [50.3, 39.0], [50.4, 39.0], [50.5, 39.0], [50.6, 39.0], [50.7, 39.0], [50.8, 39.0], [50.9, 39.0], [51.0, 39.0], [51.1, 39.0], [51.2, 39.0], [51.3, 39.0], [51.4, 39.0], [51.5, 39.0], [51.6, 39.0], [51.7, 39.0], [51.8, 39.0], [51.9, 39.0], [52.0, 39.0], [52.1, 39.0], [52.2, 39.0], [52.3, 39.0], [52.4, 39.0], [52.5, 39.0], [52.6, 39.0], [52.7, 39.0], [52.8, 39.0], [52.9, 39.0], [53.0, 39.0], [53.1, 39.0], [53.2, 39.0], [53.3, 39.0], [53.4, 39.0], [53.5, 39.0], [53.6, 39.0], [53.7, 39.0], [53.8, 39.0], [53.9, 39.0], [54.0, 39.0], [54.1, 39.0], [54.2, 39.0], [54.3, 39.0], [54.4, 39.0], [54.5, 39.0], [54.6, 39.0], [54.7, 39.0], [54.8, 39.0], [54.9, 39.0], [55.0, 39.0], [55.1, 39.0], [55.2, 39.0], [55.3, 39.0], [55.4, 39.0], [55.5, 39.0], [55.6, 39.0], [55.7, 39.0], [55.8, 39.0], [55.9, 39.0], [56.0, 39.0], [56.1, 39.0], [56.2, 39.0], [56.3, 39.0], [56.4, 39.0], [56.5, 39.0], [56.6, 39.0], [56.7, 39.0], [56.8, 39.0], [56.9, 39.0], [57.0, 39.0], [57.1, 39.0], [57.2, 39.0], [57.3, 39.0], [57.4, 39.0], [57.5, 39.0], [57.6, 39.0], [57.7, 39.0], [57.8, 39.0], [57.9, 39.0], [58.0, 39.0], [58.1, 39.0], [58.2, 39.0], [58.3, 39.0], [58.4, 39.0], [58.5, 39.0], [58.6, 39.0], [58.7, 39.0], [58.8, 39.0], [58.9, 39.0], [59.0, 39.0], [59.1, 39.0], [59.2, 39.0], [59.3, 39.0], [59.4, 39.0], [59.5, 39.0], [59.6, 39.0], [59.7, 39.0], [59.8, 39.0], [59.9, 39.0], [60.0, 39.0], [60.1, 39.0], [60.2, 39.0], [60.3, 39.0], [60.4, 39.0], [60.5, 39.0], [60.6, 39.0], [60.7, 39.0], [60.8, 39.0], [60.9, 39.0], [61.0, 39.0], [61.1, 39.0], [61.2, 39.0], [61.3, 39.0], [61.4, 39.0], [61.5, 40.0], [61.6, 40.0], [61.7, 40.0], [61.8, 40.0], [61.9, 40.0], [62.0, 40.0], [62.1, 40.0], [62.2, 40.0], [62.3, 40.0], [62.4, 40.0], [62.5, 40.0], [62.6, 40.0], [62.7, 40.0], [62.8, 40.0], [62.9, 40.0], [63.0, 40.0], [63.1, 40.0], [63.2, 40.0], [63.3, 40.0], [63.4, 40.0], [63.5, 40.0], [63.6, 40.0], [63.7, 40.0], [63.8, 40.0], [63.9, 40.0], [64.0, 40.0], [64.1, 40.0], [64.2, 40.0], [64.3, 40.0], [64.4, 40.0], [64.5, 40.0], [64.6, 40.0], [64.7, 40.0], [64.8, 40.0], [64.9, 40.0], [65.0, 40.0], [65.1, 40.0], [65.2, 40.0], [65.3, 40.0], [65.4, 40.0], [65.5, 40.0], [65.6, 40.0], [65.7, 40.0], [65.8, 40.0], [65.9, 40.0], [66.0, 40.0], [66.1, 40.0], [66.2, 40.0], [66.3, 40.0], [66.4, 40.0], [66.5, 40.0], [66.6, 40.0], [66.7, 40.0], [66.8, 40.0], [66.9, 40.0], [67.0, 40.0], [67.1, 40.0], [67.2, 40.0], [67.3, 40.0], [67.4, 40.0], [67.5, 40.0], [67.6, 40.0], [67.7, 40.0], [67.8, 40.0], [67.9, 40.0], [68.0, 40.0], [68.1, 40.0], [68.2, 40.0], [68.3, 40.0], [68.4, 40.0], [68.5, 40.0], [68.6, 40.0], [68.7, 40.0], [68.8, 40.0], [68.9, 40.0], [69.0, 40.0], [69.1, 40.0], [69.2, 40.0], [69.3, 41.0], [69.4, 41.0], [69.5, 41.0], [69.6, 41.0], [69.7, 41.0], [69.8, 41.0], [69.9, 41.0], [70.0, 41.0], [70.1, 41.0], [70.2, 41.0], [70.3, 41.0], [70.4, 41.0], [70.5, 41.0], [70.6, 41.0], [70.7, 41.0], [70.8, 41.0], [70.9, 41.0], [71.0, 41.0], [71.1, 41.0], [71.2, 41.0], [71.3, 41.0], [71.4, 41.0], [71.5, 41.0], [71.6, 41.0], [71.7, 41.0], [71.8, 41.0], [71.9, 41.0], [72.0, 41.0], [72.1, 41.0], [72.2, 41.0], [72.3, 41.0], [72.4, 41.0], [72.5, 41.0], [72.6, 41.0], [72.7, 41.0], [72.8, 41.0], [72.9, 41.0], [73.0, 41.0], [73.1, 41.0], [73.2, 41.0], [73.3, 41.0], [73.4, 41.0], [73.5, 41.0], [73.6, 41.0], [73.7, 41.0], [73.8, 41.0], [73.9, 41.0], [74.0, 41.0], [74.1, 42.0], [74.2, 42.0], [74.3, 42.0], [74.4, 42.0], [74.5, 42.0], [74.6, 42.0], [74.7, 42.0], [74.8, 42.0], [74.9, 42.0], [75.0, 42.0], [75.1, 42.0], [75.2, 42.0], [75.3, 42.0], [75.4, 42.0], [75.5, 42.0], [75.6, 42.0], [75.7, 42.0], [75.8, 42.0], [75.9, 42.0], [76.0, 42.0], [76.1, 42.0], [76.2, 42.0], [76.3, 42.0], [76.4, 42.0], [76.5, 42.0], [76.6, 42.0], [76.7, 42.0], [76.8, 42.0], [76.9, 42.0], [77.0, 42.0], [77.1, 42.0], [77.2, 42.0], [77.3, 42.0], [77.4, 42.0], [77.5, 42.0], [77.6, 42.0], [77.7, 42.0], [77.8, 42.0], [77.9, 42.0], [78.0, 42.0], [78.1, 42.0], [78.2, 43.0], [78.3, 43.0], [78.4, 43.0], [78.5, 43.0], [78.6, 43.0], [78.7, 43.0], [78.8, 43.0], [78.9, 43.0], [79.0, 43.0], [79.1, 43.0], [79.2, 43.0], [79.3, 43.0], [79.4, 43.0], [79.5, 43.0], [79.6, 43.0], [79.7, 43.0], [79.8, 43.0], [79.9, 43.0], [80.0, 43.0], [80.1, 43.0], [80.2, 43.0], [80.3, 43.0], [80.4, 43.0], [80.5, 43.0], [80.6, 43.0], [80.7, 43.0], [80.8, 43.0], [80.9, 43.0], [81.0, 43.0], [81.1, 43.0], [81.2, 43.0], [81.3, 43.0], [81.4, 43.0], [81.5, 43.0], [81.6, 43.0], [81.7, 43.0], [81.8, 43.0], [81.9, 43.0], [82.0, 43.0], [82.1, 43.0], [82.2, 43.0], [82.3, 43.0], [82.4, 43.0], [82.5, 43.0], [82.6, 43.0], [82.7, 43.0], [82.8, 43.0], [82.9, 43.0], [83.0, 43.0], [83.1, 43.0], [83.2, 43.0], [83.3, 43.0], [83.4, 44.0], [83.5, 44.0], [83.6, 44.0], [83.7, 44.0], [83.8, 44.0], [83.9, 44.0], [84.0, 44.0], [84.1, 44.0], [84.2, 44.0], [84.3, 44.0], [84.4, 44.0], [84.5, 44.0], [84.6, 44.0], [84.7, 44.0], [84.8, 44.0], [84.9, 44.0], [85.0, 44.0], [85.1, 44.0], [85.2, 44.0], [85.3, 44.0], [85.4, 44.0], [85.5, 44.0], [85.6, 44.0], [85.7, 44.0], [85.8, 44.0], [85.9, 44.0], [86.0, 44.0], [86.1, 44.0], [86.2, 44.0], [86.3, 44.0], [86.4, 44.0], [86.5, 44.0], [86.6, 44.0], [86.7, 44.0], [86.8, 44.0], [86.9, 44.0], [87.0, 44.0], [87.1, 44.0], [87.2, 44.0], [87.3, 44.0], [87.4, 44.0], [87.5, 44.0], [87.6, 44.0], [87.7, 44.0], [87.8, 44.0], [87.9, 44.0], [88.0, 44.0], [88.1, 44.0], [88.2, 44.0], [88.3, 44.0], [88.4, 44.0], [88.5, 44.0], [88.6, 45.0], [88.7, 45.0], [88.8, 45.0], [88.9, 45.0], [89.0, 45.0], [89.1, 45.0], [89.2, 45.0], [89.3, 45.0], [89.4, 45.0], [89.5, 45.0], [89.6, 45.0], [89.7, 45.0], [89.8, 45.0], [89.9, 45.0], [90.0, 45.0], [90.1, 45.0], [90.2, 45.0], [90.3, 45.0], [90.4, 45.0], [90.5, 45.0], [90.6, 45.0], [90.7, 45.0], [90.8, 45.0], [90.9, 45.0], [91.0, 45.0], [91.1, 45.0], [91.2, 45.0], [91.3, 45.0], [91.4, 45.0], [91.5, 45.0], [91.6, 45.0], [91.7, 45.0], [91.8, 45.0], [91.9, 45.0], [92.0, 45.0], [92.1, 45.0], [92.2, 45.0], [92.3, 45.0], [92.4, 45.0], [92.5, 46.0], [92.6, 46.0], [92.7, 46.0], [92.8, 46.0], [92.9, 46.0], [93.0, 46.0], [93.1, 46.0], [93.2, 46.0], [93.3, 46.0], [93.4, 46.0], [93.5, 46.0], [93.6, 46.0], [93.7, 46.0], [93.8, 46.0], [93.9, 46.0], [94.0, 46.0], [94.1, 46.0], [94.2, 46.0], [94.3, 46.0], [94.4, 46.0], [94.5, 46.0], [94.6, 46.0], [94.7, 46.0], [94.8, 46.0], [94.9, 46.0], [95.0, 46.0], [95.1, 46.0], [95.2, 46.0], [95.3, 47.0], [95.4, 47.0], [95.5, 47.0], [95.6, 47.0], [95.7, 47.0], [95.8, 47.0], [95.9, 47.0], [96.0, 47.0], [96.1, 47.0], [96.2, 47.0], [96.3, 47.0], [96.4, 47.0], [96.5, 47.0], [96.6, 47.0], [96.7, 47.0], [96.8, 47.0], [96.9, 47.0], [97.0, 47.0], [97.1, 47.0], [97.2, 48.0], [97.3, 48.0], [97.4, 48.0], [97.5, 48.0], [97.6, 48.0], [97.7, 48.0], [97.8, 48.0], [97.9, 48.0], [98.0, 48.0], [98.1, 48.0], [98.2, 49.0], [98.3, 49.0], [98.4, 49.0], [98.5, 49.0], [98.6, 49.0], [98.7, 49.0], [98.8, 50.0], [98.9, 50.0], [99.0, 50.0], [99.1, 50.0], [99.2, 51.0], [99.3, 51.0], [99.4, 52.0], [99.5, 52.0], [99.6, 53.0], [99.7, 55.0], [99.8, 57.0], [99.9, 61.0]], "isOverall": false, "label": "Get Fruit 1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1868633.0, "minX": 0.0, "maxY": 1868742.0, "series": [{"data": [[0.0, 1868742.0]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[0.0, 1868633.0]], "isOverall": false, "label": "Get Fruit 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4.9E-324, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3737375.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3737375.0, "series": [{"data": [[0.0, 3737375.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 247.97274408439426, "minX": 1.64983464E12, "maxY": 250.0, "series": [{"data": [[1.64983476E12, 250.0], [1.64983494E12, 247.97274408439426], [1.64983488E12, 250.0], [1.6498347E12, 250.0], [1.64983464E12, 249.26180989419964], [1.64983482E12, 250.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64983494E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.31818181818181807, "minX": 1.0, "maxY": 83.6, "series": [{"data": [[2.0, 0.31818181818181807], [3.0, 4.0], [6.0, 6.0], [7.0, 6.0], [8.0, 6.0], [10.0, 6.0], [11.0, 7.0], [13.0, 7.0], [14.0, 7.0], [15.0, 6.0], [17.0, 7.0], [19.0, 7.0], [20.0, 21.0], [21.0, 10.0], [22.0, 9.0], [23.0, 6.0], [24.0, 7.0], [25.0, 7.0], [27.0, 7.0], [29.0, 8.333333333333334], [30.0, 8.0], [31.0, 14.0], [33.0, 7.0], [32.0, 7.0], [34.0, 5.8], [35.0, 6.5], [36.0, 7.333333333333333], [37.0, 11.25], [38.0, 14.0], [39.0, 9.25], [40.0, 9.4], [42.0, 16.333333333333332], [43.0, 8.0], [44.0, 10.0], [45.0, 10.285714285714285], [47.0, 8.666666666666666], [46.0, 7.0], [49.0, 9.8], [48.0, 13.0], [51.0, 9.8], [50.0, 13.0], [52.0, 13.0], [53.0, 13.0], [54.0, 9.857142857142856], [55.0, 14.5], [56.0, 8.6], [57.0, 10.0], [58.0, 11.0], [59.0, 8.833333333333334], [60.0, 10.5], [61.0, 13.375], [62.0, 10.833333333333334], [63.0, 18.5], [64.0, 15.666666666666668], [65.0, 12.666666666666666], [66.0, 15.090909090909092], [67.0, 17.0], [68.0, 16.307692307692307], [70.0, 17.666666666666664], [71.0, 21.454545454545457], [72.0, 16.666666666666664], [73.0, 19.77777777777778], [75.0, 26.0], [74.0, 25.0], [76.0, 20.0], [77.0, 24.249999999999996], [78.0, 26.75], [80.0, 29.4], [81.0, 37.27272727272727], [82.0, 31.0], [83.0, 37.0], [84.0, 29.875], [85.0, 41.888888888888886], [86.0, 26.5], [87.0, 38.5], [88.0, 26.4], [89.0, 29.666666666666664], [90.0, 22.57142857142857], [91.0, 45.0], [92.0, 24.18181818181818], [93.0, 18.0], [94.0, 31.625], [95.0, 19.0], [96.0, 39.6], [97.0, 21.0], [98.0, 33.111111111111114], [99.0, 43.666666666666664], [100.0, 24.0], [101.0, 34.333333333333336], [102.0, 25.5], [103.0, 53.333333333333336], [104.0, 27.6], [105.0, 40.5], [106.0, 32.57142857142857], [107.0, 41.0], [108.0, 33.5], [109.0, 38.666666666666664], [110.0, 33.5], [112.0, 29.25], [113.0, 47.666666666666664], [114.0, 30.666666666666668], [115.0, 57.333333333333336], [116.0, 33.6], [117.0, 43.75], [118.0, 29.2], [120.0, 34.92857142857143], [121.0, 45.8], [122.0, 38.111111111111114], [124.0, 28.25], [125.0, 49.666666666666664], [126.0, 37.5], [127.0, 31.0], [128.0, 38.75], [130.0, 31.5], [131.0, 43.6], [132.0, 35.625], [133.0, 50.333333333333336], [134.0, 37.166666666666664], [135.0, 60.333333333333336], [129.0, 59.0], [136.0, 47.33333333333333], [138.0, 39.5], [139.0, 43.75], [141.0, 37.75], [142.0, 46.666666666666664], [143.0, 39.0], [140.0, 61.0], [137.0, 61.0], [144.0, 39.333333333333336], [145.0, 52.0], [146.0, 47.333333333333336], [148.0, 42.57142857142858], [150.0, 44.875], [151.0, 49.0], [152.0, 43.090909090909086], [153.0, 50.5], [154.0, 41.5], [155.0, 44.0], [156.0, 37.599999999999994], [157.0, 42.0], [158.0, 35.0], [159.0, 43.333333333333336], [160.0, 34.833333333333336], [161.0, 56.25], [162.0, 34.0], [163.0, 49.25], [164.0, 35.66666666666667], [165.0, 42.25], [166.0, 41.6], [167.0, 34.666666666666664], [168.0, 42.857142857142854], [170.0, 35.8], [172.0, 42.875], [173.0, 37.5], [174.0, 38.99999999999999], [169.0, 62.0], [176.0, 42.5], [177.0, 43.25], [178.0, 36.875], [179.0, 37.0], [180.0, 42.22222222222222], [181.0, 49.0], [182.0, 45.72727272727273], [183.0, 42.75], [184.0, 44.333333333333336], [185.0, 35.75], [186.0, 34.833333333333336], [187.0, 40.333333333333336], [188.0, 40.7], [189.0, 49.0], [190.0, 42.25], [191.0, 46.6], [192.0, 35.599999999999994], [193.0, 44.333333333333336], [194.0, 35.42857142857143], [195.0, 35.2], [196.0, 35.375], [198.0, 41.2], [200.0, 41.85714285714286], [201.0, 41.4], [202.0, 31.666666666666668], [203.0, 32.0], [204.0, 32.72727272727273], [205.0, 53.333333333333336], [206.0, 34.909090909090914], [207.0, 42.333333333333336], [208.0, 31.333333333333332], [209.0, 31.0], [210.0, 34.0], [211.0, 31.0], [212.0, 31.166666666666664], [213.0, 31.0], [214.0, 32.22222222222222], [215.0, 38.6], [216.0, 38.16666666666667], [217.0, 33.5], [218.0, 34.4], [219.0, 34.0], [220.0, 34.875], [221.0, 34.0], [222.0, 36.92307692307692], [223.0, 53.333333333333336], [224.0, 35.666666666666664], [225.0, 44.666666666666664], [226.0, 40.0], [228.0, 39.7], [229.0, 37.25], [230.0, 39.45454545454545], [231.0, 37.0], [232.0, 40.44444444444444], [234.0, 41.06666666666666], [236.0, 37.0], [237.0, 36.0], [238.0, 37.5625], [239.0, 34.75], [233.0, 62.0], [240.0, 38.375], [241.0, 43.666666666666664], [242.0, 34.85714285714286], [243.0, 35.8], [244.0, 36.166666666666664], [245.0, 36.2], [246.0, 38.888888888888886], [247.0, 35.33333333333333], [248.0, 37.99999999999999], [249.0, 39.66666666666667], [250.0, 34.666666666666664], [251.0, 35.0], [252.0, 35.25], [253.0, 38.5], [254.0, 36.0], [255.0, 36.0], [257.0, 36.666666666666664], [256.0, 36.27272727272727], [258.0, 37.0], [259.0, 38.0], [260.0, 37.625], [261.0, 37.0], [262.0, 40.1], [263.0, 37.333333333333336], [264.0, 40.44444444444444], [270.0, 45.5], [271.0, 41.83333333333333], [268.0, 42.0], [269.0, 40.333333333333336], [265.0, 45.666666666666664], [266.0, 39.272727272727266], [267.0, 39.666666666666664], [273.0, 47.75], [272.0, 48.166666666666664], [274.0, 44.0], [275.0, 49.666666666666664], [276.0, 45.333333333333336], [278.0, 46.25], [279.0, 53.5], [280.0, 48.54545454545455], [286.0, 53.0], [287.0, 52.5], [284.0, 51.5], [285.0, 50.0], [281.0, 51.666666666666664], [282.0, 50.5], [283.0, 60.0], [289.0, 53.5], [288.0, 54.333333333333336], [290.0, 54.857142857142854], [291.0, 56.4], [292.0, 55.4], [294.0, 57.0], [295.0, 58.125], [296.0, 58.6], [302.0, 63.5], [303.0, 61.333333333333336], [300.0, 62.142857142857146], [301.0, 62.0], [297.0, 60.0], [298.0, 60.666666666666664], [299.0, 61.0], [306.0, 66.0], [304.0, 60.0], [307.0, 69.33333333333333], [316.0, 67.2142857142857], [317.0, 67.0], [318.0, 65.46666666666668], [319.0, 57.0], [308.0, 66.77777777777777], [309.0, 63.5], [310.0, 68.9090909090909], [312.0, 68.85714285714286], [313.0, 64.6], [314.0, 66.55555555555557], [315.0, 66.0], [321.0, 62.8], [320.0, 64.57142857142857], [322.0, 62.3], [323.0, 61.0], [324.0, 58.875], [325.0, 58.0], [326.0, 56.53846153846154], [327.0, 55.333333333333336], [328.0, 53.81818181818182], [332.0, 46.0], [333.0, 55.0], [334.0, 46.60869565217391], [329.0, 53.0], [330.0, 50.1875], [331.0, 52.0], [337.0, 46.285714285714285], [336.0, 47.23529411764706], [338.0, 46.27272727272727], [339.0, 46.25000000000001], [340.0, 45.0], [341.0, 47.81818181818183], [342.0, 46.0], [343.0, 46.25], [344.0, 46.0], [350.0, 49.0], [351.0, 49.0], [348.0, 50.666666666666664], [349.0, 49.5], [345.0, 47.37499999999999], [346.0, 52.42857142857142], [347.0, 48.38461538461538], [354.0, 50.53333333333334], [352.0, 49.84615384615384], [355.0, 50.5], [364.0, 48.0], [365.0, 48.75], [367.0, 50.0], [366.0, 52.0], [356.0, 50.0], [357.0, 46.666666666666664], [358.0, 48.94117647058823], [359.0, 49.42857142857143], [361.0, 48.31249999999999], [362.0, 48.75], [363.0, 47.666666666666664], [369.0, 50.5], [368.0, 50.57142857142857], [370.0, 50.83333333333333], [371.0, 50.0], [372.0, 49.666666666666664], [373.0, 51.0], [374.0, 49.416666666666664], [375.0, 50.5], [376.0, 51.0], [382.0, 52.875], [380.0, 52.33333333333333], [381.0, 52.8], [378.0, 51.625], [379.0, 53.0], [385.0, 56.333333333333336], [384.0, 56.5], [386.0, 56.2], [387.0, 58.0], [388.0, 57.77777777777778], [389.0, 59.0], [390.0, 59.25], [391.0, 50.0], [392.0, 60.846153846153854], [399.0, 54.285714285714285], [396.0, 57.81818181818181], [397.0, 49.0], [398.0, 61.15], [393.0, 57.0], [394.0, 61.42857142857142], [395.0, 58.0], [401.0, 59.75], [400.0, 58.77777777777778], [402.0, 62.2], [403.0, 59.833333333333336], [404.0, 62.0], [405.0, 53.166666666666664], [406.0, 61.61538461538462], [407.0, 54.75], [408.0, 60.357142857142854], [409.0, 45.0], [414.0, 57.07142857142857], [415.0, 50.5], [412.0, 58.0], [413.0, 56.333333333333336], [410.0, 59.833333333333336], [411.0, 56.4], [418.0, 59.8], [416.0, 57.5], [417.0, 45.0], [419.0, 52.5], [428.0, 69.10000000000001], [429.0, 61.333333333333336], [430.0, 70.25], [431.0, 71.0], [420.0, 62.0], [421.0, 63.0], [422.0, 51.333333333333336], [423.0, 44.0], [424.0, 63.8], [426.0, 68.18181818181819], [425.0, 45.0], [427.0, 62.25], [433.0, 70.0], [432.0, 65.6], [434.0, 72.61538461538461], [435.0, 72.0], [436.0, 73.0], [437.0, 74.0], [438.0, 74.10000000000002], [439.0, 51.85714285714286], [440.0, 66.0], [446.0, 78.0], [447.0, 54.666666666666664], [444.0, 67.87500000000001], [445.0, 77.0], [441.0, 74.16666666666667], [442.0, 63.25], [443.0, 75.75], [449.0, 66.0], [448.0, 78.66666666666667], [450.0, 79.33333333333333], [451.0, 61.5], [452.0, 81.42857142857143], [453.0, 82.33333333333333], [454.0, 83.6], [455.0, 77.42857142857143], [456.0, 78.125], [462.0, 73.85714285714285], [463.0, 73.5], [460.0, 78.55555555555556], [461.0, 47.4], [457.0, 72.0], [458.0, 80.33333333333333], [459.0, 41.0], [476.0, 75.90909090909089], [465.0, 74.0], [464.0, 72.14285714285715], [466.0, 74.33333333333334], [467.0, 41.0], [477.0, 51.99999999999999], [478.0, 68.78571428571428], [479.0, 76.75], [468.0, 70.1875], [470.0, 52.49999999999999], [472.0, 77.375], [473.0, 76.85714285714285], [474.0, 76.8], [475.0, 76.0], [483.0, 75.33333333333333], [481.0, 49.900000000000006], [480.0, 70.61538461538461], [487.0, 39.0], [486.0, 39.0], [482.0, 65.14285714285714], [484.0, 71.3], [485.0, 65.75], [488.0, 63.8], [494.0, 81.53846153846153], [495.0, 81.08333333333334], [492.0, 75.17647058823529], [493.0, 53.473684210526315], [489.0, 59.0], [490.0, 81.00000000000001], [491.0, 66.33333333333333], [496.0, 77.93749999999999], [497.0, 80.53571428571429], [498.0, 72.25000000000001], [499.0, 65.8695652173913], [500.0, 40.03526945045479], [1.0, 0.33333333333333337]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[499.65058847075437, 40.04661585173247]], "isOverall": false, "label": "Get Fruit 2-Aggregated", "isController": false}, {"data": [[18.0, 40.0], [19.0, 30.0], [20.0, 17.666666666666668], [21.0, 7.666666666666667], [22.0, 13.833333333333334], [24.0, 7.0], [25.0, 7.0], [26.0, 6.5], [27.0, 8.4], [28.0, 6.0], [29.0, 9.5], [30.0, 11.0], [31.0, 13.0], [32.0, 16.666666666666668], [33.0, 2.0], [34.0, 5.0], [35.0, 5.0], [36.0, 6.75], [37.0, 10.5], [40.0, 10.714285714285714], [41.0, 10.0], [42.0, 24.500000000000004], [44.0, 10.142857142857144], [45.0, 10.714285714285714], [46.0, 11.0], [47.0, 21.666666666666664], [49.0, 13.5], [48.0, 14.0], [51.0, 13.666666666666666], [50.0, 14.0], [52.0, 12.25], [54.0, 11.333333333333334], [55.0, 11.0], [56.0, 8.0], [58.0, 11.125], [59.0, 12.0], [60.0, 14.4], [61.0, 15.0], [62.0, 17.25], [63.0, 18.0], [64.0, 19.0], [65.0, 18.0], [66.0, 19.0], [67.0, 17.666666666666668], [68.0, 17.428571428571427], [69.0, 17.5], [70.0, 17.833333333333332], [71.0, 16.5], [72.0, 15.571428571428571], [73.0, 15.571428571428571], [76.0, 20.0], [77.0, 19.9], [78.0, 20.0], [80.0, 22.5], [82.0, 24.25], [83.0, 25.0], [84.0, 25.166666666666664], [85.0, 24.0], [86.0, 24.857142857142858], [87.0, 21.0], [88.0, 20.833333333333332], [89.0, 20.0], [90.0, 20.333333333333336], [91.0, 20.5], [92.0, 18.11111111111111], [93.0, 17.0], [94.0, 18.0], [95.0, 20.0], [96.0, 20.75], [97.0, 21.0], [98.0, 23.57142857142857], [99.0, 23.5], [100.0, 24.5], [102.0, 26.0], [104.0, 27.5], [105.0, 28.0], [106.0, 29.166666666666664], [107.0, 29.5], [108.0, 30.333333333333336], [109.0, 29.0], [110.0, 29.0], [111.0, 27.0], [112.0, 30.0], [113.0, 43.0], [114.0, 29.8], [115.0, 30.0], [116.0, 31.125], [117.0, 31.0], [118.0, 29.714285714285715], [120.0, 28.1], [121.0, 30.0], [122.0, 28.666666666666668], [123.0, 30.0], [124.0, 29.5], [126.0, 30.0], [125.0, 59.0], [128.0, 32.142857142857146], [129.0, 30.666666666666668], [130.0, 30.874999999999996], [132.0, 32.285714285714285], [133.0, 31.666666666666668], [134.0, 32.75], [135.0, 32.5], [136.0, 34.2], [137.0, 35.0], [138.0, 37.8], [139.0, 37.666666666666664], [140.0, 37.0], [141.0, 38.0], [142.0, 46.666666666666664], [143.0, 38.5], [144.0, 39.833333333333336], [145.0, 38.5], [146.0, 42.8], [147.0, 50.5], [148.0, 39.0], [149.0, 39.333333333333336], [150.0, 38.857142857142854], [151.0, 39.0], [152.0, 41.99999999999999], [153.0, 38.0], [154.0, 37.714285714285715], [155.0, 42.5], [156.0, 35.0], [157.0, 34.666666666666664], [158.0, 34.0], [159.0, 49.0], [160.0, 34.25000000000001], [161.0, 33.666666666666664], [162.0, 32.0], [163.0, 40.8], [164.0, 45.0], [165.0, 35.4], [166.0, 35.42857142857143], [167.0, 34.714285714285715], [168.0, 35.25], [169.0, 34.5], [170.0, 40.14285714285714], [171.0, 36.0], [172.0, 36.90909090909091], [173.0, 37.0], [174.0, 39.888888888888886], [175.0, 62.0], [176.0, 39.81818181818181], [178.0, 37.333333333333336], [179.0, 49.5], [180.0, 39.0], [182.0, 37.8], [183.0, 35.71428571428571], [184.0, 35.333333333333336], [185.0, 40.6], [186.0, 35.25], [187.0, 40.0], [188.0, 34.42857142857143], [189.0, 41.5], [190.0, 34.857142857142854], [191.0, 35.666666666666664], [192.0, 35.833333333333336], [193.0, 44.666666666666664], [194.0, 36.222222222222214], [195.0, 35.5], [196.0, 35.4], [197.0, 35.0], [198.0, 38.2], [199.0, 43.333333333333336], [200.0, 32.76470588235294], [201.0, 31.727272727272734], [202.0, 42.0], [203.0, 36.0], [204.0, 32.714285714285715], [205.0, 48.0], [206.0, 34.57142857142858], [207.0, 32.0], [208.0, 34.0], [209.0, 46.5], [210.0, 31.25], [211.0, 42.0], [212.0, 34.9], [213.0, 31.125], [214.0, 39.99999999999999], [215.0, 32.2], [216.0, 35.63636363636363], [217.0, 33.5], [218.0, 39.36363636363636], [219.0, 34.33333333333333], [220.0, 40.6], [222.0, 34.50000000000001], [223.0, 35.0], [221.0, 63.0], [224.0, 35.72727272727273], [225.0, 45.0], [226.0, 40.285714285714285], [227.0, 36.5], [228.0, 41.30769230769231], [230.0, 38.85714285714286], [231.0, 42.0], [232.0, 37.77777777777778], [234.0, 37.92857142857143], [235.0, 44.0], [236.0, 36.92857142857143], [237.0, 36.5], [238.0, 39.5], [239.0, 35.0], [240.0, 37.45454545454545], [241.0, 37.75], [242.0, 40.2], [243.0, 42.25], [244.0, 36.0], [245.0, 39.25], [246.0, 36.0], [248.0, 39.0], [249.0, 35.0], [250.0, 34.71428571428571], [251.0, 34.0], [252.0, 40.13333333333333], [253.0, 35.75], [254.0, 36.0], [255.0, 42.25], [257.0, 43.0], [256.0, 39.93333333333334], [258.0, 39.7], [259.0, 40.625], [260.0, 37.714285714285715], [262.0, 43.49999999999999], [263.0, 37.0], [264.0, 40.44444444444444], [270.0, 46.57142857142858], [271.0, 41.333333333333336], [268.0, 43.58823529411765], [269.0, 40.5], [265.0, 50.0], [266.0, 39.25], [267.0, 40.0], [273.0, 43.5], [272.0, 45.833333333333336], [274.0, 46.0], [275.0, 44.0], [276.0, 47.57142857142857], [277.0, 46.0], [278.0, 47.36363636363637], [279.0, 49.16666666666667], [280.0, 47.714285714285715], [284.0, 50.21428571428572], [285.0, 51.25], [286.0, 53.142857142857146], [287.0, 54.0], [282.0, 49.0], [281.0, 59.0], [291.0, 56.0], [289.0, 53.0], [288.0, 53.16666666666667], [290.0, 54.333333333333336], [292.0, 56.0], [293.0, 58.5], [294.0, 55.857142857142854], [296.0, 59.0], [297.0, 59.0], [302.0, 63.625], [303.0, 59.666666666666664], [300.0, 61.14285714285714], [301.0, 60.0], [298.0, 60.1], [299.0, 61.0], [306.0, 67.0], [307.0, 70.0], [316.0, 67.27272727272727], [318.0, 67.24999999999999], [319.0, 65.25], [308.0, 68.91666666666669], [309.0, 68.66666666666667], [310.0, 67.90909090909092], [311.0, 68.0], [312.0, 69.14285714285715], [313.0, 65.75], [314.0, 68.22222222222223], [315.0, 63.0], [321.0, 63.666666666666664], [320.0, 63.800000000000004], [322.0, 61.63636363636364], [323.0, 58.333333333333336], [324.0, 60.45454545454545], [325.0, 57.0], [326.0, 56.705882352941174], [327.0, 55.0], [328.0, 53.46666666666666], [335.0, 56.0], [332.0, 46.0], [333.0, 55.0], [334.0, 46.28571428571428], [329.0, 52.0], [330.0, 48.27272727272727], [331.0, 46.0], [337.0, 47.33333333333333], [336.0, 45.61538461538461], [338.0, 45.25], [339.0, 45.2], [340.0, 47.285714285714285], [341.0, 46.0], [342.0, 49.0], [343.0, 47.22222222222223], [345.0, 47.23076923076923], [348.0, 52.666666666666664], [349.0, 48.875], [350.0, 48.857142857142854], [351.0, 54.0], [347.0, 48.699999999999996], [346.0, 54.0], [353.0, 51.0], [352.0, 49.764705882352935], [354.0, 50.57142857142857], [355.0, 50.214285714285715], [356.0, 49.5], [357.0, 49.333333333333336], [358.0, 49.42857142857142], [359.0, 48.882352941176464], [361.0, 48.333333333333336], [364.0, 47.0], [365.0, 48.00000000000001], [362.0, 50.25], [363.0, 48.333333333333336], [369.0, 50.0], [368.0, 50.5], [370.0, 50.6], [371.0, 50.2], [372.0, 49.46153846153845], [374.0, 49.416666666666664], [375.0, 50.333333333333336], [376.0, 50.90909090909091], [382.0, 52.83333333333333], [383.0, 55.0], [380.0, 52.625], [381.0, 52.0], [377.0, 52.5], [378.0, 51.7], [379.0, 51.5], [384.0, 56.06666666666667], [386.0, 56.666666666666664], [385.0, 51.0], [387.0, 50.0], [396.0, 57.333333333333336], [398.0, 62.66666666666666], [399.0, 58.75], [388.0, 58.72222222222223], [389.0, 56.0], [390.0, 59.583333333333336], [391.0, 60.0], [392.0, 62.0], [393.0, 59.8], [394.0, 62.333333333333336], [395.0, 62.5], [401.0, 59.875], [400.0, 59.5], [402.0, 61.7], [403.0, 52.666666666666664], [404.0, 61.090909090909086], [405.0, 58.25], [406.0, 61.76923076923077], [407.0, 54.5], [408.0, 59.777777777777786], [414.0, 55.09090909090909], [415.0, 45.0], [412.0, 57.13333333333333], [413.0, 52.4], [409.0, 54.666666666666664], [410.0, 58.36363636363637], [411.0, 55.75], [419.0, 54.0], [417.0, 52.0], [416.0, 56.666666666666664], [423.0, 44.0], [418.0, 58.0], [420.0, 61.8], [421.0, 45.0], [422.0, 54.5], [424.0, 69.14285714285715], [431.0, 53.0], [428.0, 69.16666666666667], [429.0, 44.0], [430.0, 70.0], [425.0, 56.75], [426.0, 68.88888888888889], [427.0, 56.0], [433.0, 57.25], [432.0, 68.76923076923076], [434.0, 70.36363636363637], [435.0, 65.5], [436.0, 69.99999999999999], [437.0, 73.0], [438.0, 71.16666666666666], [439.0, 61.6], [440.0, 70.37500000000001], [446.0, 77.8], [447.0, 54.666666666666664], [444.0, 72.75], [445.0, 60.0], [441.0, 66.75], [442.0, 70.71428571428572], [443.0, 68.25], [449.0, 60.25], [448.0, 79.18749999999999], [450.0, 76.18181818181819], [451.0, 42.0], [460.0, 79.39999999999999], [461.0, 61.285714285714285], [462.0, 73.53846153846153], [463.0, 60.8], [452.0, 81.28571428571429], [453.0, 55.666666666666664], [454.0, 83.05263157894737], [455.0, 69.66666666666667], [456.0, 73.8], [457.0, 78.23076923076923], [458.0, 81.0], [459.0, 41.666666666666664], [465.0, 57.5], [464.0, 65.875], [466.0, 74.8], [467.0, 41.0], [476.0, 76.0], [477.0, 62.62499999999999], [478.0, 65.3076923076923], [479.0, 68.6], [468.0, 73.6923076923077], [470.0, 65.60000000000001], [471.0, 67.25], [472.0, 70.5], [473.0, 76.75], [474.0, 67.41666666666667], [475.0, 70.66666666666666], [483.0, 74.66666666666667], [481.0, 54.0], [480.0, 68.8], [487.0, 39.0], [486.0, 39.0], [482.0, 70.99999999999999], [484.0, 67.0], [485.0, 64.42857142857143], [488.0, 75.77777777777777], [489.0, 38.0], [494.0, 76.90909090909092], [495.0, 74.0], [492.0, 72.0909090909091], [493.0, 69.05263157894736], [490.0, 81.23076923076924], [491.0, 49.25], [496.0, 78.1875], [497.0, 80.89999999999999], [498.0, 60.05263157894737], [499.0, 66.56250000000001], [500.0, 40.03498735099977]], "isOverall": false, "label": "Get Fruit 1", "isController": false}, {"data": [[499.6854331482004, 40.04758291221304]], "isOverall": false, "label": "Get Fruit 1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 72965.2, "minX": 1.64983464E12, "maxY": 1595325.3166666667, "series": [{"data": [[1.64983476E12, 1153807.2666666666], [1.64983494E12, 72965.2], [1.64983488E12, 1136546.5333333334], [1.6498347E12, 1150677.7333333334], [1.64983464E12, 1060976.2], [1.64983482E12, 1155668.7333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64983476E12, 1592755.6833333333], [1.64983494E12, 100723.7], [1.64983488E12, 1568928.3666666667], [1.6498347E12, 1588435.5666666667], [1.64983464E12, 1464608.45], [1.64983482E12, 1595325.3166666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64983494E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 39.776130769946384, "minX": 1.64983464E12, "maxY": 40.44334177871096, "series": [{"data": [[1.64983476E12, 39.84153355481727], [1.64983494E12, 40.036265754110744], [1.64983488E12, 40.443097712144386], [1.6498347E12, 39.95031794171996], [1.64983464E12, 40.24461388549125], [1.64983482E12, 39.77629148843609]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[1.64983476E12, 39.841829398272445], [1.64983494E12, 40.18959532678602], [1.64983488E12, 40.44334177871096], [1.6498347E12, 39.95003144855171], [1.64983464E12, 40.23908835069766], [1.64983482E12, 39.776130769946384]], "isOverall": false, "label": "Get Fruit 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64983494E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 39.7737478273551, "minX": 1.64983464E12, "maxY": 40.44095656702215, "series": [{"data": [[1.64983476E12, 39.83931162790737], [1.64983494E12, 40.03417911693548], [1.64983488E12, 40.440823077691405], [1.6498347E12, 39.948103276424604], [1.64983464E12, 40.24243370546693], [1.64983482E12, 39.77388470805472]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[1.64983476E12, 39.83957547583515], [1.64983494E12, 40.186716898070046], [1.64983488E12, 40.44095656702215], [1.6498347E12, 39.947686132787396], [1.64983464E12, 40.2367421944083], [1.64983482E12, 39.7737478273551]], "isOverall": false, "label": "Get Fruit 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64983494E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64983464E12, "maxY": 1.6469323717560955E-4, "series": [{"data": [[1.64983476E12, 6.910299003321976E-5], [1.64983494E12, 0.0], [1.64983488E12, 6.206001473250987E-5], [1.6498347E12, 6.929157361163386E-5], [1.64983464E12, 1.2144238859829746E-4], [1.64983482E12, 7.695328670141004E-5]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[1.64983476E12, 9.302745904798596E-5], [1.64983494E12, 0.0], [1.64983488E12, 7.015328492756408E-5], [1.6498347E12, 1.0127499893393887E-4], [1.64983464E12, 1.6469323717560955E-4], [1.64983482E12, 6.1033050723774536E-5]], "isOverall": false, "label": "Get Fruit 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64983494E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64983464E12, "maxY": 87.0, "series": [{"data": [[1.64983476E12, 84.0], [1.64983494E12, 65.0], [1.64983488E12, 66.0], [1.6498347E12, 62.0], [1.64983464E12, 87.0], [1.64983482E12, 62.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64983476E12, 46.0], [1.64983494E12, 46.0], [1.64983488E12, 44.0], [1.6498347E12, 44.0], [1.64983464E12, 45.0], [1.64983482E12, 44.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64983476E12, 50.0], [1.64983494E12, 59.0], [1.64983488E12, 48.0], [1.6498347E12, 46.0], [1.64983464E12, 48.0], [1.64983482E12, 47.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64983476E12, 47.0], [1.64983494E12, 48.0], [1.64983488E12, 46.0], [1.6498347E12, 45.0], [1.64983464E12, 47.0], [1.64983482E12, 45.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64983476E12, 24.0], [1.64983494E12, 0.0], [1.64983488E12, 25.0], [1.6498347E12, 35.0], [1.64983464E12, 2.0], [1.64983482E12, 34.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64983476E12, 39.0], [1.64983494E12, 40.0], [1.64983488E12, 38.0], [1.6498347E12, 38.0], [1.64983464E12, 38.0], [1.64983482E12, 39.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64983494E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 19.0, "minX": 666.0, "maxY": 55.0, "series": [{"data": [[11721.0, 40.0], [12113.0, 40.0], [12237.0, 40.0], [12253.0, 40.0], [12145.0, 40.0], [12269.0, 40.0], [12549.0, 39.0], [12373.0, 39.0], [12325.0, 39.0], [12369.0, 40.0], [12317.0, 39.0], [12565.0, 38.0], [12557.0, 39.0], [12585.0, 39.0], [12581.0, 39.0], [12569.0, 38.0], [12577.0, 38.0], [12713.0, 38.0], [12553.0, 39.0], [12709.0, 38.0], [12697.0, 38.0], [12701.0, 38.0], [12685.0, 39.0], [12673.0, 38.0], [12385.0, 38.0], [12417.0, 39.0], [12429.0, 39.0], [12453.0, 39.0], [12473.0, 38.0], [12489.0, 39.0], [12493.0, 39.0], [12629.0, 38.0], [12641.0, 39.0], [12617.0, 38.0], [12621.0, 39.0], [12625.0, 39.0], [12613.0, 38.0], [12661.0, 38.0], [12649.0, 38.0], [12653.0, 39.0], [12589.0, 39.0], [12601.0, 38.0], [12609.0, 38.0], [12593.0, 39.0], [12597.0, 39.0], [12301.0, 39.0], [12293.0, 40.0], [12541.0, 38.0], [12537.0, 39.0], [12529.0, 38.0], [12517.0, 39.0], [12513.0, 39.0], [666.0, 19.0], [6218.0, 55.0], [9804.0, 41.0], [12240.0, 40.0], [11968.0, 39.0], [12264.0, 38.0], [12248.0, 39.0], [12268.0, 40.0], [11944.0, 40.0], [12056.0, 40.0], [12036.0, 40.0], [12080.0, 40.0], [12012.0, 40.0], [12228.0, 40.0], [12552.0, 39.0], [12564.0, 38.0], [12372.0, 38.0], [12316.0, 40.0], [12308.0, 40.0], [12340.0, 39.0], [12324.0, 40.0], [12672.0, 38.0], [12696.0, 38.0], [12692.0, 38.0], [12544.0, 38.0], [12404.0, 39.0], [12444.0, 39.0], [12424.0, 39.0], [12460.0, 39.0], [12464.0, 39.0], [12480.0, 39.0], [12496.0, 38.0], [12568.0, 39.0], [12504.0, 39.0], [12632.0, 38.0], [12604.0, 38.0], [12608.0, 39.0], [12616.0, 38.0], [12620.0, 38.0], [12636.0, 38.0], [12652.0, 39.0], [12656.0, 38.0], [12664.0, 38.0], [12660.0, 38.0], [12644.0, 38.0], [12576.0, 39.0], [12580.0, 39.0], [12600.0, 39.0], [12588.0, 39.0], [12596.0, 39.0], [12584.0, 39.0], [12536.0, 39.0], [12516.0, 39.0], [12508.0, 38.0], [12512.0, 39.0], [11279.0, 44.0], [11707.0, 42.0], [11719.0, 42.0], [12287.0, 40.0], [11883.0, 40.0], [12067.0, 41.0], [12199.0, 40.0], [12059.0, 39.0], [12211.0, 40.0], [12123.0, 40.0], [12331.0, 39.0], [12319.0, 39.0], [12303.0, 40.0], [12323.0, 40.0], [12363.0, 39.0], [12367.0, 39.0], [12347.0, 39.0], [12355.0, 39.0], [12567.0, 39.0], [12579.0, 38.0], [12555.0, 38.0], [12551.0, 38.0], [12411.0, 39.0], [12707.0, 38.0], [12719.0, 38.0], [12703.0, 38.0], [12675.0, 38.0], [12403.0, 39.0], [12395.0, 39.0], [12387.0, 39.0], [12463.0, 39.0], [12435.0, 39.0], [12475.0, 39.0], [12487.0, 38.0], [12511.0, 39.0], [12495.0, 39.0], [12499.0, 39.0], [12603.0, 38.0], [12631.0, 38.0], [12639.0, 39.0], [12647.0, 39.0], [12643.0, 38.0], [12611.0, 38.0], [12619.0, 39.0], [12627.0, 39.0], [12659.0, 38.0], [12663.0, 39.0], [12667.0, 38.0], [12651.0, 38.0], [12599.0, 38.0], [12531.0, 38.0], [12299.0, 40.0], [12291.0, 39.0], [12543.0, 39.0], [12523.0, 39.0], [12162.0, 39.0], [12042.0, 41.0], [11846.0, 40.0], [12062.0, 40.0], [12110.0, 39.0], [12122.0, 40.0], [11954.0, 40.0], [11918.0, 40.0], [12690.0, 39.0], [12306.0, 39.0], [12390.0, 39.0], [12382.0, 39.0], [12322.0, 39.0], [12334.0, 39.0], [12338.0, 39.0], [12554.0, 39.0], [12562.0, 39.0], [12558.0, 38.0], [12710.0, 38.0], [12402.0, 39.0], [12682.0, 38.0], [12446.0, 39.0], [12422.0, 39.0], [12450.0, 39.0], [12462.0, 39.0], [12466.0, 39.0], [12470.0, 38.0], [12474.0, 39.0], [12478.0, 39.0], [12570.0, 39.0], [12490.0, 39.0], [12634.0, 38.0], [12602.0, 39.0], [12606.0, 38.0], [12626.0, 38.0], [12622.0, 38.0], [12614.0, 38.0], [12618.0, 38.0], [12650.0, 38.0], [12658.0, 38.0], [12666.0, 38.0], [12670.0, 38.0], [12662.0, 38.0], [12638.0, 38.0], [12642.0, 38.0], [12582.0, 39.0], [12574.0, 38.0], [12578.0, 39.0], [12590.0, 39.0], [12586.0, 39.0], [12594.0, 38.0], [12534.0, 39.0], [12526.0, 39.0], [12530.0, 39.0], [12522.0, 39.0], [12518.0, 38.0], [12510.0, 38.0], [12514.0, 39.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 12719.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 19.0, "minX": 666.0, "maxY": 55.0, "series": [{"data": [[11721.0, 40.0], [12113.0, 40.0], [12237.0, 40.0], [12253.0, 40.0], [12145.0, 40.0], [12269.0, 40.0], [12549.0, 39.0], [12373.0, 39.0], [12325.0, 39.0], [12369.0, 40.0], [12317.0, 39.0], [12565.0, 38.0], [12557.0, 39.0], [12585.0, 39.0], [12581.0, 39.0], [12569.0, 38.0], [12577.0, 38.0], [12713.0, 38.0], [12553.0, 39.0], [12709.0, 38.0], [12697.0, 38.0], [12701.0, 38.0], [12685.0, 39.0], [12673.0, 38.0], [12385.0, 38.0], [12417.0, 39.0], [12429.0, 39.0], [12453.0, 39.0], [12473.0, 38.0], [12489.0, 39.0], [12493.0, 39.0], [12629.0, 38.0], [12641.0, 39.0], [12617.0, 38.0], [12621.0, 39.0], [12625.0, 39.0], [12613.0, 38.0], [12661.0, 38.0], [12649.0, 38.0], [12653.0, 39.0], [12589.0, 39.0], [12601.0, 38.0], [12609.0, 38.0], [12593.0, 39.0], [12597.0, 39.0], [12301.0, 39.0], [12293.0, 40.0], [12541.0, 38.0], [12537.0, 39.0], [12529.0, 38.0], [12517.0, 39.0], [12513.0, 39.0], [666.0, 19.0], [6218.0, 55.0], [9804.0, 41.0], [12240.0, 40.0], [11968.0, 39.0], [12264.0, 38.0], [12248.0, 39.0], [12268.0, 40.0], [11944.0, 40.0], [12056.0, 40.0], [12036.0, 40.0], [12080.0, 40.0], [12012.0, 40.0], [12228.0, 40.0], [12552.0, 39.0], [12564.0, 38.0], [12372.0, 38.0], [12316.0, 40.0], [12308.0, 40.0], [12340.0, 39.0], [12324.0, 40.0], [12672.0, 38.0], [12696.0, 38.0], [12692.0, 38.0], [12544.0, 38.0], [12404.0, 39.0], [12444.0, 39.0], [12424.0, 39.0], [12460.0, 39.0], [12464.0, 39.0], [12480.0, 39.0], [12496.0, 38.0], [12568.0, 39.0], [12504.0, 39.0], [12632.0, 38.0], [12604.0, 38.0], [12608.0, 39.0], [12616.0, 38.0], [12620.0, 38.0], [12636.0, 38.0], [12652.0, 39.0], [12656.0, 38.0], [12664.0, 38.0], [12660.0, 38.0], [12644.0, 38.0], [12576.0, 39.0], [12580.0, 39.0], [12600.0, 39.0], [12588.0, 39.0], [12596.0, 39.0], [12584.0, 39.0], [12536.0, 39.0], [12516.0, 39.0], [12508.0, 38.0], [12512.0, 39.0], [11279.0, 44.0], [11707.0, 42.0], [11719.0, 42.0], [12287.0, 40.0], [11883.0, 40.0], [12067.0, 41.0], [12199.0, 40.0], [12059.0, 39.0], [12211.0, 40.0], [12123.0, 40.0], [12331.0, 39.0], [12319.0, 39.0], [12303.0, 40.0], [12323.0, 40.0], [12363.0, 39.0], [12367.0, 39.0], [12347.0, 39.0], [12355.0, 39.0], [12567.0, 39.0], [12579.0, 38.0], [12555.0, 38.0], [12551.0, 38.0], [12411.0, 39.0], [12707.0, 38.0], [12719.0, 38.0], [12703.0, 38.0], [12675.0, 38.0], [12403.0, 39.0], [12395.0, 39.0], [12387.0, 39.0], [12463.0, 39.0], [12435.0, 39.0], [12475.0, 39.0], [12487.0, 38.0], [12511.0, 39.0], [12495.0, 39.0], [12499.0, 39.0], [12603.0, 38.0], [12631.0, 38.0], [12639.0, 39.0], [12647.0, 39.0], [12643.0, 38.0], [12611.0, 38.0], [12619.0, 39.0], [12627.0, 39.0], [12659.0, 38.0], [12663.0, 39.0], [12667.0, 38.0], [12651.0, 38.0], [12599.0, 38.0], [12531.0, 38.0], [12299.0, 40.0], [12291.0, 39.0], [12543.0, 39.0], [12523.0, 39.0], [12162.0, 39.0], [12042.0, 41.0], [11846.0, 40.0], [12062.0, 40.0], [12110.0, 39.0], [12122.0, 40.0], [11954.0, 40.0], [11918.0, 40.0], [12690.0, 39.0], [12306.0, 39.0], [12390.0, 39.0], [12382.0, 39.0], [12322.0, 39.0], [12334.0, 39.0], [12338.0, 39.0], [12554.0, 39.0], [12562.0, 39.0], [12558.0, 38.0], [12710.0, 38.0], [12402.0, 39.0], [12682.0, 38.0], [12446.0, 39.0], [12422.0, 39.0], [12450.0, 39.0], [12462.0, 39.0], [12466.0, 39.0], [12470.0, 38.0], [12474.0, 39.0], [12478.0, 39.0], [12570.0, 39.0], [12490.0, 39.0], [12634.0, 38.0], [12602.0, 39.0], [12606.0, 38.0], [12626.0, 38.0], [12622.0, 38.0], [12614.0, 38.0], [12618.0, 38.0], [12650.0, 38.0], [12658.0, 38.0], [12666.0, 38.0], [12670.0, 38.0], [12662.0, 38.0], [12638.0, 38.0], [12642.0, 38.0], [12582.0, 39.0], [12574.0, 38.0], [12578.0, 39.0], [12590.0, 39.0], [12586.0, 39.0], [12594.0, 38.0], [12534.0, 39.0], [12526.0, 39.0], [12530.0, 39.0], [12522.0, 39.0], [12518.0, 38.0], [12510.0, 38.0], [12514.0, 39.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 12719.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 784.7666666666667, "minX": 1.64983464E12, "maxY": 12561.616666666667, "series": [{"data": [[1.64983476E12, 12541.383333333333], [1.64983494E12, 784.7666666666667], [1.64983488E12, 12353.766666666666], [1.6498347E12, 12507.366666666667], [1.64983464E12, 11540.683333333332], [1.64983482E12, 12561.616666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64983494E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 793.1, "minX": 1.64983464E12, "maxY": 12561.616666666667, "series": [{"data": [[1.64983476E12, 12541.383333333333], [1.64983494E12, 793.1], [1.64983488E12, 12353.766666666666], [1.6498347E12, 12507.366666666667], [1.64983464E12, 11532.35], [1.64983482E12, 12561.616666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64983494E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 393.73333333333335, "minX": 1.64983464E12, "maxY": 6280.866666666667, "series": [{"data": [[1.64983476E12, 6270.55], [1.64983494E12, 393.73333333333335], [1.64983488E12, 6176.95], [1.6498347E12, 6253.6], [1.64983464E12, 5768.3], [1.64983482E12, 6280.75]], "isOverall": false, "label": "Get Fruit 1-success", "isController": false}, {"data": [[1.64983476E12, 6270.833333333333], [1.64983494E12, 399.3666666666667], [1.64983488E12, 6176.816666666667], [1.6498347E12, 6253.766666666666], [1.64983464E12, 5764.05], [1.64983482E12, 6280.866666666667]], "isOverall": false, "label": "Get Fruit 2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64983494E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 793.1, "minX": 1.64983464E12, "maxY": 12561.616666666667, "series": [{"data": [[1.64983476E12, 12541.383333333333], [1.64983494E12, 793.1], [1.64983488E12, 12353.766666666666], [1.6498347E12, 12507.366666666667], [1.64983464E12, 11532.35], [1.64983482E12, 12561.616666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64983494E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

