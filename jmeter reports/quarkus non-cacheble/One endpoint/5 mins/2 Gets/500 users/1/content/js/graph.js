/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1798.0, "series": [{"data": [[0.0, 0.0], [0.1, 18.0], [0.2, 38.0], [0.3, 76.0], [0.4, 79.0], [0.5, 79.0], [0.6, 80.0], [0.7, 80.0], [0.8, 80.0], [0.9, 80.0], [1.0, 80.0], [1.1, 80.0], [1.2, 80.0], [1.3, 80.0], [1.4, 80.0], [1.5, 80.0], [1.6, 80.0], [1.7, 80.0], [1.8, 80.0], [1.9, 80.0], [2.0, 80.0], [2.1, 80.0], [2.2, 80.0], [2.3, 80.0], [2.4, 80.0], [2.5, 80.0], [2.6, 80.0], [2.7, 80.0], [2.8, 80.0], [2.9, 80.0], [3.0, 80.0], [3.1, 80.0], [3.2, 80.0], [3.3, 80.0], [3.4, 80.0], [3.5, 81.0], [3.6, 81.0], [3.7, 81.0], [3.8, 81.0], [3.9, 81.0], [4.0, 81.0], [4.1, 81.0], [4.2, 81.0], [4.3, 81.0], [4.4, 81.0], [4.5, 81.0], [4.6, 81.0], [4.7, 81.0], [4.8, 81.0], [4.9, 81.0], [5.0, 81.0], [5.1, 81.0], [5.2, 81.0], [5.3, 81.0], [5.4, 81.0], [5.5, 81.0], [5.6, 81.0], [5.7, 81.0], [5.8, 81.0], [5.9, 81.0], [6.0, 81.0], [6.1, 81.0], [6.2, 81.0], [6.3, 81.0], [6.4, 81.0], [6.5, 81.0], [6.6, 81.0], [6.7, 81.0], [6.8, 81.0], [6.9, 81.0], [7.0, 81.0], [7.1, 81.0], [7.2, 81.0], [7.3, 81.0], [7.4, 81.0], [7.5, 81.0], [7.6, 81.0], [7.7, 81.0], [7.8, 81.0], [7.9, 81.0], [8.0, 81.0], [8.1, 81.0], [8.2, 81.0], [8.3, 81.0], [8.4, 81.0], [8.5, 81.0], [8.6, 81.0], [8.7, 81.0], [8.8, 81.0], [8.9, 81.0], [9.0, 81.0], [9.1, 81.0], [9.2, 81.0], [9.3, 81.0], [9.4, 81.0], [9.5, 81.0], [9.6, 81.0], [9.7, 81.0], [9.8, 81.0], [9.9, 81.0], [10.0, 81.0], [10.1, 81.0], [10.2, 81.0], [10.3, 81.0], [10.4, 81.0], [10.5, 81.0], [10.6, 81.0], [10.7, 81.0], [10.8, 81.0], [10.9, 82.0], [11.0, 82.0], [11.1, 82.0], [11.2, 82.0], [11.3, 82.0], [11.4, 82.0], [11.5, 82.0], [11.6, 82.0], [11.7, 82.0], [11.8, 82.0], [11.9, 82.0], [12.0, 82.0], [12.1, 82.0], [12.2, 82.0], [12.3, 82.0], [12.4, 82.0], [12.5, 82.0], [12.6, 82.0], [12.7, 82.0], [12.8, 82.0], [12.9, 82.0], [13.0, 82.0], [13.1, 82.0], [13.2, 82.0], [13.3, 82.0], [13.4, 82.0], [13.5, 82.0], [13.6, 82.0], [13.7, 82.0], [13.8, 82.0], [13.9, 82.0], [14.0, 82.0], [14.1, 82.0], [14.2, 82.0], [14.3, 82.0], [14.4, 82.0], [14.5, 82.0], [14.6, 82.0], [14.7, 82.0], [14.8, 82.0], [14.9, 82.0], [15.0, 82.0], [15.1, 82.0], [15.2, 82.0], [15.3, 82.0], [15.4, 82.0], [15.5, 82.0], [15.6, 82.0], [15.7, 82.0], [15.8, 82.0], [15.9, 82.0], [16.0, 82.0], [16.1, 82.0], [16.2, 82.0], [16.3, 82.0], [16.4, 82.0], [16.5, 82.0], [16.6, 82.0], [16.7, 82.0], [16.8, 82.0], [16.9, 82.0], [17.0, 82.0], [17.1, 82.0], [17.2, 82.0], [17.3, 82.0], [17.4, 82.0], [17.5, 82.0], [17.6, 82.0], [17.7, 82.0], [17.8, 82.0], [17.9, 82.0], [18.0, 82.0], [18.1, 82.0], [18.2, 82.0], [18.3, 82.0], [18.4, 82.0], [18.5, 82.0], [18.6, 82.0], [18.7, 82.0], [18.8, 82.0], [18.9, 82.0], [19.0, 83.0], [19.1, 83.0], [19.2, 83.0], [19.3, 83.0], [19.4, 83.0], [19.5, 83.0], [19.6, 83.0], [19.7, 83.0], [19.8, 83.0], [19.9, 83.0], [20.0, 83.0], [20.1, 83.0], [20.2, 83.0], [20.3, 83.0], [20.4, 83.0], [20.5, 83.0], [20.6, 83.0], [20.7, 83.0], [20.8, 83.0], [20.9, 83.0], [21.0, 83.0], [21.1, 83.0], [21.2, 83.0], [21.3, 83.0], [21.4, 83.0], [21.5, 83.0], [21.6, 83.0], [21.7, 83.0], [21.8, 83.0], [21.9, 83.0], [22.0, 83.0], [22.1, 83.0], [22.2, 83.0], [22.3, 83.0], [22.4, 83.0], [22.5, 83.0], [22.6, 83.0], [22.7, 83.0], [22.8, 83.0], [22.9, 83.0], [23.0, 83.0], [23.1, 83.0], [23.2, 83.0], [23.3, 83.0], [23.4, 83.0], [23.5, 83.0], [23.6, 83.0], [23.7, 83.0], [23.8, 83.0], [23.9, 83.0], [24.0, 83.0], [24.1, 83.0], [24.2, 83.0], [24.3, 83.0], [24.4, 83.0], [24.5, 83.0], [24.6, 83.0], [24.7, 83.0], [24.8, 83.0], [24.9, 83.0], [25.0, 83.0], [25.1, 83.0], [25.2, 83.0], [25.3, 83.0], [25.4, 83.0], [25.5, 83.0], [25.6, 83.0], [25.7, 83.0], [25.8, 83.0], [25.9, 83.0], [26.0, 83.0], [26.1, 83.0], [26.2, 83.0], [26.3, 83.0], [26.4, 83.0], [26.5, 83.0], [26.6, 83.0], [26.7, 83.0], [26.8, 83.0], [26.9, 83.0], [27.0, 83.0], [27.1, 83.0], [27.2, 83.0], [27.3, 83.0], [27.4, 83.0], [27.5, 83.0], [27.6, 83.0], [27.7, 84.0], [27.8, 84.0], [27.9, 84.0], [28.0, 84.0], [28.1, 84.0], [28.2, 84.0], [28.3, 84.0], [28.4, 84.0], [28.5, 84.0], [28.6, 84.0], [28.7, 84.0], [28.8, 84.0], [28.9, 84.0], [29.0, 84.0], [29.1, 84.0], [29.2, 84.0], [29.3, 84.0], [29.4, 84.0], [29.5, 84.0], [29.6, 84.0], [29.7, 84.0], [29.8, 84.0], [29.9, 84.0], [30.0, 84.0], [30.1, 84.0], [30.2, 84.0], [30.3, 84.0], [30.4, 84.0], [30.5, 84.0], [30.6, 84.0], [30.7, 84.0], [30.8, 84.0], [30.9, 84.0], [31.0, 84.0], [31.1, 84.0], [31.2, 84.0], [31.3, 84.0], [31.4, 84.0], [31.5, 84.0], [31.6, 84.0], [31.7, 84.0], [31.8, 84.0], [31.9, 84.0], [32.0, 84.0], [32.1, 84.0], [32.2, 84.0], [32.3, 84.0], [32.4, 84.0], [32.5, 84.0], [32.6, 84.0], [32.7, 84.0], [32.8, 84.0], [32.9, 84.0], [33.0, 84.0], [33.1, 84.0], [33.2, 84.0], [33.3, 84.0], [33.4, 84.0], [33.5, 84.0], [33.6, 84.0], [33.7, 84.0], [33.8, 84.0], [33.9, 84.0], [34.0, 84.0], [34.1, 84.0], [34.2, 84.0], [34.3, 84.0], [34.4, 84.0], [34.5, 84.0], [34.6, 84.0], [34.7, 84.0], [34.8, 84.0], [34.9, 84.0], [35.0, 84.0], [35.1, 84.0], [35.2, 84.0], [35.3, 84.0], [35.4, 84.0], [35.5, 84.0], [35.6, 84.0], [35.7, 84.0], [35.8, 84.0], [35.9, 84.0], [36.0, 84.0], [36.1, 84.0], [36.2, 84.0], [36.3, 84.0], [36.4, 84.0], [36.5, 84.0], [36.6, 84.0], [36.7, 84.0], [36.8, 84.0], [36.9, 84.0], [37.0, 84.0], [37.1, 84.0], [37.2, 84.0], [37.3, 84.0], [37.4, 85.0], [37.5, 85.0], [37.6, 85.0], [37.7, 85.0], [37.8, 85.0], [37.9, 85.0], [38.0, 85.0], [38.1, 85.0], [38.2, 85.0], [38.3, 85.0], [38.4, 85.0], [38.5, 85.0], [38.6, 85.0], [38.7, 85.0], [38.8, 85.0], [38.9, 85.0], [39.0, 85.0], [39.1, 85.0], [39.2, 85.0], [39.3, 85.0], [39.4, 85.0], [39.5, 85.0], [39.6, 85.0], [39.7, 85.0], [39.8, 85.0], [39.9, 85.0], [40.0, 85.0], [40.1, 85.0], [40.2, 85.0], [40.3, 85.0], [40.4, 85.0], [40.5, 85.0], [40.6, 85.0], [40.7, 85.0], [40.8, 85.0], [40.9, 85.0], [41.0, 85.0], [41.1, 85.0], [41.2, 85.0], [41.3, 85.0], [41.4, 85.0], [41.5, 85.0], [41.6, 85.0], [41.7, 85.0], [41.8, 85.0], [41.9, 85.0], [42.0, 85.0], [42.1, 85.0], [42.2, 85.0], [42.3, 85.0], [42.4, 85.0], [42.5, 85.0], [42.6, 85.0], [42.7, 85.0], [42.8, 85.0], [42.9, 85.0], [43.0, 85.0], [43.1, 85.0], [43.2, 85.0], [43.3, 85.0], [43.4, 85.0], [43.5, 85.0], [43.6, 85.0], [43.7, 85.0], [43.8, 85.0], [43.9, 85.0], [44.0, 85.0], [44.1, 85.0], [44.2, 85.0], [44.3, 85.0], [44.4, 85.0], [44.5, 85.0], [44.6, 85.0], [44.7, 85.0], [44.8, 85.0], [44.9, 85.0], [45.0, 85.0], [45.1, 85.0], [45.2, 85.0], [45.3, 85.0], [45.4, 85.0], [45.5, 85.0], [45.6, 85.0], [45.7, 85.0], [45.8, 85.0], [45.9, 85.0], [46.0, 85.0], [46.1, 85.0], [46.2, 85.0], [46.3, 86.0], [46.4, 86.0], [46.5, 86.0], [46.6, 86.0], [46.7, 86.0], [46.8, 86.0], [46.9, 86.0], [47.0, 86.0], [47.1, 86.0], [47.2, 86.0], [47.3, 86.0], [47.4, 86.0], [47.5, 86.0], [47.6, 86.0], [47.7, 86.0], [47.8, 86.0], [47.9, 86.0], [48.0, 86.0], [48.1, 86.0], [48.2, 86.0], [48.3, 86.0], [48.4, 86.0], [48.5, 86.0], [48.6, 86.0], [48.7, 86.0], [48.8, 86.0], [48.9, 86.0], [49.0, 86.0], [49.1, 86.0], [49.2, 86.0], [49.3, 86.0], [49.4, 86.0], [49.5, 86.0], [49.6, 86.0], [49.7, 86.0], [49.8, 86.0], [49.9, 86.0], [50.0, 86.0], [50.1, 86.0], [50.2, 86.0], [50.3, 86.0], [50.4, 86.0], [50.5, 86.0], [50.6, 86.0], [50.7, 86.0], [50.8, 86.0], [50.9, 86.0], [51.0, 86.0], [51.1, 86.0], [51.2, 86.0], [51.3, 86.0], [51.4, 86.0], [51.5, 86.0], [51.6, 86.0], [51.7, 86.0], [51.8, 86.0], [51.9, 86.0], [52.0, 86.0], [52.1, 86.0], [52.2, 86.0], [52.3, 86.0], [52.4, 86.0], [52.5, 86.0], [52.6, 86.0], [52.7, 86.0], [52.8, 86.0], [52.9, 86.0], [53.0, 86.0], [53.1, 86.0], [53.2, 87.0], [53.3, 87.0], [53.4, 87.0], [53.5, 87.0], [53.6, 87.0], [53.7, 87.0], [53.8, 87.0], [53.9, 87.0], [54.0, 87.0], [54.1, 87.0], [54.2, 87.0], [54.3, 87.0], [54.4, 87.0], [54.5, 87.0], [54.6, 87.0], [54.7, 87.0], [54.8, 87.0], [54.9, 87.0], [55.0, 87.0], [55.1, 87.0], [55.2, 87.0], [55.3, 87.0], [55.4, 87.0], [55.5, 87.0], [55.6, 87.0], [55.7, 87.0], [55.8, 87.0], [55.9, 87.0], [56.0, 87.0], [56.1, 87.0], [56.2, 87.0], [56.3, 87.0], [56.4, 87.0], [56.5, 87.0], [56.6, 87.0], [56.7, 87.0], [56.8, 87.0], [56.9, 87.0], [57.0, 87.0], [57.1, 87.0], [57.2, 87.0], [57.3, 87.0], [57.4, 87.0], [57.5, 87.0], [57.6, 87.0], [57.7, 87.0], [57.8, 87.0], [57.9, 87.0], [58.0, 87.0], [58.1, 88.0], [58.2, 88.0], [58.3, 88.0], [58.4, 88.0], [58.5, 88.0], [58.6, 88.0], [58.7, 88.0], [58.8, 88.0], [58.9, 88.0], [59.0, 88.0], [59.1, 88.0], [59.2, 88.0], [59.3, 88.0], [59.4, 88.0], [59.5, 88.0], [59.6, 88.0], [59.7, 88.0], [59.8, 88.0], [59.9, 88.0], [60.0, 88.0], [60.1, 88.0], [60.2, 88.0], [60.3, 88.0], [60.4, 88.0], [60.5, 88.0], [60.6, 88.0], [60.7, 88.0], [60.8, 88.0], [60.9, 88.0], [61.0, 88.0], [61.1, 88.0], [61.2, 88.0], [61.3, 88.0], [61.4, 88.0], [61.5, 88.0], [61.6, 89.0], [61.7, 89.0], [61.8, 89.0], [61.9, 89.0], [62.0, 89.0], [62.1, 89.0], [62.2, 89.0], [62.3, 89.0], [62.4, 89.0], [62.5, 89.0], [62.6, 89.0], [62.7, 89.0], [62.8, 89.0], [62.9, 89.0], [63.0, 89.0], [63.1, 89.0], [63.2, 89.0], [63.3, 89.0], [63.4, 89.0], [63.5, 89.0], [63.6, 89.0], [63.7, 89.0], [63.8, 89.0], [63.9, 89.0], [64.0, 89.0], [64.1, 89.0], [64.2, 89.0], [64.3, 90.0], [64.4, 90.0], [64.5, 90.0], [64.6, 90.0], [64.7, 90.0], [64.8, 90.0], [64.9, 90.0], [65.0, 90.0], [65.1, 90.0], [65.2, 90.0], [65.3, 90.0], [65.4, 90.0], [65.5, 90.0], [65.6, 90.0], [65.7, 90.0], [65.8, 90.0], [65.9, 90.0], [66.0, 90.0], [66.1, 90.0], [66.2, 90.0], [66.3, 90.0], [66.4, 90.0], [66.5, 91.0], [66.6, 91.0], [66.7, 91.0], [66.8, 91.0], [66.9, 91.0], [67.0, 91.0], [67.1, 91.0], [67.2, 91.0], [67.3, 91.0], [67.4, 91.0], [67.5, 91.0], [67.6, 91.0], [67.7, 91.0], [67.8, 91.0], [67.9, 91.0], [68.0, 91.0], [68.1, 91.0], [68.2, 91.0], [68.3, 91.0], [68.4, 91.0], [68.5, 92.0], [68.6, 92.0], [68.7, 92.0], [68.8, 92.0], [68.9, 92.0], [69.0, 92.0], [69.1, 92.0], [69.2, 92.0], [69.3, 92.0], [69.4, 92.0], [69.5, 92.0], [69.6, 92.0], [69.7, 92.0], [69.8, 92.0], [69.9, 92.0], [70.0, 92.0], [70.1, 92.0], [70.2, 92.0], [70.3, 92.0], [70.4, 92.0], [70.5, 92.0], [70.6, 93.0], [70.7, 93.0], [70.8, 93.0], [70.9, 93.0], [71.0, 93.0], [71.1, 93.0], [71.2, 93.0], [71.3, 93.0], [71.4, 93.0], [71.5, 93.0], [71.6, 93.0], [71.7, 93.0], [71.8, 93.0], [71.9, 93.0], [72.0, 93.0], [72.1, 93.0], [72.2, 93.0], [72.3, 93.0], [72.4, 93.0], [72.5, 93.0], [72.6, 93.0], [72.7, 93.0], [72.8, 93.0], [72.9, 94.0], [73.0, 94.0], [73.1, 94.0], [73.2, 94.0], [73.3, 94.0], [73.4, 94.0], [73.5, 94.0], [73.6, 94.0], [73.7, 94.0], [73.8, 94.0], [73.9, 94.0], [74.0, 94.0], [74.1, 94.0], [74.2, 94.0], [74.3, 94.0], [74.4, 94.0], [74.5, 94.0], [74.6, 94.0], [74.7, 94.0], [74.8, 94.0], [74.9, 94.0], [75.0, 94.0], [75.1, 94.0], [75.2, 94.0], [75.3, 95.0], [75.4, 95.0], [75.5, 95.0], [75.6, 95.0], [75.7, 95.0], [75.8, 95.0], [75.9, 95.0], [76.0, 95.0], [76.1, 95.0], [76.2, 95.0], [76.3, 95.0], [76.4, 95.0], [76.5, 95.0], [76.6, 95.0], [76.7, 95.0], [76.8, 95.0], [76.9, 95.0], [77.0, 95.0], [77.1, 95.0], [77.2, 95.0], [77.3, 95.0], [77.4, 95.0], [77.5, 95.0], [77.6, 95.0], [77.7, 96.0], [77.8, 96.0], [77.9, 96.0], [78.0, 96.0], [78.1, 96.0], [78.2, 96.0], [78.3, 96.0], [78.4, 96.0], [78.5, 96.0], [78.6, 96.0], [78.7, 96.0], [78.8, 96.0], [78.9, 96.0], [79.0, 96.0], [79.1, 96.0], [79.2, 96.0], [79.3, 96.0], [79.4, 96.0], [79.5, 96.0], [79.6, 96.0], [79.7, 96.0], [79.8, 96.0], [79.9, 96.0], [80.0, 96.0], [80.1, 96.0], [80.2, 97.0], [80.3, 97.0], [80.4, 97.0], [80.5, 97.0], [80.6, 97.0], [80.7, 97.0], [80.8, 97.0], [80.9, 97.0], [81.0, 97.0], [81.1, 97.0], [81.2, 97.0], [81.3, 97.0], [81.4, 97.0], [81.5, 97.0], [81.6, 97.0], [81.7, 97.0], [81.8, 97.0], [81.9, 97.0], [82.0, 97.0], [82.1, 97.0], [82.2, 97.0], [82.3, 97.0], [82.4, 97.0], [82.5, 97.0], [82.6, 97.0], [82.7, 97.0], [82.8, 98.0], [82.9, 98.0], [83.0, 98.0], [83.1, 98.0], [83.2, 98.0], [83.3, 98.0], [83.4, 98.0], [83.5, 98.0], [83.6, 98.0], [83.7, 98.0], [83.8, 98.0], [83.9, 98.0], [84.0, 98.0], [84.1, 98.0], [84.2, 98.0], [84.3, 98.0], [84.4, 98.0], [84.5, 98.0], [84.6, 98.0], [84.7, 98.0], [84.8, 98.0], [84.9, 98.0], [85.0, 98.0], [85.1, 98.0], [85.2, 98.0], [85.3, 98.0], [85.4, 99.0], [85.5, 99.0], [85.6, 99.0], [85.7, 99.0], [85.8, 99.0], [85.9, 99.0], [86.0, 99.0], [86.1, 99.0], [86.2, 99.0], [86.3, 99.0], [86.4, 99.0], [86.5, 99.0], [86.6, 99.0], [86.7, 99.0], [86.8, 99.0], [86.9, 99.0], [87.0, 99.0], [87.1, 99.0], [87.2, 99.0], [87.3, 99.0], [87.4, 99.0], [87.5, 99.0], [87.6, 99.0], [87.7, 100.0], [87.8, 100.0], [87.9, 100.0], [88.0, 100.0], [88.1, 100.0], [88.2, 100.0], [88.3, 100.0], [88.4, 100.0], [88.5, 100.0], [88.6, 100.0], [88.7, 100.0], [88.8, 100.0], [88.9, 100.0], [89.0, 100.0], [89.1, 100.0], [89.2, 100.0], [89.3, 100.0], [89.4, 100.0], [89.5, 100.0], [89.6, 100.0], [89.7, 100.0], [89.8, 101.0], [89.9, 101.0], [90.0, 101.0], [90.1, 101.0], [90.2, 101.0], [90.3, 101.0], [90.4, 101.0], [90.5, 101.0], [90.6, 101.0], [90.7, 101.0], [90.8, 101.0], [90.9, 101.0], [91.0, 101.0], [91.1, 101.0], [91.2, 101.0], [91.3, 101.0], [91.4, 101.0], [91.5, 102.0], [91.6, 102.0], [91.7, 102.0], [91.8, 102.0], [91.9, 102.0], [92.0, 102.0], [92.1, 102.0], [92.2, 102.0], [92.3, 102.0], [92.4, 102.0], [92.5, 102.0], [92.6, 102.0], [92.7, 102.0], [92.8, 103.0], [92.9, 103.0], [93.0, 103.0], [93.1, 103.0], [93.2, 103.0], [93.3, 103.0], [93.4, 103.0], [93.5, 103.0], [93.6, 103.0], [93.7, 103.0], [93.8, 103.0], [93.9, 104.0], [94.0, 104.0], [94.1, 104.0], [94.2, 104.0], [94.3, 104.0], [94.4, 104.0], [94.5, 104.0], [94.6, 104.0], [94.7, 104.0], [94.8, 104.0], [94.9, 105.0], [95.0, 105.0], [95.1, 105.0], [95.2, 105.0], [95.3, 105.0], [95.4, 105.0], [95.5, 105.0], [95.6, 106.0], [95.7, 106.0], [95.8, 106.0], [95.9, 106.0], [96.0, 106.0], [96.1, 106.0], [96.2, 107.0], [96.3, 107.0], [96.4, 107.0], [96.5, 107.0], [96.6, 108.0], [96.7, 108.0], [96.8, 108.0], [96.9, 108.0], [97.0, 109.0], [97.1, 109.0], [97.2, 109.0], [97.3, 109.0], [97.4, 110.0], [97.5, 110.0], [97.6, 110.0], [97.7, 111.0], [97.8, 111.0], [97.9, 112.0], [98.0, 112.0], [98.1, 113.0], [98.2, 113.0], [98.3, 114.0], [98.4, 114.0], [98.5, 115.0], [98.6, 116.0], [98.7, 116.0], [98.8, 117.0], [98.9, 118.0], [99.0, 119.0], [99.1, 121.0], [99.2, 123.0], [99.3, 126.0], [99.4, 130.0], [99.5, 138.0], [99.6, 153.0], [99.7, 250.0], [99.8, 299.0], [99.9, 360.0]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[0.0, 61.0], [0.1, 79.0], [0.2, 79.0], [0.3, 80.0], [0.4, 80.0], [0.5, 80.0], [0.6, 80.0], [0.7, 80.0], [0.8, 80.0], [0.9, 80.0], [1.0, 80.0], [1.1, 80.0], [1.2, 80.0], [1.3, 80.0], [1.4, 80.0], [1.5, 80.0], [1.6, 80.0], [1.7, 80.0], [1.8, 80.0], [1.9, 80.0], [2.0, 80.0], [2.1, 80.0], [2.2, 80.0], [2.3, 80.0], [2.4, 80.0], [2.5, 80.0], [2.6, 80.0], [2.7, 80.0], [2.8, 80.0], [2.9, 80.0], [3.0, 80.0], [3.1, 80.0], [3.2, 81.0], [3.3, 81.0], [3.4, 81.0], [3.5, 81.0], [3.6, 81.0], [3.7, 81.0], [3.8, 81.0], [3.9, 81.0], [4.0, 81.0], [4.1, 81.0], [4.2, 81.0], [4.3, 81.0], [4.4, 81.0], [4.5, 81.0], [4.6, 81.0], [4.7, 81.0], [4.8, 81.0], [4.9, 81.0], [5.0, 81.0], [5.1, 81.0], [5.2, 81.0], [5.3, 81.0], [5.4, 81.0], [5.5, 81.0], [5.6, 81.0], [5.7, 81.0], [5.8, 81.0], [5.9, 81.0], [6.0, 81.0], [6.1, 81.0], [6.2, 81.0], [6.3, 81.0], [6.4, 81.0], [6.5, 81.0], [6.6, 81.0], [6.7, 81.0], [6.8, 81.0], [6.9, 81.0], [7.0, 81.0], [7.1, 81.0], [7.2, 81.0], [7.3, 81.0], [7.4, 81.0], [7.5, 81.0], [7.6, 81.0], [7.7, 81.0], [7.8, 81.0], [7.9, 81.0], [8.0, 81.0], [8.1, 81.0], [8.2, 81.0], [8.3, 81.0], [8.4, 81.0], [8.5, 81.0], [8.6, 81.0], [8.7, 81.0], [8.8, 81.0], [8.9, 81.0], [9.0, 81.0], [9.1, 81.0], [9.2, 81.0], [9.3, 81.0], [9.4, 81.0], [9.5, 81.0], [9.6, 81.0], [9.7, 81.0], [9.8, 81.0], [9.9, 81.0], [10.0, 81.0], [10.1, 81.0], [10.2, 81.0], [10.3, 81.0], [10.4, 81.0], [10.5, 81.0], [10.6, 81.0], [10.7, 82.0], [10.8, 82.0], [10.9, 82.0], [11.0, 82.0], [11.1, 82.0], [11.2, 82.0], [11.3, 82.0], [11.4, 82.0], [11.5, 82.0], [11.6, 82.0], [11.7, 82.0], [11.8, 82.0], [11.9, 82.0], [12.0, 82.0], [12.1, 82.0], [12.2, 82.0], [12.3, 82.0], [12.4, 82.0], [12.5, 82.0], [12.6, 82.0], [12.7, 82.0], [12.8, 82.0], [12.9, 82.0], [13.0, 82.0], [13.1, 82.0], [13.2, 82.0], [13.3, 82.0], [13.4, 82.0], [13.5, 82.0], [13.6, 82.0], [13.7, 82.0], [13.8, 82.0], [13.9, 82.0], [14.0, 82.0], [14.1, 82.0], [14.2, 82.0], [14.3, 82.0], [14.4, 82.0], [14.5, 82.0], [14.6, 82.0], [14.7, 82.0], [14.8, 82.0], [14.9, 82.0], [15.0, 82.0], [15.1, 82.0], [15.2, 82.0], [15.3, 82.0], [15.4, 82.0], [15.5, 82.0], [15.6, 82.0], [15.7, 82.0], [15.8, 82.0], [15.9, 82.0], [16.0, 82.0], [16.1, 82.0], [16.2, 82.0], [16.3, 82.0], [16.4, 82.0], [16.5, 82.0], [16.6, 82.0], [16.7, 82.0], [16.8, 82.0], [16.9, 82.0], [17.0, 82.0], [17.1, 82.0], [17.2, 82.0], [17.3, 82.0], [17.4, 82.0], [17.5, 82.0], [17.6, 82.0], [17.7, 82.0], [17.8, 82.0], [17.9, 82.0], [18.0, 82.0], [18.1, 82.0], [18.2, 82.0], [18.3, 82.0], [18.4, 82.0], [18.5, 82.0], [18.6, 82.0], [18.7, 82.0], [18.8, 83.0], [18.9, 83.0], [19.0, 83.0], [19.1, 83.0], [19.2, 83.0], [19.3, 83.0], [19.4, 83.0], [19.5, 83.0], [19.6, 83.0], [19.7, 83.0], [19.8, 83.0], [19.9, 83.0], [20.0, 83.0], [20.1, 83.0], [20.2, 83.0], [20.3, 83.0], [20.4, 83.0], [20.5, 83.0], [20.6, 83.0], [20.7, 83.0], [20.8, 83.0], [20.9, 83.0], [21.0, 83.0], [21.1, 83.0], [21.2, 83.0], [21.3, 83.0], [21.4, 83.0], [21.5, 83.0], [21.6, 83.0], [21.7, 83.0], [21.8, 83.0], [21.9, 83.0], [22.0, 83.0], [22.1, 83.0], [22.2, 83.0], [22.3, 83.0], [22.4, 83.0], [22.5, 83.0], [22.6, 83.0], [22.7, 83.0], [22.8, 83.0], [22.9, 83.0], [23.0, 83.0], [23.1, 83.0], [23.2, 83.0], [23.3, 83.0], [23.4, 83.0], [23.5, 83.0], [23.6, 83.0], [23.7, 83.0], [23.8, 83.0], [23.9, 83.0], [24.0, 83.0], [24.1, 83.0], [24.2, 83.0], [24.3, 83.0], [24.4, 83.0], [24.5, 83.0], [24.6, 83.0], [24.7, 83.0], [24.8, 83.0], [24.9, 83.0], [25.0, 83.0], [25.1, 83.0], [25.2, 83.0], [25.3, 83.0], [25.4, 83.0], [25.5, 83.0], [25.6, 83.0], [25.7, 83.0], [25.8, 83.0], [25.9, 83.0], [26.0, 83.0], [26.1, 83.0], [26.2, 83.0], [26.3, 83.0], [26.4, 83.0], [26.5, 83.0], [26.6, 83.0], [26.7, 83.0], [26.8, 83.0], [26.9, 83.0], [27.0, 83.0], [27.1, 83.0], [27.2, 83.0], [27.3, 83.0], [27.4, 83.0], [27.5, 83.0], [27.6, 84.0], [27.7, 84.0], [27.8, 84.0], [27.9, 84.0], [28.0, 84.0], [28.1, 84.0], [28.2, 84.0], [28.3, 84.0], [28.4, 84.0], [28.5, 84.0], [28.6, 84.0], [28.7, 84.0], [28.8, 84.0], [28.9, 84.0], [29.0, 84.0], [29.1, 84.0], [29.2, 84.0], [29.3, 84.0], [29.4, 84.0], [29.5, 84.0], [29.6, 84.0], [29.7, 84.0], [29.8, 84.0], [29.9, 84.0], [30.0, 84.0], [30.1, 84.0], [30.2, 84.0], [30.3, 84.0], [30.4, 84.0], [30.5, 84.0], [30.6, 84.0], [30.7, 84.0], [30.8, 84.0], [30.9, 84.0], [31.0, 84.0], [31.1, 84.0], [31.2, 84.0], [31.3, 84.0], [31.4, 84.0], [31.5, 84.0], [31.6, 84.0], [31.7, 84.0], [31.8, 84.0], [31.9, 84.0], [32.0, 84.0], [32.1, 84.0], [32.2, 84.0], [32.3, 84.0], [32.4, 84.0], [32.5, 84.0], [32.6, 84.0], [32.7, 84.0], [32.8, 84.0], [32.9, 84.0], [33.0, 84.0], [33.1, 84.0], [33.2, 84.0], [33.3, 84.0], [33.4, 84.0], [33.5, 84.0], [33.6, 84.0], [33.7, 84.0], [33.8, 84.0], [33.9, 84.0], [34.0, 84.0], [34.1, 84.0], [34.2, 84.0], [34.3, 84.0], [34.4, 84.0], [34.5, 84.0], [34.6, 84.0], [34.7, 84.0], [34.8, 84.0], [34.9, 84.0], [35.0, 84.0], [35.1, 84.0], [35.2, 84.0], [35.3, 84.0], [35.4, 84.0], [35.5, 84.0], [35.6, 84.0], [35.7, 84.0], [35.8, 84.0], [35.9, 84.0], [36.0, 84.0], [36.1, 84.0], [36.2, 84.0], [36.3, 84.0], [36.4, 84.0], [36.5, 84.0], [36.6, 84.0], [36.7, 84.0], [36.8, 84.0], [36.9, 84.0], [37.0, 84.0], [37.1, 84.0], [37.2, 84.0], [37.3, 85.0], [37.4, 85.0], [37.5, 85.0], [37.6, 85.0], [37.7, 85.0], [37.8, 85.0], [37.9, 85.0], [38.0, 85.0], [38.1, 85.0], [38.2, 85.0], [38.3, 85.0], [38.4, 85.0], [38.5, 85.0], [38.6, 85.0], [38.7, 85.0], [38.8, 85.0], [38.9, 85.0], [39.0, 85.0], [39.1, 85.0], [39.2, 85.0], [39.3, 85.0], [39.4, 85.0], [39.5, 85.0], [39.6, 85.0], [39.7, 85.0], [39.8, 85.0], [39.9, 85.0], [40.0, 85.0], [40.1, 85.0], [40.2, 85.0], [40.3, 85.0], [40.4, 85.0], [40.5, 85.0], [40.6, 85.0], [40.7, 85.0], [40.8, 85.0], [40.9, 85.0], [41.0, 85.0], [41.1, 85.0], [41.2, 85.0], [41.3, 85.0], [41.4, 85.0], [41.5, 85.0], [41.6, 85.0], [41.7, 85.0], [41.8, 85.0], [41.9, 85.0], [42.0, 85.0], [42.1, 85.0], [42.2, 85.0], [42.3, 85.0], [42.4, 85.0], [42.5, 85.0], [42.6, 85.0], [42.7, 85.0], [42.8, 85.0], [42.9, 85.0], [43.0, 85.0], [43.1, 85.0], [43.2, 85.0], [43.3, 85.0], [43.4, 85.0], [43.5, 85.0], [43.6, 85.0], [43.7, 85.0], [43.8, 85.0], [43.9, 85.0], [44.0, 85.0], [44.1, 85.0], [44.2, 85.0], [44.3, 85.0], [44.4, 85.0], [44.5, 85.0], [44.6, 85.0], [44.7, 85.0], [44.8, 85.0], [44.9, 85.0], [45.0, 85.0], [45.1, 85.0], [45.2, 85.0], [45.3, 85.0], [45.4, 85.0], [45.5, 85.0], [45.6, 85.0], [45.7, 85.0], [45.8, 85.0], [45.9, 85.0], [46.0, 85.0], [46.1, 85.0], [46.2, 86.0], [46.3, 86.0], [46.4, 86.0], [46.5, 86.0], [46.6, 86.0], [46.7, 86.0], [46.8, 86.0], [46.9, 86.0], [47.0, 86.0], [47.1, 86.0], [47.2, 86.0], [47.3, 86.0], [47.4, 86.0], [47.5, 86.0], [47.6, 86.0], [47.7, 86.0], [47.8, 86.0], [47.9, 86.0], [48.0, 86.0], [48.1, 86.0], [48.2, 86.0], [48.3, 86.0], [48.4, 86.0], [48.5, 86.0], [48.6, 86.0], [48.7, 86.0], [48.8, 86.0], [48.9, 86.0], [49.0, 86.0], [49.1, 86.0], [49.2, 86.0], [49.3, 86.0], [49.4, 86.0], [49.5, 86.0], [49.6, 86.0], [49.7, 86.0], [49.8, 86.0], [49.9, 86.0], [50.0, 86.0], [50.1, 86.0], [50.2, 86.0], [50.3, 86.0], [50.4, 86.0], [50.5, 86.0], [50.6, 86.0], [50.7, 86.0], [50.8, 86.0], [50.9, 86.0], [51.0, 86.0], [51.1, 86.0], [51.2, 86.0], [51.3, 86.0], [51.4, 86.0], [51.5, 86.0], [51.6, 86.0], [51.7, 86.0], [51.8, 86.0], [51.9, 86.0], [52.0, 86.0], [52.1, 86.0], [52.2, 86.0], [52.3, 86.0], [52.4, 86.0], [52.5, 86.0], [52.6, 86.0], [52.7, 86.0], [52.8, 86.0], [52.9, 86.0], [53.0, 86.0], [53.1, 87.0], [53.2, 87.0], [53.3, 87.0], [53.4, 87.0], [53.5, 87.0], [53.6, 87.0], [53.7, 87.0], [53.8, 87.0], [53.9, 87.0], [54.0, 87.0], [54.1, 87.0], [54.2, 87.0], [54.3, 87.0], [54.4, 87.0], [54.5, 87.0], [54.6, 87.0], [54.7, 87.0], [54.8, 87.0], [54.9, 87.0], [55.0, 87.0], [55.1, 87.0], [55.2, 87.0], [55.3, 87.0], [55.4, 87.0], [55.5, 87.0], [55.6, 87.0], [55.7, 87.0], [55.8, 87.0], [55.9, 87.0], [56.0, 87.0], [56.1, 87.0], [56.2, 87.0], [56.3, 87.0], [56.4, 87.0], [56.5, 87.0], [56.6, 87.0], [56.7, 87.0], [56.8, 87.0], [56.9, 87.0], [57.0, 87.0], [57.1, 87.0], [57.2, 87.0], [57.3, 87.0], [57.4, 87.0], [57.5, 87.0], [57.6, 87.0], [57.7, 87.0], [57.8, 87.0], [57.9, 87.0], [58.0, 88.0], [58.1, 88.0], [58.2, 88.0], [58.3, 88.0], [58.4, 88.0], [58.5, 88.0], [58.6, 88.0], [58.7, 88.0], [58.8, 88.0], [58.9, 88.0], [59.0, 88.0], [59.1, 88.0], [59.2, 88.0], [59.3, 88.0], [59.4, 88.0], [59.5, 88.0], [59.6, 88.0], [59.7, 88.0], [59.8, 88.0], [59.9, 88.0], [60.0, 88.0], [60.1, 88.0], [60.2, 88.0], [60.3, 88.0], [60.4, 88.0], [60.5, 88.0], [60.6, 88.0], [60.7, 88.0], [60.8, 88.0], [60.9, 88.0], [61.0, 88.0], [61.1, 88.0], [61.2, 88.0], [61.3, 88.0], [61.4, 88.0], [61.5, 89.0], [61.6, 89.0], [61.7, 89.0], [61.8, 89.0], [61.9, 89.0], [62.0, 89.0], [62.1, 89.0], [62.2, 89.0], [62.3, 89.0], [62.4, 89.0], [62.5, 89.0], [62.6, 89.0], [62.7, 89.0], [62.8, 89.0], [62.9, 89.0], [63.0, 89.0], [63.1, 89.0], [63.2, 89.0], [63.3, 89.0], [63.4, 89.0], [63.5, 89.0], [63.6, 89.0], [63.7, 89.0], [63.8, 89.0], [63.9, 89.0], [64.0, 89.0], [64.1, 89.0], [64.2, 89.0], [64.3, 90.0], [64.4, 90.0], [64.5, 90.0], [64.6, 90.0], [64.7, 90.0], [64.8, 90.0], [64.9, 90.0], [65.0, 90.0], [65.1, 90.0], [65.2, 90.0], [65.3, 90.0], [65.4, 90.0], [65.5, 90.0], [65.6, 90.0], [65.7, 90.0], [65.8, 90.0], [65.9, 90.0], [66.0, 90.0], [66.1, 90.0], [66.2, 90.0], [66.3, 90.0], [66.4, 90.0], [66.5, 91.0], [66.6, 91.0], [66.7, 91.0], [66.8, 91.0], [66.9, 91.0], [67.0, 91.0], [67.1, 91.0], [67.2, 91.0], [67.3, 91.0], [67.4, 91.0], [67.5, 91.0], [67.6, 91.0], [67.7, 91.0], [67.8, 91.0], [67.9, 91.0], [68.0, 91.0], [68.1, 91.0], [68.2, 91.0], [68.3, 91.0], [68.4, 92.0], [68.5, 92.0], [68.6, 92.0], [68.7, 92.0], [68.8, 92.0], [68.9, 92.0], [69.0, 92.0], [69.1, 92.0], [69.2, 92.0], [69.3, 92.0], [69.4, 92.0], [69.5, 92.0], [69.6, 92.0], [69.7, 92.0], [69.8, 92.0], [69.9, 92.0], [70.0, 92.0], [70.1, 92.0], [70.2, 92.0], [70.3, 92.0], [70.4, 92.0], [70.5, 92.0], [70.6, 93.0], [70.7, 93.0], [70.8, 93.0], [70.9, 93.0], [71.0, 93.0], [71.1, 93.0], [71.2, 93.0], [71.3, 93.0], [71.4, 93.0], [71.5, 93.0], [71.6, 93.0], [71.7, 93.0], [71.8, 93.0], [71.9, 93.0], [72.0, 93.0], [72.1, 93.0], [72.2, 93.0], [72.3, 93.0], [72.4, 93.0], [72.5, 93.0], [72.6, 93.0], [72.7, 93.0], [72.8, 93.0], [72.9, 94.0], [73.0, 94.0], [73.1, 94.0], [73.2, 94.0], [73.3, 94.0], [73.4, 94.0], [73.5, 94.0], [73.6, 94.0], [73.7, 94.0], [73.8, 94.0], [73.9, 94.0], [74.0, 94.0], [74.1, 94.0], [74.2, 94.0], [74.3, 94.0], [74.4, 94.0], [74.5, 94.0], [74.6, 94.0], [74.7, 94.0], [74.8, 94.0], [74.9, 94.0], [75.0, 94.0], [75.1, 94.0], [75.2, 95.0], [75.3, 95.0], [75.4, 95.0], [75.5, 95.0], [75.6, 95.0], [75.7, 95.0], [75.8, 95.0], [75.9, 95.0], [76.0, 95.0], [76.1, 95.0], [76.2, 95.0], [76.3, 95.0], [76.4, 95.0], [76.5, 95.0], [76.6, 95.0], [76.7, 95.0], [76.8, 95.0], [76.9, 95.0], [77.0, 95.0], [77.1, 95.0], [77.2, 95.0], [77.3, 95.0], [77.4, 95.0], [77.5, 95.0], [77.6, 96.0], [77.7, 96.0], [77.8, 96.0], [77.9, 96.0], [78.0, 96.0], [78.1, 96.0], [78.2, 96.0], [78.3, 96.0], [78.4, 96.0], [78.5, 96.0], [78.6, 96.0], [78.7, 96.0], [78.8, 96.0], [78.9, 96.0], [79.0, 96.0], [79.1, 96.0], [79.2, 96.0], [79.3, 96.0], [79.4, 96.0], [79.5, 96.0], [79.6, 96.0], [79.7, 96.0], [79.8, 96.0], [79.9, 96.0], [80.0, 96.0], [80.1, 96.0], [80.2, 97.0], [80.3, 97.0], [80.4, 97.0], [80.5, 97.0], [80.6, 97.0], [80.7, 97.0], [80.8, 97.0], [80.9, 97.0], [81.0, 97.0], [81.1, 97.0], [81.2, 97.0], [81.3, 97.0], [81.4, 97.0], [81.5, 97.0], [81.6, 97.0], [81.7, 97.0], [81.8, 97.0], [81.9, 97.0], [82.0, 97.0], [82.1, 97.0], [82.2, 97.0], [82.3, 97.0], [82.4, 97.0], [82.5, 97.0], [82.6, 97.0], [82.7, 98.0], [82.8, 98.0], [82.9, 98.0], [83.0, 98.0], [83.1, 98.0], [83.2, 98.0], [83.3, 98.0], [83.4, 98.0], [83.5, 98.0], [83.6, 98.0], [83.7, 98.0], [83.8, 98.0], [83.9, 98.0], [84.0, 98.0], [84.1, 98.0], [84.2, 98.0], [84.3, 98.0], [84.4, 98.0], [84.5, 98.0], [84.6, 98.0], [84.7, 98.0], [84.8, 98.0], [84.9, 98.0], [85.0, 98.0], [85.1, 98.0], [85.2, 98.0], [85.3, 99.0], [85.4, 99.0], [85.5, 99.0], [85.6, 99.0], [85.7, 99.0], [85.8, 99.0], [85.9, 99.0], [86.0, 99.0], [86.1, 99.0], [86.2, 99.0], [86.3, 99.0], [86.4, 99.0], [86.5, 99.0], [86.6, 99.0], [86.7, 99.0], [86.8, 99.0], [86.9, 99.0], [87.0, 99.0], [87.1, 99.0], [87.2, 99.0], [87.3, 99.0], [87.4, 99.0], [87.5, 99.0], [87.6, 99.0], [87.7, 100.0], [87.8, 100.0], [87.9, 100.0], [88.0, 100.0], [88.1, 100.0], [88.2, 100.0], [88.3, 100.0], [88.4, 100.0], [88.5, 100.0], [88.6, 100.0], [88.7, 100.0], [88.8, 100.0], [88.9, 100.0], [89.0, 100.0], [89.1, 100.0], [89.2, 100.0], [89.3, 100.0], [89.4, 100.0], [89.5, 100.0], [89.6, 100.0], [89.7, 100.0], [89.8, 101.0], [89.9, 101.0], [90.0, 101.0], [90.1, 101.0], [90.2, 101.0], [90.3, 101.0], [90.4, 101.0], [90.5, 101.0], [90.6, 101.0], [90.7, 101.0], [90.8, 101.0], [90.9, 101.0], [91.0, 101.0], [91.1, 101.0], [91.2, 101.0], [91.3, 101.0], [91.4, 101.0], [91.5, 102.0], [91.6, 102.0], [91.7, 102.0], [91.8, 102.0], [91.9, 102.0], [92.0, 102.0], [92.1, 102.0], [92.2, 102.0], [92.3, 102.0], [92.4, 102.0], [92.5, 102.0], [92.6, 102.0], [92.7, 102.0], [92.8, 103.0], [92.9, 103.0], [93.0, 103.0], [93.1, 103.0], [93.2, 103.0], [93.3, 103.0], [93.4, 103.0], [93.5, 103.0], [93.6, 103.0], [93.7, 103.0], [93.8, 103.0], [93.9, 104.0], [94.0, 104.0], [94.1, 104.0], [94.2, 104.0], [94.3, 104.0], [94.4, 104.0], [94.5, 104.0], [94.6, 104.0], [94.7, 104.0], [94.8, 104.0], [94.9, 105.0], [95.0, 105.0], [95.1, 105.0], [95.2, 105.0], [95.3, 105.0], [95.4, 105.0], [95.5, 105.0], [95.6, 106.0], [95.7, 106.0], [95.8, 106.0], [95.9, 106.0], [96.0, 106.0], [96.1, 106.0], [96.2, 107.0], [96.3, 107.0], [96.4, 107.0], [96.5, 107.0], [96.6, 108.0], [96.7, 108.0], [96.8, 108.0], [96.9, 108.0], [97.0, 109.0], [97.1, 109.0], [97.2, 109.0], [97.3, 110.0], [97.4, 110.0], [97.5, 110.0], [97.6, 111.0], [97.7, 111.0], [97.8, 111.0], [97.9, 112.0], [98.0, 112.0], [98.1, 113.0], [98.2, 113.0], [98.3, 114.0], [98.4, 114.0], [98.5, 115.0], [98.6, 116.0], [98.7, 116.0], [98.8, 117.0], [98.9, 118.0], [99.0, 119.0], [99.1, 121.0], [99.2, 123.0], [99.3, 126.0], [99.4, 130.0], [99.5, 138.0], [99.6, 156.0], [99.7, 252.0], [99.8, 302.0], [99.9, 365.0]], "isOverall": false, "label": "Get Fruit 1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1459085.0, "series": [{"data": [[0.0, 1459085.0], [600.0, 136.0], [700.0, 216.0], [800.0, 292.0], [200.0, 2698.0], [900.0, 43.0], [1000.0, 15.0], [1100.0, 2.0], [1200.0, 1.0], [300.0, 2298.0], [1600.0, 4.0], [400.0, 174.0], [100.0, 199195.0], [1700.0, 16.0], [500.0, 113.0]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[0.0, 1454282.0], [600.0, 155.0], [700.0, 194.0], [800.0, 321.0], [200.0, 2622.0], [900.0, 74.0], [1000.0, 21.0], [1100.0, 9.0], [1200.0, 2.0], [300.0, 2340.0], [1300.0, 1.0], [1600.0, 3.0], [400.0, 173.0], [100.0, 199429.0], [1700.0, 11.0], [500.0, 123.0]], "isOverall": false, "label": "Get Fruit 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3322302.0, "series": [{"data": [[0.0, 3322302.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1712.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 34.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 447.30013948899375, "minX": 1.64983404E12, "maxY": 500.0, "series": [{"data": [[1.64983428E12, 500.0], [1.6498341E12, 500.0], [1.64983404E12, 499.9919354026703], [1.64983422E12, 500.0], [1.64983416E12, 500.0], [1.64983434E12, 447.30013948899375]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64983434E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 978.0, "series": [{"data": [[3.0, 0.0], [4.0, 0.6666666666666666], [5.0, 0.875], [6.0, 0.7181818181818181], [7.0, 0.8986486486486486], [8.0, 0.8888888888888888], [9.0, 1.111111111111111], [10.0, 1.2758620689655173], [11.0, 1.0], [12.0, 1.9333333333333338], [13.0, 5.0], [14.0, 4.166666666666667], [15.0, 5.0], [16.0, 5.0], [17.0, 4.0], [19.0, 4.666666666666667], [20.0, 4.0], [21.0, 4.0], [22.0, 4.0], [24.0, 3.5], [26.0, 3.0], [27.0, 4.0], [29.0, 3.0], [30.0, 3.5], [31.0, 3.688888888888889], [32.0, 2.499999999999999], [35.0, 4.514285714285714], [34.0, 4.948275862068967], [37.0, 5.426229508196721], [36.0, 4.406976744186044], [39.0, 3.9999999999999996], [38.0, 5.0], [41.0, 7.0], [40.0, 6.0], [43.0, 6.763157894736842], [45.0, 6.419354838709678], [44.0, 7.28], [47.0, 6.176470588235294], [46.0, 6.024390243902439], [49.0, 5.783132530120483], [48.0, 5.428571428571429], [51.0, 11.181818181818182], [50.0, 8.290322580645162], [53.0, 10.195652173913045], [55.0, 10.444444444444445], [54.0, 10.6], [57.0, 11.0], [56.0, 10.714285714285715], [59.0, 11.5], [58.0, 11.0], [61.0, 11.5], [60.0, 12.0], [63.0, 12.0], [62.0, 12.142857142857142], [67.0, 12.444444444444445], [66.0, 12.4], [65.0, 12.0], [64.0, 12.0], [70.0, 12.6], [69.0, 12.8], [68.0, 12.0], [75.0, 13.5], [74.0, 14.0], [73.0, 13.0], [72.0, 13.0], [79.0, 13.5], [78.0, 14.0], [77.0, 13.833333333333334], [76.0, 13.4], [83.0, 14.625], [82.0, 15.0], [81.0, 14.166666666666668], [80.0, 14.25], [86.0, 17.071428571428573], [85.0, 16.0], [84.0, 15.5], [91.0, 19.8], [90.0, 19.2], [89.0, 19.0], [88.0, 17.5], [95.0, 21.666666666666668], [94.0, 20.75], [93.0, 20.0], [92.0, 20.2], [99.0, 22.0], [97.0, 21.75], [96.0, 21.5], [103.0, 23.071428571428573], [102.0, 23.857142857142858], [100.0, 22.666666666666668], [106.0, 22.75], [105.0, 23.0], [104.0, 23.0], [111.0, 22.0], [110.0, 22.0], [109.0, 22.0], [108.0, 22.0], [115.0, 22.25], [114.0, 23.0], [113.0, 22.0], [112.0, 21.5], [119.0, 22.0], [118.0, 21.666666666666668], [117.0, 22.0], [116.0, 22.666666666666668], [122.0, 21.0], [121.0, 21.0], [120.0, 22.0], [127.0, 21.25], [124.0, 22.0], [134.0, 21.0], [133.0, 21.25], [132.0, 21.0], [130.0, 21.0], [129.0, 21.0], [128.0, 22.0], [143.0, 20.5], [142.0, 20.0], [141.0, 21.0], [140.0, 21.0], [139.0, 21.0], [137.0, 21.0], [136.0, 21.0], [151.0, 20.0], [150.0, 20.0], [149.0, 20.0], [148.0, 20.5], [146.0, 20.0], [145.0, 20.285714285714285], [159.0, 19.0], [158.0, 19.0], [157.0, 19.0], [156.0, 19.0], [155.0, 20.0], [154.0, 19.5], [153.0, 20.0], [152.0, 20.0], [167.0, 21.0], [166.0, 19.990099009900987], [165.0, 17.256578947368414], [164.0, 17.666666666666668], [163.0, 17.0], [162.0, 17.21052631578947], [161.0, 18.476190476190478], [160.0, 19.0], [175.0, 19.857142857142858], [174.0, 20.4375], [173.0, 20.0], [172.0, 20.25], [171.0, 20.545454545454547], [170.0, 20.676470588235297], [169.0, 20.5], [168.0, 20.625], [182.0, 28.8], [181.0, 28.333333333333332], [180.0, 27.837837837837835], [179.0, 25.853658536585364], [178.0, 24.7], [177.0, 21.677685950413224], [176.0, 20.333333333333332], [191.0, 29.0], [190.0, 28.0], [189.0, 28.41791044776119], [188.0, 29.833333333333336], [187.0, 29.0], [186.0, 29.333333333333332], [185.0, 29.0], [184.0, 29.666666666666668], [199.0, 36.83333333333333], [198.0, 36.0], [197.0, 33.986486486486484], [196.0, 32.5], [195.0, 32.25000000000001], [194.0, 31.105263157894736], [193.0, 28.842105263157894], [192.0, 29.375], [207.0, 38.0], [206.0, 38.22222222222222], [205.0, 38.6], [204.0, 38.6], [202.0, 39.52941176470589], [201.0, 38.07692307692307], [215.0, 37.5], [214.0, 36.61538461538461], [213.0, 36.0], [212.0, 37.0], [211.0, 38.333333333333336], [210.0, 38.0], [209.0, 37.5], [208.0, 39.0], [223.0, 36.76923076923076], [221.0, 37.125], [220.0, 37.0], [219.0, 36.63636363636364], [218.0, 37.0], [217.0, 37.0], [216.0, 37.16666666666667], [231.0, 37.23529411764706], [230.0, 37.0], [229.0, 37.18181818181819], [227.0, 37.0], [226.0, 37.0], [224.0, 37.2], [237.0, 36.16666666666667], [236.0, 36.4], [235.0, 36.16666666666667], [234.0, 36.333333333333336], [233.0, 36.5], [232.0, 36.9], [247.0, 37.714285714285715], [246.0, 37.0], [245.0, 37.0], [244.0, 36.66666666666667], [243.0, 37.0], [242.0, 38.0], [241.0, 37.0], [240.0, 37.0], [255.0, 38.333333333333336], [252.0, 38.0], [251.0, 38.0], [250.0, 38.5], [249.0, 38.42857142857143], [270.0, 38.8], [271.0, 39.24999999999999], [269.0, 38.6], [268.0, 38.68750000000001], [267.0, 38.0], [266.0, 38.5], [265.0, 38.833333333333336], [264.0, 38.27272727272727], [263.0, 39.0], [259.0, 38.0], [258.0, 38.57142857142857], [257.0, 39.0], [256.0, 38.0], [261.0, 38.5], [286.0, 34.81481481481482], [287.0, 36.41379310344828], [285.0, 33.08695652173912], [284.0, 33.111111111111114], [283.0, 33.42857142857143], [282.0, 34.720000000000006], [281.0, 36.0], [280.0, 36.30769230769231], [279.0, 35.94736842105263], [273.0, 37.91304347826088], [272.0, 38.699999999999996], [275.0, 36.652173913043484], [274.0, 37.15384615384616], [278.0, 35.81481481481482], [277.0, 36.00000000000001], [276.0, 36.285714285714285], [302.0, 38.14285714285714], [303.0, 38.36363636363636], [301.0, 37.92307692307691], [300.0, 37.81818181818181], [298.0, 38.0], [297.0, 38.16666666666667], [296.0, 38.16666666666667], [295.0, 37.699999999999996], [289.0, 36.921875], [288.0, 36.333333333333336], [291.0, 37.916666666666664], [290.0, 38.0], [294.0, 38.142857142857146], [293.0, 38.23076923076923], [292.0, 38.2], [318.0, 38.43478260869565], [319.0, 39.0], [317.0, 38.0], [316.0, 36.857142857142854], [315.0, 37.0], [314.0, 37.0], [313.0, 39.2], [312.0, 38.666666666666664], [311.0, 39.0], [305.0, 37.85714285714286], [304.0, 38.0], [307.0, 38.0], [306.0, 38.833333333333336], [309.0, 38.25], [308.0, 38.25], [334.0, 46.75], [335.0, 47.49999999999999], [333.0, 45.86666666666666], [332.0, 45.0], [331.0, 45.09090909090909], [330.0, 44.0], [329.0, 44.63636363636364], [328.0, 45.0], [327.0, 44.26086956521739], [321.0, 40.24242424242424], [320.0, 39.166666666666664], [323.0, 41.239999999999995], [322.0, 40.0], [326.0, 43.76923076923077], [325.0, 42.92307692307692], [324.0, 42.14285714285714], [349.0, 54.0], [350.0, 55.5], [348.0, 53.75], [339.0, 47.84615384615385], [338.0, 47.71428571428571], [336.0, 48.333333333333336], [347.0, 53.57142857142857], [346.0, 52.75], [345.0, 51.714285714285715], [344.0, 51.93333333333333], [343.0, 48.4], [342.0, 48.0], [341.0, 47.0], [340.0, 48.0], [366.0, 68.0], [367.0, 66.41666666666667], [365.0, 63.15384615384615], [364.0, 61.599999999999994], [363.0, 61.5], [362.0, 61.0], [361.0, 62.0], [360.0, 60.0], [359.0, 60.666666666666664], [353.0, 57.23076923076923], [352.0, 56.0], [355.0, 58.0], [354.0, 58.0], [358.0, 60.86666666666667], [357.0, 59.28571428571429], [356.0, 58.588235294117645], [371.0, 67.0], [381.0, 71.4], [380.0, 70.54545454545455], [379.0, 69.85714285714286], [378.0, 69.0], [376.0, 68.33333333333333], [375.0, 69.0], [374.0, 68.4], [373.0, 67.625], [370.0, 67.0], [369.0, 67.0], [368.0, 67.0], [398.0, 75.25], [399.0, 75.0], [397.0, 74.6], [386.0, 71.75], [385.0, 71.0], [384.0, 71.0], [395.0, 74.5], [394.0, 74.5], [393.0, 73.33333333333333], [392.0, 74.0], [391.0, 73.2], [390.0, 73.0], [389.0, 72.6], [388.0, 72.0], [413.0, 80.66666666666667], [414.0, 82.16666666666666], [412.0, 80.0], [402.0, 75.0], [401.0, 75.5], [400.0, 75.0], [410.0, 80.0], [409.0, 79.38461538461539], [408.0, 77.99999999999999], [407.0, 77.16666666666667], [406.0, 77.0], [405.0, 76.6], [404.0, 76.33333333333333], [430.0, 94.2], [431.0, 94.75], [429.0, 95.85714285714286], [428.0, 96.0], [427.0, 96.0], [426.0, 95.0], [425.0, 96.125], [424.0, 95.5], [423.0, 95.0], [416.0, 87.66666666666667], [419.0, 93.0], [418.0, 90.0], [422.0, 95.5], [421.0, 95.0], [420.0, 97.0], [447.0, 94.8], [446.0, 96.14285714285715], [445.0, 96.0], [444.0, 97.0], [441.0, 96.0], [436.0, 94.90909090909092], [432.0, 96.25], [451.0, 92.6], [461.0, 91.0], [463.0, 90.33333333333333], [460.0, 91.2], [450.0, 92.46666666666667], [449.0, 92.0], [448.0, 92.0], [458.0, 92.0], [456.0, 91.5], [455.0, 91.5], [454.0, 92.0], [453.0, 92.0], [452.0, 92.16666666666667], [478.0, 88.0], [479.0, 88.0], [477.0, 88.0], [467.0, 90.0], [465.0, 90.0], [464.0, 90.99999999999999], [475.0, 87.8], [474.0, 88.0], [473.0, 89.0], [471.0, 89.0], [470.0, 89.8], [469.0, 89.0], [468.0, 89.0], [493.0, 87.0], [491.0, 87.0], [489.0, 87.66666666666667], [488.0, 88.0], [487.0, 88.13333333333333], [481.0, 88.5], [485.0, 88.0], [484.0, 88.0], [483.0, 88.5], [482.0, 88.0], [510.0, 83.25], [509.0, 84.0], [498.0, 86.71428571428571], [497.0, 87.0], [496.0, 86.66666666666667], [507.0, 84.0], [506.0, 84.16666666666667], [505.0, 85.0], [504.0, 85.0], [503.0, 84.75], [502.0, 86.0], [501.0, 86.33333333333333], [500.0, 85.875], [536.0, 76.5], [530.0, 76.83333333333333], [543.0, 75.71428571428571], [541.0, 77.0], [540.0, 76.0], [527.0, 77.0], [512.0, 82.0], [515.0, 80.0], [514.0, 81.0], [517.0, 79.0], [516.0, 79.25], [519.0, 78.66666666666666], [518.0, 79.0], [526.0, 78.0], [525.0, 78.0], [524.0, 78.0], [522.0, 78.66666666666666], [521.0, 78.5], [534.0, 77.0], [533.0, 76.5], [531.0, 76.66666666666667], [529.0, 77.0], [570.0, 71.0], [563.0, 72.42857142857143], [573.0, 70.66666666666666], [574.0, 70.11111111111113], [562.0, 72.0], [560.0, 73.0], [571.0, 71.0], [568.0, 71.0], [551.0, 74.33333333333334], [550.0, 74.0], [549.0, 74.85714285714285], [546.0, 75.75], [544.0, 75.0], [558.0, 73.0], [557.0, 72.0], [556.0, 73.0], [553.0, 74.0], [552.0, 74.0], [567.0, 71.5], [566.0, 72.5], [565.0, 72.0], [606.0, 65.0], [607.0, 64.75], [605.0, 65.5], [603.0, 66.0], [602.0, 65.0], [600.0, 65.57142857142857], [590.0, 68.0], [576.0, 69.0], [581.0, 68.25], [580.0, 68.0], [583.0, 68.0], [582.0, 68.5], [588.0, 67.0], [587.0, 68.0], [585.0, 68.0], [598.0, 65.66666666666667], [596.0, 66.4], [595.0, 66.0], [592.0, 66.0], [635.0, 107.5], [639.0, 191.0], [638.0, 106.0], [637.0, 106.0], [633.0, 110.0], [632.0, 108.0], [623.0, 110.33333333333333], [611.0, 63.0], [610.0, 63.25], [615.0, 117.5], [614.0, 118.0], [620.0, 112.0], [619.0, 113.0], [618.0, 113.0], [616.0, 114.75], [666.0, 185.0], [664.0, 185.0], [645.0, 106.5], [662.0, 186.0], [657.0, 187.0], [656.0, 187.33333333333334], [655.0, 188.0], [653.0, 105.0], [652.0, 126.75], [649.0, 148.5], [703.0, 102.0], [697.0, 103.0], [678.0, 181.0], [676.0, 173.11111111111111], [675.0, 182.0], [674.0, 105.0], [672.0, 145.0], [694.0, 139.83333333333331], [693.0, 177.0], [692.0, 104.0], [690.0, 179.0], [685.0, 179.0], [684.0, 179.0], [682.0, 165.4], [681.0, 181.0], [731.0, 135.0], [735.0, 167.0], [730.0, 102.0], [728.0, 168.57142857142858], [727.0, 169.0], [726.0, 146.66666666666666], [721.0, 154.0], [720.0, 142.42857142857142], [719.0, 173.0], [710.0, 138.66666666666669], [716.0, 174.0], [714.0, 174.0], [712.0, 103.0], [763.0, 162.0], [765.0, 160.0], [767.0, 100.0], [764.0, 153.55555555555557], [762.0, 100.0], [741.0, 144.5], [740.0, 166.0], [759.0, 162.0], [757.0, 100.0], [748.0, 101.0], [746.0, 164.0], [745.0, 164.5], [786.0, 98.0], [799.0, 150.0], [798.0, 150.0], [793.0, 151.0], [792.0, 152.0], [782.0, 126.0], [769.0, 158.0], [768.0, 115.0], [774.0, 158.0], [772.0, 128.5], [781.0, 155.0], [780.0, 121.8], [779.0, 127.5], [778.0, 117.66666666666667], [777.0, 99.0], [776.0, 146.0], [791.0, 98.0], [790.0, 152.0], [789.0, 136.99999999999997], [785.0, 98.0], [784.0, 126.0], [806.0, 148.0], [828.0, 144.0], [829.0, 107.0], [825.0, 96.0], [818.0, 146.0], [814.0, 97.0], [811.0, 121.5], [810.0, 148.0], [805.0, 149.0], [802.0, 96.0], [800.0, 150.0], [862.0, 467.0], [863.0, 113.5], [852.0, 138.0], [849.0, 109.33333333333333], [861.0, 93.0], [860.0, 134.0], [859.0, 120.66666666666666], [858.0, 94.0], [856.0, 125.25], [838.0, 142.0], [835.0, 95.0], [834.0, 119.5], [847.0, 127.75], [845.0, 94.0], [844.0, 140.0], [843.0, 141.0], [842.0, 95.0], [840.0, 128.0], [855.0, 137.0], [853.0, 137.0], [869.0, 777.0], [891.0, 218.83333333333334], [881.0, 673.0], [879.0, 125.6], [864.0, 133.5], [866.0, 132.0], [865.0, 132.0], [868.0, 118.33333333333333], [867.0, 132.0], [878.0, 127.0], [877.0, 92.0], [876.0, 119.8], [874.0, 110.625], [873.0, 120.5], [872.0, 125.14285714285714], [888.0, 91.0], [885.0, 567.6666666666666], [883.0, 125.0], [892.0, 421.25], [895.0, 281.0], [880.0, 91.0], [893.0, 90.0], [890.0, 123.5], [889.0, 125.0], [903.0, 280.75], [905.0, 458.0], [904.0, 104.5], [908.0, 117.0], [907.0, 103.5], [909.0, 783.0], [911.0, 416.0], [897.0, 114.8], [896.0, 122.0], [900.0, 120.0], [898.0, 90.0], [921.0, 274.75], [922.0, 748.0], [924.0, 212.33333333333331], [926.0, 112.66666666666667], [912.0, 116.0], [918.0, 100.28571428571428], [913.0, 116.0], [923.0, 100.5], [956.0, 102.0], [929.0, 425.0], [936.0, 285.5], [937.0, 87.0], [941.0, 87.0], [928.0, 111.0], [940.0, 108.0], [947.0, 151.5], [951.0, 258.8], [949.0, 90.0], [952.0, 218.33333333333331], [935.0, 108.0], [934.0, 109.66666666666667], [933.0, 93.5], [930.0, 107.16666666666667], [957.0, 853.0], [954.0, 102.0], [953.0, 93.66666666666667], [967.0, 895.0], [962.0, 859.0], [961.0, 100.0], [960.0, 101.0], [975.0, 93.33333333333333], [973.0, 96.5], [972.0, 88.5], [971.0, 97.0], [970.0, 91.0], [969.0, 89.0], [968.0, 98.5], [963.0, 209.4], [964.0, 639.8333333333334], [976.0, 807.0], [990.0, 978.0], [989.0, 90.0], [991.0, 349.33333333333337], [977.0, 812.0], [978.0, 344.0], [983.0, 92.0], [981.0, 91.0], [987.0, 637.0], [985.0, 92.0], [984.0, 87.0], [988.0, 178.2], [993.0, 830.0], [992.0, 216.0], [996.0, 928.0], [1000.0, 90.16534649466368], [999.0, 86.66666666666666], [998.0, 88.23076923076923], [997.0, 86.55555555555556], [994.0, 88.0], [1.0, 0.4444444444444444]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[997.6958194735506, 90.02735764483458]], "isOverall": false, "label": "Get Fruit 2-Aggregated", "isController": false}, {"data": [[431.0, 95.0], [426.0, 96.0], [447.0, 95.0], [446.0, 96.0], [443.0, 95.0], [441.0, 96.0], [436.0, 95.0], [461.0, 91.0], [458.0, 92.0], [477.0, 88.0], [475.0, 88.0], [467.0, 90.0], [495.0, 87.0], [493.0, 87.0], [489.0, 87.0], [487.0, 88.0], [485.0, 88.0], [483.0, 88.0], [482.0, 88.0], [481.0, 88.5], [511.0, 83.0], [510.0, 83.0], [509.0, 84.0], [506.0, 85.0], [500.0, 87.0], [498.0, 87.0], [542.0, 76.0], [543.0, 76.0], [529.0, 77.0], [528.0, 77.0], [541.0, 76.0], [540.0, 76.0], [539.0, 76.0], [536.0, 76.0], [526.0, 78.0], [512.0, 82.0], [515.0, 81.0], [513.0, 82.0], [519.0, 78.0], [516.0, 80.0], [525.0, 78.0], [523.0, 78.0], [522.0, 79.0], [521.0, 78.5], [534.0, 77.0], [533.0, 76.0], [531.0, 77.0], [530.0, 78.0], [563.0, 72.0], [575.0, 69.0], [573.0, 70.5], [570.0, 71.0], [568.0, 72.0], [558.0, 72.0], [544.0, 75.0], [548.0, 75.0], [546.0, 76.0], [551.0, 74.5], [549.0, 75.0], [557.0, 72.0], [556.0, 73.5], [555.0, 74.0], [567.0, 72.0], [566.0, 72.0], [565.0, 72.0], [562.0, 72.0], [560.0, 73.0], [600.0, 65.5], [593.0, 67.0], [607.0, 92.5], [605.0, 65.0], [602.0, 65.0], [590.0, 67.0], [576.0, 69.0], [579.0, 69.0], [577.0, 69.0], [581.0, 69.0], [580.0, 69.0], [583.0, 68.0], [582.0, 69.0], [588.0, 67.0], [587.0, 68.0], [586.0, 68.0], [585.0, 68.0], [598.0, 66.0], [596.0, 67.0], [595.0, 66.0], [592.0, 67.0], [633.0, 107.0], [628.0, 108.0], [637.0, 191.0], [639.0, 191.0], [627.0, 166.33333333333334], [624.0, 195.0], [635.0, 107.0], [632.0, 107.0], [615.0, 61.0], [614.0, 80.33333333333333], [612.0, 62.0], [610.0, 63.0], [609.0, 64.0], [608.0, 64.0], [623.0, 110.0], [622.0, 111.0], [621.0, 112.0], [620.0, 112.0], [619.0, 113.0], [618.0, 115.0], [617.0, 113.0], [616.0, 115.0], [631.0, 107.0], [630.0, 107.0], [629.0, 108.0], [669.0, 105.0], [670.0, 144.5], [666.0, 146.0], [664.0, 185.75], [663.0, 186.0], [661.0, 187.0], [659.0, 187.0], [656.0, 132.33333333333334], [654.0, 188.0], [644.0, 190.0], [640.0, 190.0], [647.0, 106.0], [645.0, 168.75], [653.0, 105.0], [652.0, 106.0], [649.0, 189.0], [703.0, 102.0], [691.0, 683.0], [698.0, 430.0], [697.0, 140.0], [694.0, 177.0], [693.0, 177.0], [692.0, 103.0], [690.0, 166.5], [684.0, 141.5], [674.0, 184.0], [672.0, 144.5], [676.0, 182.0], [675.0, 157.0], [682.0, 181.0], [680.0, 181.0], [723.0, 104.0], [735.0, 268.2], [720.0, 156.44444444444446], [733.0, 167.0], [730.0, 168.0], [728.0, 135.5], [719.0, 173.0], [708.0, 175.0], [704.0, 102.0], [717.0, 173.0], [714.0, 150.33333333333334], [727.0, 169.0], [726.0, 169.0], [725.0, 135.5], [722.0, 170.0], [721.0, 161.2857142857143], [766.0, 766.0], [756.0, 295.5], [764.0, 281.2], [765.0, 99.0], [762.0, 162.0], [741.0, 166.0], [740.0, 166.0], [749.0, 101.0], [746.0, 164.0], [745.0, 164.33333333333334], [744.0, 165.0], [759.0, 162.0], [758.0, 162.5], [755.0, 163.0], [752.0, 132.5], [795.0, 793.0], [775.0, 343.0], [780.0, 467.5], [779.0, 156.0], [778.0, 156.0], [776.0, 99.0], [781.0, 156.0], [783.0, 98.0], [769.0, 128.5], [768.0, 159.66666666666666], [774.0, 99.0], [772.0, 158.0], [782.0, 98.0], [789.0, 346.0], [788.0, 153.0], [786.0, 98.5], [784.0, 126.5], [798.0, 137.25], [796.0, 151.0], [793.0, 151.0], [792.0, 125.0], [790.0, 98.0], [828.0, 144.6], [810.0, 358.3333333333333], [809.0, 97.0], [811.0, 147.0], [812.0, 809.5], [816.0, 814.0], [819.0, 482.5], [818.0, 146.0], [817.0, 96.0], [821.0, 95.0], [823.0, 96.0], [822.0, 96.0], [825.0, 822.0], [829.0, 483.5], [827.0, 128.66666666666666], [824.0, 96.0], [805.0, 123.0], [803.0, 97.0], [802.0, 114.66666666666667], [800.0, 132.33333333333334], [815.0, 146.0], [814.0, 108.5], [861.0, 93.0], [834.0, 476.0], [836.0, 797.0], [856.0, 94.0], [838.0, 143.0], [847.0, 260.8], [833.0, 127.33333333333333], [844.0, 140.0], [842.0, 141.0], [840.0, 141.57142857142858], [849.0, 366.3333333333333], [850.0, 829.5], [852.0, 294.5], [855.0, 136.0], [853.0, 137.0], [862.0, 363.0], [859.0, 134.66666666666666], [858.0, 121.66666666666667], [870.0, 823.0], [866.0, 603.6666666666666], [868.0, 93.0], [867.0, 132.0], [871.0, 838.0], [889.0, 124.33333333333333], [891.0, 122.0], [890.0, 110.0], [875.0, 852.0], [874.0, 123.71428571428571], [873.0, 104.66666666666667], [872.0, 112.0], [876.0, 110.0], [878.0, 371.6666666666667], [879.0, 340.0], [865.0, 132.0], [864.0, 93.0], [886.0, 777.0], [884.0, 108.0], [883.0, 108.0], [887.0, 125.0], [895.0, 122.0], [893.0, 106.0], [892.0, 122.0], [925.0, 510.0], [897.0, 253.6], [899.0, 105.0], [900.0, 348.3333333333333], [901.0, 856.0], [903.0, 107.8], [924.0, 98.6], [921.0, 114.0], [907.0, 875.0], [906.0, 118.0], [905.0, 118.0], [904.0, 104.0], [908.0, 107.375], [911.0, 107.66666666666667], [912.0, 735.0], [913.0, 626.0], [917.0, 116.0], [916.0, 89.0], [919.0, 101.0], [918.0, 115.0], [927.0, 112.0], [926.0, 113.0], [947.0, 323.59999999999997], [932.0, 719.0], [942.0, 97.0], [930.0, 107.14285714285714], [928.0, 103.33333333333333], [952.0, 103.0], [935.0, 108.0], [934.0, 98.0], [933.0, 104.5], [940.0, 230.33333333333334], [937.0, 88.0], [936.0, 87.0], [941.0, 808.0], [948.0, 868.5], [949.0, 366.66666666666663], [950.0, 670.0], [951.0, 362.83333333333337], [953.0, 330.6666666666667], [958.0, 892.0], [957.0, 102.0], [956.0, 102.0], [955.0, 102.0], [959.0, 89.0], [946.0, 87.0], [963.0, 948.3333333333334], [960.0, 620.6666666666667], [975.0, 92.0], [973.0, 97.0], [972.0, 88.0], [970.0, 97.25], [968.0, 97.14285714285715], [961.0, 516.5714285714286], [962.0, 526.25], [964.0, 273.0], [976.0, 667.0], [978.0, 205.14285714285714], [983.0, 293.75], [984.0, 397.4], [985.0, 507.5], [987.0, 880.5], [988.0, 213.28571428571428], [989.0, 554.8], [990.0, 917.0], [991.0, 484.0], [993.0, 818.0], [992.0, 195.55555555555554], [995.0, 552.5], [996.0, 905.6666666666666], [997.0, 166.27272727272725], [999.0, 152.53846153846152], [1000.0, 90.17075908195822], [998.0, 88.2]], "isOverall": false, "label": "Get Fruit 1", "isController": false}, {"data": [[999.9119131681753, 90.22729430761015]], "isOverall": false, "label": "Get Fruit 1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 45069.26666666667, "minX": 1.64983404E12, "maxY": 1437280.1666666667, "series": [{"data": [[1.64983428E12, 1035085.8666666667], [1.6498341E12, 1035677.7333333333], [1.64983404E12, 913771.6], [1.64983422E12, 1041179.3333333334], [1.64983416E12, 1026089.8], [1.64983434E12, 45069.26666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64983428E12, 1428868.5333333334], [1.6498341E12, 1429685.5666666667], [1.64983404E12, 1261402.1], [1.64983422E12, 1437280.1666666667], [1.64983416E12, 1416450.05], [1.64983434E12, 62215.183333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64983434E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 74.10137760508633, "minX": 1.64983404E12, "maxY": 96.21977417244138, "series": [{"data": [[1.64983428E12, 88.8492926659427], [1.6498341E12, 88.80100134420285], [1.64983404E12, 96.04151743906944], [1.64983422E12, 88.33130493178346], [1.64983416E12, 89.62814044819578], [1.64983434E12, 74.10137760508633]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[1.64983428E12, 88.84934863312112], [1.6498341E12, 88.8046823178246], [1.64983404E12, 96.21977417244138], [1.64983422E12, 88.32922849451317], [1.64983416E12, 89.62682342955632], [1.64983434E12, 90.62980575481605]], "isOverall": false, "label": "Get Fruit 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64983434E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 74.09896385258415, "minX": 1.64983404E12, "maxY": 96.21734476452839, "series": [{"data": [[1.64983428E12, 88.84698179447936], [1.6498341E12, 88.79870079882377], [1.64983404E12, 96.03918462152829], [1.64983422E12, 88.32901929828942], [1.64983416E12, 89.62588392819922], [1.64983434E12, 74.09896385258415]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[1.64983428E12, 88.84703470302638], [1.6498341E12, 88.80241992798231], [1.64983404E12, 96.21734476452839], [1.64983422E12, 88.32703420731683], [1.64983416E12, 89.62455805835805], [1.64983434E12, 90.62674296767999]], "isOverall": false, "label": "Get Fruit 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64983434E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64983404E12, "maxY": 0.004764860829152895, "series": [{"data": [[1.64983428E12, 1.8960996637385814E-4], [1.6498341E12, 1.77648291911682E-4], [1.64983404E12, 0.0034874783081532863], [1.64983422E12, 2.002874714295743E-4], [1.64983416E12, 1.9426993358956314E-4], [1.64983434E12, 0.0]], "isOverall": false, "label": "Get Fruit 2", "isController": false}, {"data": [[1.64983428E12, 1.5999004506386555E-4], [1.6498341E12, 2.0728702738558182E-4], [1.64983404E12, 0.004764860829152895], [1.64983422E12, 1.7966646834630457E-4], [1.64983416E12, 1.583966670950399E-4], [1.64983434E12, 0.0]], "isOverall": false, "label": "Get Fruit 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64983434E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64983404E12, "maxY": 1798.0, "series": [{"data": [[1.64983428E12, 166.0], [1.6498341E12, 162.0], [1.64983404E12, 1798.0], [1.64983422E12, 139.0], [1.64983416E12, 151.0], [1.64983434E12, 195.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64983428E12, 100.0], [1.6498341E12, 100.0], [1.64983404E12, 98.0], [1.64983422E12, 99.0], [1.64983416E12, 103.0], [1.64983434E12, 99.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64983428E12, 104.0], [1.6498341E12, 112.0], [1.64983404E12, 102.0], [1.64983422E12, 104.0], [1.64983416E12, 115.0], [1.64983434E12, 160.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64983428E12, 102.0], [1.6498341E12, 103.0], [1.64983404E12, 100.0], [1.64983422E12, 101.0], [1.64983416E12, 110.95000000000073], [1.64983434E12, 103.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64983428E12, 75.0], [1.6498341E12, 63.0], [1.64983404E12, 72.0], [1.64983422E12, 65.0], [1.64983416E12, 61.0], [1.64983434E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64983428E12, 87.0], [1.6498341E12, 84.0], [1.64983404E12, 86.0], [1.64983422E12, 85.0], [1.64983416E12, 85.0], [1.64983434E12, 86.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64983434E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 24.0, "maxY": 818.0, "series": [{"data": [[24.0, 793.0], [9117.0, 113.0], [10093.0, 98.0], [10073.0, 90.0], [10545.0, 92.0], [10725.0, 88.0], [10713.0, 89.0], [10717.0, 91.0], [11221.0, 86.0], [11157.0, 86.0], [11009.0, 87.0], [11261.0, 85.0], [11153.0, 88.0], [11165.0, 86.0], [11189.0, 87.0], [11193.0, 88.0], [10829.0, 93.0], [10789.0, 87.0], [10941.0, 88.0], [10913.0, 87.0], [11225.0, 87.0], [11233.0, 87.0], [11237.0, 86.0], [11213.0, 85.0], [11209.0, 87.0], [11249.0, 86.0], [11073.0, 89.0], [11049.0, 88.0], [11033.0, 90.0], [11105.0, 86.0], [11133.0, 87.0], [11097.0, 88.0], [11025.0, 89.0], [11285.0, 86.0], [11337.0, 86.0], [11353.0, 88.0], [11349.0, 86.0], [11345.0, 88.0], [11505.0, 84.0], [11501.0, 84.0], [11493.0, 85.0], [11485.0, 85.0], [11549.0, 84.0], [11545.0, 84.0], [11529.0, 84.0], [11381.0, 85.0], [11377.0, 85.0], [11369.0, 85.0], [11469.0, 86.0], [11477.0, 84.0], [11409.0, 85.0], [11393.0, 85.0], [11401.0, 84.0], [11405.0, 85.0], [11301.0, 86.0], [11305.0, 86.0], [11313.0, 85.0], [11317.0, 85.0], [11329.0, 85.0], [11333.0, 85.0], [11457.0, 84.0], [11449.0, 85.0], [11465.0, 85.0], [11433.0, 85.0], [11421.0, 85.0], [11441.0, 84.0], [1154.0, 818.0], [2805.0, 382.0], [3375.0, 298.0], [3742.0, 284.0], [9872.0, 102.0], [10140.0, 98.0], [10700.0, 90.0], [10544.0, 88.0], [10496.0, 89.0], [10596.0, 91.0], [10632.0, 93.0], [11160.0, 85.0], [10792.0, 91.0], [10832.0, 85.0], [11020.0, 87.0], [11052.0, 88.0], [11100.0, 87.0], [11260.0, 86.0], [11248.0, 87.0], [11148.0, 88.0], [11152.0, 87.0], [11136.0, 87.0], [10876.0, 92.0], [10852.0, 88.0], [11188.0, 84.0], [11196.0, 87.0], [11208.0, 86.0], [11212.0, 87.0], [11192.0, 86.0], [11244.0, 86.0], [11236.0, 86.0], [11120.0, 88.0], [11128.0, 89.0], [11132.0, 87.0], [11304.0, 86.0], [11352.0, 85.0], [11288.0, 85.0], [11468.0, 85.0], [11464.0, 84.0], [11476.0, 85.0], [11268.0, 85.0], [11480.0, 85.0], [11508.0, 85.0], [11604.0, 85.0], [11556.0, 84.0], [11548.0, 84.0], [11536.0, 84.0], [11544.0, 85.0], [11380.0, 86.0], [11384.0, 85.0], [11356.0, 86.0], [11376.0, 86.0], [11368.0, 86.0], [11416.0, 84.0], [11412.0, 85.0], [11400.0, 84.0], [11404.0, 85.0], [11528.0, 84.0], [11312.0, 85.0], [11320.0, 87.0], [11344.0, 87.0], [11452.0, 85.0], [11448.0, 85.0], [11440.0, 85.0], [11436.0, 85.0], [11428.0, 85.0], [11432.0, 85.0], [11424.0, 85.0], [11456.0, 85.0], [11460.0, 85.0], [10671.0, 93.0], [11203.0, 86.0], [11239.0, 87.0], [11139.0, 86.0], [11159.0, 86.0], [11179.0, 88.0], [11183.0, 87.0], [11175.0, 87.0], [11171.0, 88.0], [10991.0, 91.0], [10975.0, 90.0], [11243.0, 85.0], [11247.0, 87.0], [11207.0, 87.0], [11235.0, 87.0], [11255.0, 86.0], [11031.0, 89.0], [11035.0, 87.0], [11135.0, 87.0], [11127.0, 88.0], [11079.0, 87.0], [11027.0, 87.0], [11275.0, 88.0], [11363.0, 85.0], [11355.0, 86.0], [11351.0, 87.0], [11495.0, 85.0], [11479.0, 84.0], [11491.0, 85.0], [11471.0, 84.0], [11279.0, 85.0], [11291.0, 85.0], [11379.0, 86.0], [11383.0, 86.0], [11371.0, 86.0], [11423.0, 86.0], [11419.0, 84.0], [11407.0, 85.0], [11395.0, 84.0], [11403.0, 85.0], [11327.0, 86.0], [11303.0, 85.0], [11311.0, 86.0], [11335.0, 86.0], [11451.0, 85.0], [11463.0, 84.0], [11443.0, 84.0], [11439.0, 85.0], [11427.0, 84.0], [7035.0, 138.0], [7067.0, 39.0], [10222.0, 93.0], [10726.0, 87.0], [10522.0, 93.0], [10674.0, 90.0], [10638.0, 89.0], [10582.0, 91.0], [11234.0, 86.0], [11218.0, 86.0], [11194.0, 87.0], [11226.0, 86.0], [11022.0, 86.0], [11078.0, 88.0], [11058.0, 87.0], [10950.0, 87.0], [10982.0, 86.0], [10998.0, 88.0], [10790.0, 88.0], [10970.0, 90.0], [11142.0, 88.0], [11166.0, 86.0], [11174.0, 87.0], [11146.0, 88.0], [11150.0, 87.0], [10866.0, 87.0], [11138.0, 86.0], [11242.0, 87.0], [11246.0, 87.0], [11250.0, 87.0], [10918.0, 86.0], [11254.0, 85.0], [11090.0, 88.0], [11110.0, 86.0], [11106.0, 87.0], [11126.0, 87.0], [11134.0, 86.0], [11298.0, 86.0], [11310.0, 87.0], [11302.0, 87.0], [11490.0, 85.0], [11482.0, 85.0], [11266.0, 87.0], [11514.0, 84.0], [11274.0, 86.0], [11286.0, 85.0], [11602.0, 82.0], [11386.0, 86.0], [11382.0, 85.0], [11354.0, 85.0], [11370.0, 85.0], [11358.0, 86.0], [11366.0, 86.0], [11362.0, 86.0], [11378.0, 85.0], [11406.0, 86.0], [11390.0, 85.0], [11322.0, 84.0], [11454.0, 85.0], [11434.0, 84.0], [11446.0, 85.0], [11438.0, 85.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11604.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 24.0, "maxY": 818.0, "series": [{"data": [[24.0, 793.0], [9117.0, 113.0], [10093.0, 98.0], [10073.0, 90.0], [10545.0, 92.0], [10725.0, 88.0], [10713.0, 89.0], [10717.0, 91.0], [11221.0, 86.0], [11157.0, 86.0], [11009.0, 87.0], [11261.0, 85.0], [11153.0, 88.0], [11165.0, 86.0], [11189.0, 87.0], [11193.0, 88.0], [10829.0, 93.0], [10789.0, 87.0], [10941.0, 88.0], [10913.0, 87.0], [11225.0, 87.0], [11233.0, 87.0], [11237.0, 86.0], [11213.0, 85.0], [11209.0, 87.0], [11249.0, 86.0], [11073.0, 89.0], [11049.0, 88.0], [11033.0, 90.0], [11105.0, 86.0], [11133.0, 87.0], [11097.0, 88.0], [11025.0, 89.0], [11285.0, 86.0], [11337.0, 86.0], [11353.0, 88.0], [11349.0, 86.0], [11345.0, 88.0], [11505.0, 84.0], [11501.0, 84.0], [11493.0, 85.0], [11485.0, 85.0], [11549.0, 84.0], [11545.0, 84.0], [11529.0, 84.0], [11381.0, 85.0], [11377.0, 85.0], [11369.0, 85.0], [11469.0, 86.0], [11477.0, 84.0], [11409.0, 85.0], [11393.0, 85.0], [11401.0, 84.0], [11405.0, 85.0], [11301.0, 86.0], [11305.0, 86.0], [11313.0, 85.0], [11317.0, 85.0], [11329.0, 85.0], [11333.0, 85.0], [11457.0, 84.0], [11449.0, 85.0], [11465.0, 85.0], [11433.0, 85.0], [11421.0, 85.0], [11441.0, 84.0], [1154.0, 818.0], [2805.0, 382.0], [3375.0, 298.0], [3742.0, 284.0], [9872.0, 102.0], [10140.0, 98.0], [10700.0, 90.0], [10544.0, 88.0], [10496.0, 89.0], [10596.0, 91.0], [10632.0, 93.0], [11160.0, 85.0], [10792.0, 91.0], [10832.0, 85.0], [11020.0, 87.0], [11052.0, 88.0], [11100.0, 87.0], [11260.0, 86.0], [11248.0, 87.0], [11148.0, 88.0], [11152.0, 87.0], [11136.0, 87.0], [10876.0, 92.0], [10852.0, 88.0], [11188.0, 84.0], [11196.0, 87.0], [11208.0, 86.0], [11212.0, 87.0], [11192.0, 86.0], [11244.0, 86.0], [11236.0, 86.0], [11120.0, 88.0], [11128.0, 89.0], [11132.0, 87.0], [11304.0, 86.0], [11352.0, 85.0], [11288.0, 85.0], [11468.0, 85.0], [11464.0, 84.0], [11476.0, 85.0], [11268.0, 85.0], [11480.0, 85.0], [11508.0, 85.0], [11604.0, 85.0], [11556.0, 84.0], [11548.0, 84.0], [11536.0, 84.0], [11544.0, 85.0], [11380.0, 86.0], [11384.0, 85.0], [11356.0, 86.0], [11376.0, 86.0], [11368.0, 86.0], [11416.0, 84.0], [11412.0, 85.0], [11400.0, 84.0], [11404.0, 85.0], [11528.0, 84.0], [11312.0, 85.0], [11320.0, 87.0], [11344.0, 87.0], [11452.0, 85.0], [11448.0, 85.0], [11440.0, 85.0], [11436.0, 85.0], [11428.0, 85.0], [11432.0, 85.0], [11424.0, 85.0], [11456.0, 85.0], [11460.0, 85.0], [10671.0, 93.0], [11203.0, 86.0], [11239.0, 87.0], [11139.0, 86.0], [11159.0, 86.0], [11179.0, 88.0], [11183.0, 87.0], [11175.0, 87.0], [11171.0, 88.0], [10991.0, 91.0], [10975.0, 90.0], [11243.0, 85.0], [11247.0, 87.0], [11207.0, 87.0], [11235.0, 87.0], [11255.0, 86.0], [11031.0, 89.0], [11035.0, 87.0], [11135.0, 87.0], [11127.0, 88.0], [11079.0, 87.0], [11027.0, 87.0], [11275.0, 88.0], [11363.0, 85.0], [11355.0, 86.0], [11351.0, 87.0], [11495.0, 85.0], [11479.0, 84.0], [11491.0, 85.0], [11471.0, 84.0], [11279.0, 85.0], [11291.0, 85.0], [11379.0, 86.0], [11383.0, 86.0], [11371.0, 86.0], [11423.0, 86.0], [11419.0, 84.0], [11407.0, 85.0], [11395.0, 84.0], [11403.0, 85.0], [11327.0, 86.0], [11303.0, 85.0], [11311.0, 86.0], [11335.0, 86.0], [11451.0, 85.0], [11463.0, 84.0], [11443.0, 84.0], [11439.0, 85.0], [11427.0, 84.0], [7035.0, 138.0], [7067.0, 39.0], [10222.0, 93.0], [10726.0, 87.0], [10522.0, 93.0], [10674.0, 90.0], [10638.0, 89.0], [10582.0, 91.0], [11234.0, 86.0], [11218.0, 86.0], [11194.0, 87.0], [11226.0, 86.0], [11022.0, 86.0], [11078.0, 88.0], [11058.0, 87.0], [10950.0, 87.0], [10982.0, 86.0], [10998.0, 88.0], [10790.0, 88.0], [10970.0, 90.0], [11142.0, 88.0], [11166.0, 86.0], [11174.0, 87.0], [11146.0, 88.0], [11150.0, 87.0], [10866.0, 87.0], [11138.0, 86.0], [11242.0, 87.0], [11246.0, 87.0], [11250.0, 87.0], [10918.0, 86.0], [11254.0, 85.0], [11090.0, 88.0], [11110.0, 86.0], [11106.0, 87.0], [11126.0, 87.0], [11134.0, 86.0], [11298.0, 86.0], [11310.0, 87.0], [11302.0, 87.0], [11490.0, 85.0], [11482.0, 85.0], [11266.0, 87.0], [11514.0, 84.0], [11274.0, 86.0], [11286.0, 85.0], [11602.0, 82.0], [11386.0, 86.0], [11382.0, 85.0], [11354.0, 85.0], [11370.0, 85.0], [11358.0, 86.0], [11366.0, 86.0], [11362.0, 86.0], [11378.0, 85.0], [11406.0, 86.0], [11390.0, 85.0], [11322.0, 84.0], [11454.0, 85.0], [11434.0, 84.0], [11446.0, 85.0], [11438.0, 85.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11604.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 473.21666666666664, "minX": 1.64983404E12, "maxY": 11317.166666666666, "series": [{"data": [[1.64983428E12, 11250.933333333332], [1.6498341E12, 11257.35], [1.64983404E12, 9948.966666666667], [1.64983422E12, 11317.166666666666], [1.64983416E12, 11153.166666666666], [1.64983434E12, 473.21666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64983434E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 489.8833333333333, "minX": 1.64983404E12, "maxY": 11317.166666666666, "series": [{"data": [[1.64983428E12, 11250.933333333332], [1.6498341E12, 11257.366666666667], [1.64983404E12, 9932.3], [1.64983422E12, 11317.166666666666], [1.64983416E12, 11153.15], [1.64983434E12, 489.8833333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64983434E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 206.78333333333333, "minX": 1.64983404E12, "maxY": 5658.633333333333, "series": [{"data": [[1.64983428E12, 5625.35], [1.6498341E12, 5628.266666666666], [1.64983404E12, 4966.916666666667], [1.64983422E12, 5658.633333333333], [1.64983416E12, 5576.716666666666], [1.64983434E12, 206.78333333333333]], "isOverall": false, "label": "Get Fruit 1-success", "isController": false}, {"data": [[1.64983428E12, 5625.583333333333], [1.6498341E12, 5629.1], [1.64983404E12, 4965.383333333333], [1.64983422E12, 5658.533333333334], [1.64983416E12, 5576.433333333333], [1.64983434E12, 283.1]], "isOverall": false, "label": "Get Fruit 2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64983434E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 489.8833333333333, "minX": 1.64983404E12, "maxY": 11317.166666666666, "series": [{"data": [[1.64983428E12, 11250.933333333332], [1.6498341E12, 11257.366666666667], [1.64983404E12, 9932.3], [1.64983422E12, 11317.166666666666], [1.64983416E12, 11153.15], [1.64983434E12, 489.8833333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64983434E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

